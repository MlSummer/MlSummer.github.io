<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>片段笔记</title>
      <link href="/2022/10/06/note/XHP/"/>
      <url>/2022/10/06/note/XHP/</url>
      
        <content type="html"><![CDATA[<h2 id="代码自动生成"><a href="#代码自动生成" class="headerlink" title="代码自动生成"></a>代码自动生成</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;spring.datasource.driver-class-name&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String driverName;</span><br><span class="line"><span class="meta">@Value(&quot;$&#123;spring.datasource.url&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String url;</span><br><span class="line"><span class="meta">@Value(&quot;$&#123;spring.datasource.username&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="meta">@Value(&quot;$&#123;spring.datasource.password&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"><span class="meta">@Value(&quot;$&#123;generator.module.path&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String path;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">dirPath</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;user.dir&quot;</span>) + <span class="string">&quot;/xhp-world-modules&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">codeGenerator</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//1.创建自动生成器</span></span><br><span class="line">    <span class="type">AutoGenerator</span> <span class="variable">autoGenerator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AutoGenerator</span>();</span><br><span class="line">    <span class="comment">//2.数据库配置</span></span><br><span class="line">    <span class="type">DataSourceConfig</span> <span class="variable">dataSourceConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceConfig</span>();</span><br><span class="line">    dataSourceConfig</span><br><span class="line">            .setDbType(DbType.MYSQL)    <span class="comment">//数据库类型</span></span><br><span class="line">            .setDriverName(driverName)  <span class="comment">//数据库驱动器名称</span></span><br><span class="line">            .setUrl(url)                <span class="comment">//数据库地址</span></span><br><span class="line">            .setUsername(username)      <span class="comment">//数据库账号</span></span><br><span class="line">            .setPassword(password);     <span class="comment">//数据库密码</span></span><br><span class="line">    autoGenerator.setDataSource(dataSourceConfig);</span><br><span class="line">    <span class="comment">//3.全局配置</span></span><br><span class="line">    <span class="type">GlobalConfig</span> <span class="variable">globalConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GlobalConfig</span>();</span><br><span class="line">    globalConfig</span><br><span class="line">            .setFileOverride(<span class="literal">true</span>)              <span class="comment">//覆盖已生成文件 默认false</span></span><br><span class="line">            .setOpen(<span class="literal">true</span>)                      <span class="comment">//禁止打开输出目录</span></span><br><span class="line">            .setOutputDir(dirPath + path + <span class="string">&quot;src/main/java&quot;</span>)      <span class="comment">//指定输出目录</span></span><br><span class="line">            .setAuthor(BaseConstant.AUTHOR)     <span class="comment">//作者名</span></span><br><span class="line">            .setKotlin(<span class="literal">true</span>)                    <span class="comment">//开启Kotlin模式</span></span><br><span class="line">            .setSwagger2(<span class="literal">true</span>)                  <span class="comment">//开启Swagger模式</span></span><br><span class="line">            .setDateType(DateType.ONLY_DATE);    <span class="comment">//日期策略</span></span><br><span class="line"></span><br><span class="line">    autoGenerator.setGlobalConfig(globalConfig);</span><br><span class="line">    <span class="comment">//4.包配置</span></span><br><span class="line">    <span class="type">PackageConfig</span> <span class="variable">packageConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PackageConfig</span>();</span><br><span class="line">    packageConfig</span><br><span class="line">            .setParent(CodeGeneratorConstant.BASE_PACKAGE)  <span class="comment">//父包</span></span><br><span class="line">            .setModuleName(CodeGeneratorConstant.WORDS)     <span class="comment">//模块包</span></span><br><span class="line">            .setController(<span class="string">&quot;controller&quot;</span>)                    <span class="comment">//控制层包名</span></span><br><span class="line">            .setEntity(<span class="string">&quot;entity&quot;</span>)                            <span class="comment">//实体包名</span></span><br><span class="line">            .setMapper(<span class="string">&quot;mapper&quot;</span>)                            <span class="comment">//Mapper接口包名</span></span><br><span class="line">            .setXml(<span class="string">&quot;mapper.xml&quot;</span>)                           <span class="comment">//Xml映射包名</span></span><br><span class="line">            .setService(<span class="string">&quot;service&quot;</span>)                          <span class="comment">//服务接口包名</span></span><br><span class="line">            .setServiceImpl(<span class="string">&quot;service.impl&quot;</span>);                <span class="comment">//服务实现包名</span></span><br><span class="line">    autoGenerator.setPackageInfo(packageConfig);</span><br><span class="line">    <span class="comment">//5.模板配置</span></span><br><span class="line">    <span class="type">TemplateConfig</span> <span class="variable">templateConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplateConfig</span>();</span><br><span class="line">    templateConfig</span><br><span class="line">            .setEntity(<span class="string">&quot;/static/code/generator/entity.java&quot;</span>)</span><br><span class="line">            .setXml(<span class="string">&quot;/static/code/generator/mapper.xml&quot;</span>)</span><br><span class="line">            .setMapper(<span class="string">&quot;/static/code/generator/mapper.java&quot;</span>)</span><br><span class="line">            .setService(<span class="string">&quot;/static/code/generator/service.java&quot;</span>)</span><br><span class="line">            .setServiceImpl(<span class="string">&quot;/static/code/generator/serviceImpl.java&quot;</span>)</span><br><span class="line">            .setController(<span class="string">&quot;/static/code/generator/controller.java&quot;</span>);</span><br><span class="line">    autoGenerator.setTemplate(templateConfig);</span><br><span class="line">    <span class="comment">//6.输出文件前的操作</span></span><br><span class="line">    <span class="type">InjectionConfig</span> <span class="variable">injectionConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InjectionConfig</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="comment">// 配置自定义属性注入</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initMap</span><span class="params">()</span> &#123;</span><br><span class="line">            Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            <span class="comment">//map.put(&quot;my_field&quot;, &quot;你好！这是我自己注入的属性哦&quot;);</span></span><br><span class="line">            <span class="built_in">this</span>.setMap(map);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//7.1 Entity策略配置</span></span><br><span class="line">    <span class="type">StrategyConfig</span> <span class="variable">strategyConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StrategyConfig</span>();</span><br><span class="line">    strategyConfig</span><br><span class="line">            .setTablePrefix(CodeGeneratorConstant.WORDS + <span class="string">&quot;_&quot;</span>)<span class="comment">//设置表前缀不生成</span></span><br><span class="line">            .setSuperEntityClass(BaseEntity.class)</span><br><span class="line">            <span class="comment">//.setSuperControllerClass()</span></span><br><span class="line">            <span class="comment">//.setSuperMapperClass()</span></span><br><span class="line">            <span class="comment">//.setSuperServiceClass()</span></span><br><span class="line">            <span class="comment">//.setSuperServiceImplClass()</span></span><br><span class="line">            .setEntitySerialVersionUID(<span class="literal">false</span>)<span class="comment">//禁用生成serialVersionUID 默认true</span></span><br><span class="line">            .setEntityTableFieldAnnotationEnable(<span class="literal">true</span>)<span class="comment">//开启生成实体时生成字段注解 默认值:false</span></span><br><span class="line">            .setLogicDeleteFieldName(<span class="string">&quot;is_delete&quot;</span>)<span class="comment">//逻辑删除属性名(实体)</span></span><br><span class="line">            .setSuperEntityColumns(CodeGeneratorConstant.BASE_ENTITY_COLUMNS);<span class="comment">//父类公共字段</span></span><br><span class="line">            <span class="comment">//.addTableFills(new Column(&quot;create_time&quot;, FieldFill.INSERT))//添加表字段填充</span></span><br><span class="line">            <span class="comment">//.addTableFills(new Property(&quot;updateTime&quot;, FieldFill.INSERT_UPDATE))//添加表字段填充</span></span><br><span class="line">    <span class="comment">//7.2 Controller策略配置</span></span><br><span class="line">    strategyConfig</span><br><span class="line">            <span class="comment">//.setSuperControllerClass();</span></span><br><span class="line">            <span class="comment">//.setControllerMappingHyphenStyle()//开启驼峰转连字符 默认值:false</span></span><br><span class="line">            .setRestControllerStyle(<span class="literal">true</span>);<span class="comment">//开启生成@RestController 控制器 默认值:false</span></span><br><span class="line">    <span class="comment">//7.3 Service策略配置</span></span><br><span class="line">    <span class="comment">//strategyConfig</span></span><br><span class="line">            <span class="comment">//.setSuperServiceClass()</span></span><br><span class="line">            <span class="comment">//.setSuperServiceImplClass()</span></span><br><span class="line">    <span class="comment">//7.4 Mapper 策略配置</span></span><br><span class="line">    <span class="comment">//strategyConfig</span></span><br><span class="line">            <span class="comment">//.setSuperMapperClass()</span></span><br><span class="line">    autoGenerator.setStrategy(strategyConfig);</span><br><span class="line"></span><br><span class="line">    autoGenerator.execute();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程序片段 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 片段 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL</title>
      <link href="/2022/10/06/language/SQL/"/>
      <url>/2022/10/06/language/SQL/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL-语句（基础篇）"><a href="#SQL-语句（基础篇）" class="headerlink" title="SQL 语句（基础篇）"></a>SQL 语句（基础篇）</h1><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use [表名]; <span class="operator">/</span><span class="operator">/</span>命令用于选择数据库</span><br><span class="line"><span class="keyword">set</span> names [字符集标准]； <span class="operator">/</span><span class="operator">/</span>命令用于设置使用的字符集</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> [表名]； <span class="operator">/</span><span class="operator">/</span>查询该表所有内容</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>常用<span class="keyword">SQL</span>语句</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">-</span> 从数据库中提取数据</span><br><span class="line"><span class="keyword">UPDATE</span> <span class="operator">-</span> 更新数据库中的数据</span><br><span class="line"><span class="keyword">DELETE</span> <span class="operator">-</span> 从数据库中删除数据</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="operator">-</span> 向数据库中插入新数据</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE <span class="operator">-</span> 创建新数据库</span><br><span class="line"><span class="keyword">ALTER</span> DATABASE <span class="operator">-</span> 修改数据库</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="operator">-</span> 创建新表</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">-</span> 变更（改变）数据库表</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="operator">-</span> 删除表</span><br><span class="line"><span class="keyword">CREATE</span> INDEX <span class="operator">-</span> 创建索引（搜索键）</span><br><span class="line"><span class="keyword">DROP</span> INDEX <span class="operator">-</span> 删除索引</span><br></pre></td></tr></table></figure><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DISTINCT</span> :用于返回唯一不同的值，如多行记录的某一行返回值相同，只返回其中一条</span><br><span class="line"><span class="keyword">WHERE</span>    :条件判断，提取满足条件的记录</span><br><span class="line"><span class="keyword">AND</span> <span class="operator">&amp;</span> <span class="keyword">OR</span> :一般用于条件判断中，多个条件须同时满足用<span class="keyword">AND</span>，满足其中一条用<span class="keyword">OR</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> :对结果集按某一个列或多个列排序，默认是升序（<span class="keyword">ASC</span>），（<span class="keyword">DESC</span>）设置为升序</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> [表名](列名) <span class="keyword">VALUES</span>(列值) :插入一行或多行数据</span><br><span class="line"><span class="keyword">UPDATE</span> [表名] <span class="keyword">SET</span> (列名<span class="operator">=</span>列值) :更新修改数据表中的内容，若有条件则更新指定数据行</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> [表名] :删除选择的数据表内容，若有条件则删除指定数据行</span><br></pre></td></tr></table></figure><h1 id="SQL语句（高级篇）"><a href="#SQL语句（高级篇）" class="headerlink" title="SQL语句（高级篇）"></a>SQL语句（高级篇）</h1><h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><h3 id="TOP-x2F-LIMIT-x2F-ROWNUM"><a href="#TOP-x2F-LIMIT-x2F-ROWNUM" class="headerlink" title="TOP&#x2F;LIMIT&#x2F;ROWNUM"></a>TOP&#x2F;LIMIT&#x2F;ROWNUM</h3><p>用于规定要返回的记录的数目</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TOP [n] <span class="operator">*</span>:在查找的基础上获取前n条记录 （适用<span class="keyword">SQL</span> Server<span class="operator">/</span>MS Access）</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> [表名] LIMIT [n] :（适用MYSQL）</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> [表名] <span class="keyword">WHERE</span> ROWNUM <span class="operator">&lt;=</span> number :（适用Oracle）</span><br></pre></td></tr></table></figure><h3 id="LIKE"><a href="#LIKE" class="headerlink" title="LIKE"></a>LIKE</h3><p>用于在WHERE子句中搜索列中的指定模式</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WHERE</span> [属性名] <span class="keyword">LIKE</span> [模式] : 返回列值满足模式条件的记录</span><br><span class="line">常见的模式 ：<span class="string">&#x27;%a&#x27;</span>(a结尾),<span class="string">&#x27;a%&#x27;</span>(a开头),<span class="string">&#x27;%a%&#x27;</span>(包含a) </span><br></pre></td></tr></table></figure><h3 id="IN"><a href="#IN" class="headerlink" title="IN"></a>IN</h3><p>允许在WHERE子句中规定多个值，指定列值符合条件中的任意一个</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WHERE</span> [列名] <span class="keyword">IN</span> ([值<span class="number">1</span>],[值<span class="number">2</span>],...);</span><br></pre></td></tr></table></figure><h3 id="BETWEEN"><a href="#BETWEEN" class="headerlink" title="BETWEEN"></a>BETWEEN</h3><p>用于选取介于两个值之间的数据范围内的值(包含边界值)</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WHERE</span> [列<span class="number">1</span>] <span class="keyword">BETWEEN</span> value1 <span class="keyword">AND</span> value2;<span class="operator">/</span><span class="operator">/</span>在</span><br><span class="line"><span class="keyword">WHERE</span> [列<span class="number">2</span>] <span class="keyword">NO</span> <span class="keyword">BETWEEN</span> value1 <span class="keyword">AND</span> value2;<span class="operator">/</span><span class="operator">/</span>不在</span><br></pre></td></tr></table></figure><h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[列名] <span class="keyword">AS</span> [别名]</span><br></pre></td></tr></table></figure><h3 id="UNION"><a href="#UNION" class="headerlink" title="UNION"></a>UNION</h3><p>用于合并两个或多个SELECT语句的结果集</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [字段名<span class="number">1</span>] <span class="keyword">FROM</span> [表<span class="number">1</span>]</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> [字段名<span class="number">2</span>] <span class="keyword">FROM</span> [表<span class="number">2</span>]</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>选取表一，表二字段，并进行合并去除重复项</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>如果要保留重复项 修改操作符为 NUION <span class="keyword">ALL</span></span><br></pre></td></tr></table></figure><h3 id="分组（GROUP-BY）"><a href="#分组（GROUP-BY）" class="headerlink" title="分组（GROUP BY）"></a>分组（GROUP BY）</h3><p>GROUP BY 语句用于结合聚合函数，根据一个或多个列对结果集进行分组。在WHERE操作后</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> [表名] <span class="keyword">WHERE</span> [条件] <span class="keyword">GROUP</span> <span class="keyword">BY</span> [分组条件]</span><br></pre></td></tr></table></figure><h3 id="筛选（HAVING）"><a href="#筛选（HAVING）" class="headerlink" title="筛选（HAVING）"></a>筛选（HAVING）</h3><p>在 SQL 中增加 HAVING 子句原因是，WHERE 关键字无法与聚合函数一起使用。</p><p>HAVING 子句可以让我们筛选分组后的各组数据。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> [表名] <span class="keyword">WHERE</span> [条件] <span class="keyword">GROUP</span> <span class="keyword">BY</span> [分组条件] <span class="keyword">HAVING</span> [筛选条件]</span><br></pre></td></tr></table></figure><h3 id="存在判断（EXISTS）"><a href="#存在判断（EXISTS）" class="headerlink" title="存在判断（EXISTS）"></a>存在判断（EXISTS）</h3><p>EXISTS 运算符用于判断查询子句是否有记录，如果有一条或多条记录存在返回 <strong>True</strong>，否则返回 <strong>False</strong>。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> [表名] <span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> ([子句])</span><br></pre></td></tr></table></figure><h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><p>通配符可用于替代字符串中的任何其他字符（通配符一般LIKE关键字一同使用）</p><table><thead><tr><th>通配符</th><th align="left">描述</th><th>案例</th></tr></thead><tbody><tr><td>%</td><td align="left">替代0个或多个字符</td><td>‘%a%’</td></tr><tr><td>_</td><td align="left">替代一个字符</td><td>‘_a_‘</td></tr><tr><td>[charlist]</td><td align="left">字符列中的任何单一字符</td><td>‘XDJ’(X.D.J其中一个单词)</td></tr><tr><td>[^charlist] 或 [!charlist]</td><td align="left">不在字符列中的任何单一字符</td><td>‘！XDJ’(没有X.D.J任意一个)</td></tr></tbody></table><p><strong>MySQL</strong>中使用REGEXP和NOT REGEXP操作正则表达式</p><h2 id="连接（JOIN）"><a href="#连接（JOIN）" class="headerlink" title="连接（JOIN）"></a>连接（JOIN）</h2><p>SQL JOIN子句用于把两个或多个表的行为结合起来，基于这些表之间的共同字段。</p><ul><li><strong>INNER JOIN</strong>：如果表中有至少一个匹配，则返回行</li><li><strong>LEFT JOIN</strong>：即使右表中没有匹配，也从左表返回所有的行</li><li><strong>RIGHT JOIN</strong>：即使左表中没有匹配，也从右表返回所有的行</li><li><strong>FULL JOIN</strong>：只要其中一个表中存在匹配，则返回行</li></ul><p><img src="C:\Users\admin\Desktop\学习笔记\资源\sql-join.png" alt="sql-join.png"></p><h2 id="语句扩展"><a href="#语句扩展" class="headerlink" title="语句扩展"></a>语句扩展</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="keyword">SELECT</span> <span class="keyword">INTO</span> 从一个表复制数据到另一个表，然后把数据插入到新表中（MY <span class="keyword">SQL</span>不支持）</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">INTO</span> [newtable]</span><br><span class="line"><span class="keyword">FROM</span> [oldtable]</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">SELECT</span> 从一个表复制数据，然后把数据插入到一个已存在的表中。目标表中任何已存在的行都不会受影响</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> [newtable]</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> [oldtable]</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="keyword">CREATE</span> DATABASE 用于创建数据库</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE [dbname];</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 语句用于创建数据库中的表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [表名]</span><br><span class="line">(                        </span><br><span class="line">    column_name1 data_type(size),</span><br><span class="line">    column_name2 data_type(size),</span><br><span class="line">    column_name3 data_type(size),</span><br><span class="line">    ....</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="keyword">SQL</span>约束（Constraints）用于规定表中的数据规则</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>在 <span class="keyword">SQL</span> 中，我们有如下约束：</span><br><span class="line">    <span class="operator">/</span><span class="operator">/</span><span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="operator">-</span> 指示某列不能存储 <span class="keyword">NULL</span> 值</span><br><span class="line">    <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> [表名]</span><br><span class="line">    MODIFY [字段名] <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="operator">/</span><span class="operator">/</span><span class="keyword">UNIQUE</span> <span class="operator">-</span> 保证某列的每行必须有唯一的值</span><br><span class="line">    <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line">    <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> (字段名)</span><br><span class="line"></span><br><span class="line">    <span class="operator">/</span><span class="operator">/</span><span class="keyword">PRIMARY</span> KEY <span class="operator">-</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> 和 <span class="keyword">UNIQUE</span> 的结合。确保某列（或两个列多个列的结合）有唯一标识，有助于更容易更快速地找到表中的一个特定的记录。</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY ([字段名])</span><br><span class="line"></span><br><span class="line">    <span class="operator">/</span><span class="operator">/</span><span class="keyword">FOREIGN</span> KEY <span class="operator">-</span> 保证一个表中的数据匹配另一个表中的值的参照完整性</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> [外键名] <span class="keyword">FOREIGN</span> KEY (外键字段)</span><br><span class="line">    [字段名] <span class="type">int</span> <span class="keyword">FOREIGN</span> KEY <span class="keyword">REFERENCES</span> [外键来源表](外键字段)</span><br><span class="line"></span><br><span class="line">    <span class="operator">/</span><span class="operator">/</span><span class="keyword">CHECK</span> <span class="operator">-</span> 保证列中的值符合指定的条件</span><br><span class="line">    <span class="keyword">CHECK</span> ([字段]<span class="operator">&gt;</span><span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="operator">/</span><span class="operator">/</span><span class="keyword">DEFAULT</span> <span class="operator">-</span> 规定没有给列赋值时的默认值</span><br><span class="line">    [字段名] <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> [默认值]</span><br><span class="line"></span><br><span class="line">    <span class="operator">/</span><span class="operator">/</span>Auto<span class="operator">-</span>increment 会在新记录插入表中时生成一个唯一的数字</span><br><span class="line">    [列名] <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT</span><br><span class="line">    <span class="operator">/</span><span class="operator">/</span>以其他的值起始，使用以下<span class="keyword">SQL</span>语法</span><br><span class="line">    <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons AUTO_INCREMENT<span class="operator">=</span><span class="number">100</span></span><br></pre></td></tr></table></figure><h2 id="索引（INDEX）"><a href="#索引（INDEX）" class="headerlink" title="索引（INDEX）"></a>索引（INDEX）</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>创建索引 可以使用重复的值</span><br><span class="line"><span class="keyword">CREATE</span> INDEX [索引名]</span><br><span class="line"><span class="keyword">ON</span> [表名] (列名)</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>唯一的索引，两个行不能用重复的值</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX [索引名]</span><br><span class="line"><span class="keyword">ON</span> [表名] (列名)</span><br></pre></td></tr></table></figure><h2 id="撤销（DROP）"><a href="#撤销（DROP）" class="headerlink" title="撤销（DROP）"></a>撤销（DROP）</h2><h3 id="撤销索引"><a href="#撤销索引" class="headerlink" title="撤销索引"></a>撤销索引</h3><p>用于 MS SQL Server 的 DROP INDEX 语法</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> INDEX [表名].[索引名]</span><br></pre></td></tr></table></figure><p>用于 MySQL 的 DROP INDEX 语法</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> [表名] <span class="keyword">DROP</span> INDEX [索引名]</span><br></pre></td></tr></table></figure><h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><p>DROP TABLE 语句用于删除表</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> [表名]</span><br></pre></td></tr></table></figure><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><p>DROP DATABASE 语句用于删除数据库</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE [数据库名]</span><br></pre></td></tr></table></figure><h3 id="清除表"><a href="#清除表" class="headerlink" title="清除表"></a>清除表</h3><p>如果我们仅仅需要删除表内的数据，但并不删除表本身，那么我们该如何做呢？</p><p>请使用 TRUNCATE TABLE 语句：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> [表名]</span><br></pre></td></tr></table></figure><h2 id="修改（ALTER）"><a href="#修改（ALTER）" class="headerlink" title="修改（ALTER）"></a>修改（ALTER）</h2><p>ALTER TABLE 语句用于在已有的表中添加、删除或修改列。</p><h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><p>如需在表中添加列，请使用下面的语法</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> [表名]</span><br><span class="line"><span class="keyword">ADD</span> [列名] [类型]</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>如需删除表中的列，请使用下面的语法（请注意，某些数据库系统不允许这种在数据库表中删除列的方式）</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> [表名]</span><br><span class="line"><span class="keyword">DROP</span> CLUMN [列名]</span><br></pre></td></tr></table></figure><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p>改变表中列的数据类型，请使用下面的语法</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="keyword">SQL</span> Server</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> [表名]</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> [字段名] [类型]</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>My <span class="keyword">SQL</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> [表名]</span><br><span class="line">MODIFY <span class="keyword">COLUMN</span> [字段名] [类型]</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>Oracle <span class="number">10</span>G</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> [表名]</span><br><span class="line">MODIFY [字段名] [类型]</span><br></pre></td></tr></table></figure><h2 id="视图（VIEW）"><a href="#视图（VIEW）" class="headerlink" title="视图（VIEW）"></a>视图（VIEW）</h2><p>在 SQL 中，视图是基于 SQL 语句的结果集的可视化的表。</p><p>视图包含行和列，就像一个真实的表。视图中的字段就是来自一个或多个数据库中的真实的表中的字段。</p><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> [视图名] <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> [字段]([类型])</span><br><span class="line"><span class="keyword">FROM</span> [表名]</span><br><span class="line"><span class="keyword">WHERE</span> [条件</span><br></pre></td></tr></table></figure><p><mark>注释:</mark>视图总是显示最新的数据！每当用户查询视图时，数据库引擎通过使用视图的 SQL 语句重建数据。</p><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>查询视图方式</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> [视图名]</span><br></pre></td></tr></table></figure><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p>您可以使用下面的语法来更新视图</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">VIEW</span> [视图名] <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> [字段]([类型])</span><br><span class="line"><span class="keyword">FROM</span> [表名]</span><br><span class="line"><span class="keyword">WHERE</span> [条件]</span><br></pre></td></tr></table></figure><p>您可以通过 DROP VIEW 命令来删除视图</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> [视图名]</span><br></pre></td></tr></table></figure><h2 id="DATE-函数"><a href="#DATE-函数" class="headerlink" title="DATE 函数"></a>DATE 函数</h2><h3 id="MySQL-Date-函数"><a href="#MySQL-Date-函数" class="headerlink" title="MySQL Date 函数"></a>MySQL Date 函数</h3><table><thead><tr><th align="center">函数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><a href="https://www.runoob.com/sql/func-now.html">NOW()</a></td><td align="center">返回当前的日期和时间</td></tr><tr><td align="center"><a href="https://www.runoob.com/sql/func-curdate.html">CURDATE()</a></td><td align="center">返回当前的日期</td></tr><tr><td align="center"><a href="https://www.runoob.com/sql/func-curtime.html">CURTIME()</a></td><td align="center">返回当前的时间</td></tr><tr><td align="center"><a href="https://www.runoob.com/sql/func-date.html">DATE()</a></td><td align="center">提取日期或日期&#x2F;时间表达式的日期部分</td></tr><tr><td align="center"><a href="https://www.runoob.com/sql/func-extract.html">EXTRACT()</a></td><td align="center">返回日期&#x2F;时间的单独部分</td></tr><tr><td align="center"><a href="https://www.runoob.com/sql/func-date-add.html">DATE_ADD()</a></td><td align="center">向日期添加指定的时间间隔</td></tr><tr><td align="center"><a href="https://www.runoob.com/sql/func-date-sub.html">DATE_SUB()</a></td><td align="center">从日期减去指定的时间间隔</td></tr><tr><td align="center"><a href="https://www.runoob.com/sql/func-datediff-mysql.html">DATEDIFF()</a></td><td align="center">返回两个日期之间的天数</td></tr><tr><td align="center"><a href="https://www.runoob.com/sql/func-date-format.html">DATE_FORMAT()</a></td><td align="center">用不同的格式显示日期&#x2F;时间</td></tr></tbody></table><h3 id="SQL-Server-Date-函数"><a href="#SQL-Server-Date-函数" class="headerlink" title="SQL Server Date 函数"></a>SQL Server Date 函数</h3><table><thead><tr><th align="center">函数</th><th>描述</th></tr></thead><tbody><tr><td align="center"><a href="https://www.runoob.com/sql/func-getdate.html">GETDATE()</a></td><td>返回当前的日期和时间</td></tr><tr><td align="center"><a href="https://www.runoob.com/sql/func-datepart.html">DATEPART()</a></td><td>返回日期&#x2F;时间的单独部分</td></tr><tr><td align="center"><a href="https://www.runoob.com/sql/func-dateadd.html">DATEADD()</a></td><td>在日期中添加或减去指定的时间间隔</td></tr><tr><td align="center"><a href="https://www.runoob.com/sql/func-datediff.html">DATEDIFF()</a></td><td>返回两个日期之间的时间</td></tr><tr><td align="center"><a href="https://www.runoob.com/sql/func-convert.html">CONVERT()</a></td><td>用不同的格式显示日期&#x2F;时间</td></tr></tbody></table><h3 id="SQL-Date-数据类型"><a href="#SQL-Date-数据类型" class="headerlink" title="SQL Date 数据类型"></a>SQL Date 数据类型</h3><p><strong>MySQL</strong> 使用下列数据类型在数据库中存储日期或日期&#x2F;时间值：</p><ul><li>DATE - 格式：YYYY-MM-DD</li><li>DATETIME - 格式：YYYY-MM-DD HH:MM:SS</li><li>TIMESTAMP - 格式：YYYY-MM-DD HH:MM:SS</li><li>YEAR - 格式：YYYY 或 YY</li></ul><p><strong>SQL Server</strong> 使用下列数据类型在数据库中存储日期或日期&#x2F;时间值：</p><ul><li>DATE - 格式：YYYY-MM-DD</li><li>DATETIME - 格式：YYYY-MM-DD HH:MM:SS</li><li>SMALLDATETIME - 格式：YYYY-MM-DD HH:MM:SS</li><li>TIMESTAMP - 格式：唯一的数字</li></ul><p><strong>注释：</strong>当您在数据库中创建一个新表时，需要为列选择数据类型！</p><p>如需了解所有可用的数据类型，请访问我们完整的 <a href="https://www.runoob.com/sql/sql-datatypes.html">数据类型参考手册</a>。</p><h2 id="空值（NULL）"><a href="#空值（NULL）" class="headerlink" title="空值（NULL）"></a>空值（NULL）</h2><p>如果表中的某个列是可选的，那么我们可以在不向该列添加值的情况下插入新记录或更新已有的记录。这意味着该字段将以 NULL 值保存。</p><p>NULL 值的处理方式与其他值不同。</p><p>NULL 用作未知的或不适用的值的占位符。</p><p><mark>注释</mark>无法比较 NULL 和 0；它们是不等价的。</p><p>选用NULL和NOT NULL的值</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> [表名]</span><br><span class="line"><span class="keyword">WHERE</span> [列名] <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> [表名]</span><br><span class="line"><span class="keyword">WHERE</span> [列名] <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br></pre></td></tr></table></figure><p>如果字段的内容为NULL，则取值为0的方法</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="keyword">SQL</span> Server<span class="operator">/</span>MS Access</span><br><span class="line"><span class="keyword">SELECT</span> ISNULL([字段名]，<span class="number">0</span>)</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>My <span class="keyword">SQL</span></span><br><span class="line"><span class="keyword">SELECT</span> IFNULL([字段名]，<span class="number">0</span>)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COALESCE</span>([字段名]，<span class="number">0</span>)</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>Oracle</span><br><span class="line"><span class="keyword">SELECT</span> NVL([字段名]，<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="通用数据类型"><a href="#通用数据类型" class="headerlink" title="通用数据类型"></a>通用数据类型</h3><table><thead><tr><th align="center">数据类型</th><th>描述</th></tr></thead><tbody><tr><td align="center">CHARACTER(n)</td><td>字符&#x2F;字符串。固定长度 n。</td></tr><tr><td align="center">VARCHAR(n) 或<br>CHARACTER VARYING(n)</td><td>字符&#x2F;字符串。可变长度。最大长度 n。</td></tr><tr><td align="center">BINARY(n)</td><td>二进制串。固定长度 n。</td></tr><tr><td align="center">BOOLEAN</td><td>存储 TRUE 或 FALSE 值</td></tr><tr><td align="center">VARBINARY(n) 或<br>BINARY VARYING(n)</td><td>二进制串。可变长度。最大长度 n。</td></tr><tr><td align="center">INTEGER(p)</td><td>整数值（没有小数点）。精度 p。</td></tr><tr><td align="center">SMALLINT</td><td>整数值（没有小数点）。精度 5。</td></tr><tr><td align="center">INTEGER</td><td>整数值（没有小数点）。精度 10。</td></tr><tr><td align="center">BIGINT</td><td>整数值（没有小数点）。精度 19。</td></tr><tr><td align="center">DECIMAL(p,s)</td><td>精确数值，精度 p，小数点后位数 s。例如：decimal(5,2) 是一个小数点前有 3 位数，小数点后有 2 位数的数字。</td></tr><tr><td align="center">NUMERIC(p,s)</td><td>精确数值，精度 p，小数点后位数 s。（与 DECIMAL 相同）</td></tr><tr><td align="center">FLOAT(p)</td><td>近似数值，尾数精度 p。一个采用以 10 为基数的指数计数法的浮点数。该类型的 size 参数由一个指定最小精度的单一数字组成。</td></tr><tr><td align="center">REAL</td><td>近似数值，尾数精度 7。</td></tr><tr><td align="center">FLOAT</td><td>近似数值，尾数精度 16。</td></tr><tr><td align="center">DOUBLE PRECISION</td><td>近似数值，尾数精度 16。</td></tr><tr><td align="center">DATE</td><td>存储年、月、日的值。</td></tr><tr><td align="center">TIME</td><td>存储小时、分、秒的值。</td></tr><tr><td align="center">TIMESTAMP</td><td>存储年、月、日、小时、分、秒的值。</td></tr><tr><td align="center">INTERVAL</td><td>由一些整数字段组成，代表一段时间，取决于区间的类型。</td></tr><tr><td align="center">ARRAY</td><td>元素的固定长度的有序集合</td></tr><tr><td align="center">MULTISET</td><td>元素的可变长度的无序集合</td></tr><tr><td align="center">XML</td><td>存储 XML 数据</td></tr></tbody></table><h3 id="SQL-数据类型快速参考手册"><a href="#SQL-数据类型快速参考手册" class="headerlink" title="SQL 数据类型快速参考手册"></a>SQL 数据类型快速参考手册</h3><p>然而，不同的数据库对数据类型定义提供不同的选择。</p><p>下面的表格显示了各种不同的数据库平台上一些数据类型的通用名称：</p><table><thead><tr><th>数据类型</th><th>Access</th><th>SQLServer</th><th align="center">Oracle</th><th align="center">MySQL</th><th>PostgreSQL</th></tr></thead><tbody><tr><td><em>boolean</em></td><td>Yes&#x2F;No</td><td>Bit</td><td align="center">Byte</td><td align="center">N&#x2F;A(不适用)</td><td>Boolean</td></tr><tr><td><em>integer</em></td><td>Number (integer)</td><td>Int</td><td align="center">Number</td><td align="center">Int<br>Integer</td><td>Int<br>Integer</td></tr><tr><td><em>float</em></td><td>Number (single)</td><td>Float<br>Real</td><td align="center">Number</td><td align="center">Float</td><td>Numeric</td></tr><tr><td><em>currency</em></td><td>Currency</td><td>Money</td><td align="center">N&#x2F;A</td><td align="center">N&#x2F;A</td><td>Money</td></tr><tr><td><em>string (fixed)</em></td><td>N&#x2F;A</td><td>Char</td><td align="center">Char</td><td align="center">Char</td><td>Char</td></tr><tr><td><em>string (variable)</em></td><td>Text (&lt;256)<br>Memo (65k+)</td><td>Varchar</td><td align="center">Varchar<br>Varchar2</td><td align="center">Varchar</td><td>Varchar</td></tr><tr><td><em>binary object</em></td><td>OLE Object Memo</td><td>Binary (fixed up to 8K)<br>Varbinary (&lt;8K)<br>Image (&lt;2GB)</td><td align="center">Long<br>Raw</td><td align="center">Blob<br>Text</td><td>Binary<br>Varbinary</td></tr></tbody></table><p>详细数据类型点击该链接查询：<a href="https://www.runoob.com/sql/sql-datatypes.html">SQL MS Access、MySQL 和 SQL Server 数据类型 | 菜鸟教程 (runoob.com)</a></p><h1 id="SQL语句（函数）"><a href="#SQL语句（函数）" class="headerlink" title="SQL语句（函数）"></a>SQL语句（函数）</h1><h2 id="SQL-Aggregate-函数"><a href="#SQL-Aggregate-函数" class="headerlink" title="SQL Aggregate 函数"></a>SQL Aggregate 函数</h2><ol><li>AVG() - 返回平均值<code>SELECT AVG([字段名]) FROM [表名]</code></li><li>COUNT() - 返回行数，如果选定特定列空值不记录<code>SELECT COUNT(*) FROM [表名];</code></li><li>FIRST() - 返回第一个记录的值<code>SELECT FIRST([字段名]) FROM [表名];</code></li><li>LAST() - 返回最后一个记录的值<code>SELECT LAST([字段名]) FROM [表名];</code></li><li>MAX() - 返回最大值<code>SELECT MAX([字段名]) FROM [表名];</code></li><li>MIN() - 返回最小值<code>SELECT MIN([字段名]) FROM [表名];</code></li><li>SUM() - 返回总和<code>SELECT SUM([字段名]) FROM [表名];</code></li></ol><h2 id="SQL-Scalar-函数"><a href="#SQL-Scalar-函数" class="headerlink" title="SQL Scalar 函数"></a>SQL Scalar 函数</h2><p>大写转换（USASE）</p><p>把所选字段的内容转换为大写</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> UCASE([字段名]) <span class="keyword">FROM</span> [表名]</span><br></pre></td></tr></table></figure><h3 id="小写转换（LSASE）"><a href="#小写转换（LSASE）" class="headerlink" title="小写转换（LSASE）"></a>小写转换（LSASE）</h3><p>把所选字段的内容转换为小写</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> LCASE([字段名]) <span class="keyword">FROM</span> [表名]</span><br></pre></td></tr></table></figure><h3 id="提取字符（MID）"><a href="#提取字符（MID）" class="headerlink" title="提取字符（MID）"></a>提取字符（MID）</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> MID([字段名],[起始值],[结束值]) <span class="keyword">FROM</span> [表名]</span><br></pre></td></tr></table></figure><h3 id="内容长度（LEN）"><a href="#内容长度（LEN）" class="headerlink" title="内容长度（LEN）"></a>内容长度（LEN）</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="keyword">SQL</span></span><br><span class="line"><span class="keyword">SELECT</span> LEN([字段名]) <span class="keyword">FROM</span> [表名]</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>My <span class="keyword">SQL</span></span><br><span class="line"><span class="keyword">SELECT</span> LENGTH([字段名]) <span class="keyword">FROM</span> [表名]</span><br></pre></td></tr></table></figure><h3 id="数值舍入（ROUND）"><a href="#数值舍入（ROUND）" class="headerlink" title="数值舍入（ROUND）"></a>数值舍入（ROUND）</h3><p>ROUND() 函数用于把数值字段舍入为指定的小数位数</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ROUND([字段],[规定返回小数位数]) <span class="keyword">FROM</span> [表名]</span><br></pre></td></tr></table></figure><h3 id="当前日期（NOW）"><a href="#当前日期（NOW）" class="headerlink" title="当前日期（NOW）"></a>当前日期（NOW）</h3><p>NOW() 函数返回当前系统的日期和时间</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> NOW() <span class="keyword">FROM</span> [表名];</span><br></pre></td></tr></table></figure><h3 id="格式化（FORMAT）"><a href="#格式化（FORMAT）" class="headerlink" title="格式化（FORMAT）"></a>格式化（FORMAT）</h3><p>FORMAT() 函数用于对字段的显示进行格式化</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> FORMAT([字段名],[格式]) <span class="keyword">FROM</span> [表名]</span><br></pre></td></tr></table></figure><h1 id="SQL-快速参考"><a href="#SQL-快速参考" class="headerlink" title="SQL 快速参考"></a>SQL 快速参考</h1><table><thead><tr><th>SQL 语句</th><th>语法</th></tr></thead><tbody><tr><td>AND &#x2F; OR</td><td>SELECT column_name(s)<br>FROM table_name<br>WHERE condition<br>AND|OR condition</td></tr><tr><td>ALTER TABLE</td><td>ALTER TABLE table_name<br>ADD column_name datatypeorALTER TABLE table_name<br>DROP COLUMN column_name</td></tr><tr><td>AS (alias)</td><td>SELECT column_name AS column_alias<br>FROM table_nameorSELECT column_name<br>FROM table_name AS table_alias</td></tr><tr><td>BETWEEN</td><td>SELECT column_name(s)<br>FROM table_name<br>WHERE column_name<br>BETWEEN value1 AND value2</td></tr><tr><td>CREATE DATABASE</td><td>CREATE DATABASE database_name</td></tr><tr><td>CREATE TABLE</td><td>CREATE TABLE table_name<br>(<br>column_name1 data_type,<br>column_name2 data_type,<br>column_name2 data_type,<br>…<br>)</td></tr><tr><td>CREATE INDEX</td><td>CREATE INDEX index_name<br>ON table_name (column_name)orCREATE UNIQUE INDEX index_name<br>ON table_name (column_name)</td></tr><tr><td>CREATE VIEW</td><td>CREATE VIEW view_name AS<br>SELECT column_name(s)<br>FROM table_name<br>WHERE condition</td></tr><tr><td>DELETE</td><td>DELETE FROM table_name<br>WHERE some_column&#x3D;some_valueorDELETE FROM table_name<br>(<strong>Note:</strong> Deletes the entire table!!)DELETE * FROM table_name<br>(<strong>Note:</strong> Deletes the entire table!!)</td></tr><tr><td>DROP DATABASE</td><td>DROP DATABASE database_name</td></tr><tr><td>DROP INDEX</td><td>DROP INDEX table_name.index_name (SQL Server)<br>DROP INDEX index_name ON table_name (MS Access)<br>DROP INDEX index_name (DB2&#x2F;Oracle)<br>ALTER TABLE table_name<br>DROP INDEX index_name (MySQL)</td></tr><tr><td>DROP TABLE</td><td>DROP TABLE table_name</td></tr><tr><td>GROUP BY</td><td>SELECT column_name, aggregate_function(column_name)<br>FROM table_name<br>WHERE column_name operator value<br>GROUP BY column_name</td></tr><tr><td>HAVING</td><td>SELECT column_name, aggregate_function(column_name)<br>FROM table_name<br>WHERE column_name operator value<br>GROUP BY column_name<br>HAVING aggregate_function(column_name) operator value</td></tr><tr><td>IN</td><td>SELECT column_name(s)<br>FROM table_name<br>WHERE column_name<br>IN (value1,value2,..)</td></tr><tr><td>INSERT INTO</td><td>INSERT INTO table_name<br>VALUES (value1, value2, value3,….)<em>or</em>INSERT INTO table_name<br>(column1, column2, column3,…)<br>VALUES (value1, value2, value3,….)</td></tr><tr><td>INNER JOIN</td><td>SELECT column_name(s)<br>FROM table_name1<br>INNER JOIN table_name2<br>ON table_name1.column_name&#x3D;table_name2.column_name</td></tr><tr><td>LEFT JOIN</td><td>SELECT column_name(s)<br>FROM table_name1<br>LEFT JOIN table_name2<br>ON table_name1.column_name&#x3D;table_name2.column_name</td></tr><tr><td>RIGHT JOIN</td><td>SELECT column_name(s)<br>FROM table_name1<br>RIGHT JOIN table_name2<br>ON table_name1.column_name&#x3D;table_name2.column_name</td></tr><tr><td>FULL JOIN</td><td>SELECT column_name(s)<br>FROM table_name1<br>FULL JOIN table_name2<br>ON table_name1.column_name&#x3D;table_name2.column_name</td></tr><tr><td>LIKE</td><td>SELECT column_name(s)<br>FROM table_name<br>WHERE column_name LIKE pattern</td></tr><tr><td>ORDER BY</td><td>SELECT column_name(s)<br>FROM table_name<br>ORDER BY column_name [ASC|DESC]</td></tr><tr><td>SELECT</td><td>SELECT column_name(s)<br>FROM table_name</td></tr><tr><td>SELECT *</td><td>SELECT *<br>FROM table_name</td></tr><tr><td>SELECT DISTINCT</td><td>SELECT DISTINCT column_name(s)<br>FROM table_name</td></tr><tr><td>SELECT INTO</td><td>SELECT <em><br>INTO new_table_name [IN externaldatabase]<br>FROM old_table_name</em>or*SELECT column_name(s)<br>INTO new_table_name [IN externaldatabase]<br>FROM old_table_name</td></tr><tr><td>SELECT TOP</td><td>SELECT TOP number|percent column_name(s)<br>FROM table_name</td></tr><tr><td>TRUNCATE TABLE</td><td>TRUNCATE TABLE table_name</td></tr><tr><td>UNION</td><td>SELECT column_name(s) FROM table_name1<br>UNION<br>SELECT column_name(s) FROM table_name2</td></tr><tr><td>UNION ALL</td><td>SELECT column_name(s) FROM table_name1<br>UNION ALL<br>SELECT column_name(s) FROM table_name2</td></tr><tr><td>UPDATE</td><td>UPDATE table_name<br>SET column1&#x3D;value, column2&#x3D;value,…<br>WHERE some_column&#x3D;some_value</td></tr><tr><td>WHERE</td><td>SELECT column_name(s)<br>FROM table_name<br>WHERE column_name operator value</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> SQL </tag>
            
            <tag> 语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二十三种设计模式</title>
      <link href="/2022/10/06/note/DesignMode/"/>
      <url>/2022/10/06/note/DesignMode/</url>
      
        <content type="html"><![CDATA[<h1 id="二十三种设计模式（GoF23）"><a href="#二十三种设计模式（GoF23）" class="headerlink" title="二十三种设计模式（GoF23）"></a>二十三种设计模式（GoF23）</h1><blockquote><p>一种思维，一种态度，一种进步</p></blockquote><h2 id="基本要素"><a href="#基本要素" class="headerlink" title="基本要素"></a>基本要素</h2><p>模式名称</p><p>问题</p><p>解决方案</p><p>效果</p><h2 id="模式分类"><a href="#模式分类" class="headerlink" title="模式分类"></a>模式分类</h2><h3 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h3><ol><li>单例模式</li><li>工厂模式</li><li>抽象工厂模式</li><li>建造者模式</li><li>原型模式</li></ol><h3 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h3><ol><li>适配器模式</li><li>桥接模式</li><li>装饰模式</li><li>组合模式</li><li>外观模式</li><li>享元模式</li><li>代理模式</li></ol><h3 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h3><ol><li>模板方法模式</li><li>命令模式</li><li>迭代器模式</li><li>观察者模式</li><li>中介者模式</li><li>备忘录模式</li><li>解释器模式</li><li>状态模式</li><li>策略模式</li><li>职责链模式</li><li>访问者模式</li></ol><h2 id="OOP（面向对象）七大原则"><a href="#OOP（面向对象）七大原则" class="headerlink" title="OOP（面向对象）七大原则"></a>OOP（面向对象）七大原则</h2><ol><li>开闭原则：对扩展开发，对修改关闭</li><li>里氏替换原则：继承必须确保超类所拥有的性质在子类中仍然成立</li><li>依赖倒置原则：要面向接口编程，不要面向实现编程</li><li>单一职责原则：控制类的粒度大小、将对象解耦、提高其内聚性</li><li>接口隔离原则：要为各个类建立它们需要的专用接口</li><li>迪米特法则：只与你的直接朋友交谈，不跟“陌生人”说话</li><li>合成复用原则：尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 设计思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逻辑 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/2022/10/06/note/DataStructure/"/>
      <url>/2022/10/06/note/DataStructure/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="数据结构-概述"><a href="#数据结构-概述" class="headerlink" title="数据结构-概述"></a>数据结构-概述</h2><h3 id="线性结构"><a href="#线性结构" class="headerlink" title="线性结构"></a>线性结构</h3><p>常见：数组 队列 链表 栈</p><p>存储结构：顺序存储结构 链式存储结构</p><h3 id="非线性结构"><a href="#非线性结构" class="headerlink" title="非线性结构"></a>非线性结构</h3><p>二维数组 多维数组 广义表 树结构 图结构</p><h2 id="数据结构-稀疏数组"><a href="#数据结构-稀疏数组" class="headerlink" title="数据结构-稀疏数组"></a>数据结构-稀疏数组</h2><p>稀疏数组一般用于二维数组中存在大量无意义的值</p><table><thead><tr><th></th><th>行（row）</th><th>列（col）</th><th>值（value）</th></tr></thead><tbody><tr><td>1</td><td>m</td><td>n</td><td>a</td></tr><tr><td>[1]</td><td>0</td><td>3</td><td>33</td></tr><tr><td>[2]</td><td>…</td><td>…</td><td>…</td></tr><tr><td>[3]</td><td>…</td><td>…</td><td>…</td></tr></tbody></table><p>一般第一行数据 代表是一个m行n列的二维表，共有a个位置有值</p><p>接下来的每一列代表一个指定行列位置的值</p><h2 id="数据结构-队列"><a href="#数据结构-队列" class="headerlink" title="数据结构-队列"></a>数据结构-队列</h2><p>有序列表 可以用数组或链表实现</p><h2 id="数据结构-栈"><a href="#数据结构-栈" class="headerlink" title="数据结构-栈"></a>数据结构-栈</h2><p>栈的三种表达式</p><ul><li>前缀（波兰表达式）运算符位于操作数之前 ：+-&#x2F;*1254</li><li>中缀 ：（1+1）-41</li><li>后缀（逆波兰表达式）运算符位于操作数之后 ：1234-+*</li></ul><h2 id="数据结构-递归"><a href="#数据结构-递归" class="headerlink" title="数据结构-递归"></a>数据结构-递归</h2><h2 id="数据结构-哈希表"><a href="#数据结构-哈希表" class="headerlink" title="数据结构-哈希表"></a>数据结构-哈希表</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建HashTable</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HashTab</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line">    <span class="keyword">private</span> EmpLinkedList[] empLinkedListArray;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HashTab</span><span class="params">(<span class="type">int</span> size)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.size = size;</span><br><span class="line">        empLinkedListArray = <span class="keyword">new</span> <span class="title class_">EmpLinkedList</span>[size];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Emp emp)</span>&#123;</span><br><span class="line">        <span class="comment">//根据id得到该员工添加到哪条列表</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">empLinkedListNO</span> <span class="operator">=</span> hashFun(emp.id);</span><br><span class="line">        empLinkedListArray[empLinkedListNO].add(emp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            empLinkedListArray[i].list();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//编写散列函数，简单取模</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashFun</span><span class="params">(<span class="type">int</span> id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id % size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实体类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Emp</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> Emp next; <span class="comment">//next</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Emp</span><span class="params">(<span class="type">int</span> id,String name)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建EmpLinkedList</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EmpLinkedList</span>&#123;</span><br><span class="line">    <span class="comment">//头指针，指向第一个Emp</span></span><br><span class="line">    <span class="keyword">private</span> Emp head;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加员工到链表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Emp emp)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span>)&#123;</span><br><span class="line">            head = emp;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Emp</span> <span class="variable">curEmp</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (curEmp.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            curEmp = curEmp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        curEmp.next = emp;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历链表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前链表为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前链表信息：&quot;</span>);</span><br><span class="line">        <span class="type">Emp</span> <span class="variable">curEmp</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (curEmp!=<span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;=&gt; id=%d name=%s\t&quot;</span>,curEmp.id,curEmp.name);</span><br><span class="line">            curEmp = curEmp.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据结构-二叉树"><a href="#数据结构-二叉树" class="headerlink" title="数据结构-二叉树"></a>数据结构-二叉树</h2><p>数组的存在通过下标访问元素，速度快，链式存储添加删除快</p><p>树的存在兼顾二者的优点</p><hr><p>满二叉树：满足节点数&#x3D;2^n-1(n为二叉树的层数) 所有叶子节点在n层</p><p>完全二叉树：n层从左到右连续    n-1层从右到左连续</p><p>前序遍历：中左右</p><p>中序遍历：左中右</p><p>后序遍历：左右中</p><blockquote><p>举例 以前序为例</p></blockquote><h3 id="节点方法"><a href="#节点方法" class="headerlink" title="节点方法"></a>节点方法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//前序遍历</span><br><span class="line">public void preOrder()&#123;</span><br><span class="line">    System.out.println(this);//先输出父节点</span><br><span class="line">    //递归左节点</span><br><span class="line">    if(this.left!=null) this.left.preOrder();</span><br><span class="line">    //递归右节点</span><br><span class="line">    if(this.right!=null) this.right.preOrder();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//前序遍历查找</span><br><span class="line">public Node preOrderSearch(int no)&#123;</span><br><span class="line">System.out.println(&quot;当前比较节点no=&quot;+this.no);</span><br><span class="line">if(this.no == no)return this;</span><br><span class="line">if(this.left != null) &#123;</span><br><span class="line">Node node = this.left.preOrderSearch(no);</span><br><span class="line">if(node!=null)return node;</span><br><span class="line">&#125;</span><br><span class="line">if(this.right != null) &#123;</span><br><span class="line">Node node = this.right.preOrderSearch(no);</span><br><span class="line">if(node!=null)return node;</span><br><span class="line">&#125;</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//删除</span><br><span class="line">public void deleteNode(int no)&#123;</span><br><span class="line">if(this.left != null &amp;&amp; this.left.no == no) &#123;</span><br><span class="line">this.left = null;</span><br><span class="line">        return;</span><br><span class="line">&#125;</span><br><span class="line">if(this.right != null &amp;&amp; this.right.no == no) &#123;</span><br><span class="line">this.right = null;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">if(this.left != null) this.left.deleteNode(no);</span><br><span class="line">if(this.right != null) this.right.deleteNode(no);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉树方法"><a href="#二叉树方法" class="headerlink" title="二叉树方法"></a>二叉树方法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//前序遍历</span><br><span class="line">public void preOrder()&#123;</span><br><span class="line">    if(root != null) root.preOrder();</span><br><span class="line">    else System.out.println(&quot;当前二叉树为空，无法遍历&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//前序遍历查找</span><br><span class="line">public Node preOrderSearch(int no)&#123;</span><br><span class="line">    if(root != null) return root.preOrderSearch(no);</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//删除</span><br><span class="line">public void deleteNode(int no)&#123;</span><br><span class="line">    if(root != null)&#123;</span><br><span class="line">        if(root.getNo()==no) root = null;</span><br><span class="line">        else root.deleteNode(no);</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        System.out.println(&quot;空树不能删除&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="顺序存储"><a href="#顺序存储" class="headerlink" title="顺序存储"></a>顺序存储</h3><blockquote><p>顺序二叉树的特点：</p></blockquote><ol><li>通常只考虑完全二叉树</li><li>第n个元素的左子节点为 2 * n + 1</li><li>第n个元素的右子节点为 2 * n + 2</li><li>第n个元素的父节点为 （n-1)&#x2F;2</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrTree</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] arr;<span class="comment">//存储数据节点的数组</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrTree</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.arr = arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//编写一个方法，完成顺序存储二叉树的前序排列</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 数组下标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preOrder</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="comment">//数组为空</span></span><br><span class="line">        <span class="keyword">if</span>(arr == <span class="literal">null</span> || arr.length == <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;数组为空，不能按照二叉树前序遍历&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输出当前这个元素</span></span><br><span class="line">        System.out.println(arr[index]);</span><br><span class="line">        <span class="comment">//向左递归</span></span><br><span class="line">        <span class="keyword">if</span>((index * <span class="number">2</span> + <span class="number">1</span>) &lt; arr.length)&#123;</span><br><span class="line">            preOrder(<span class="number">2</span> * index + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//向右递归</span></span><br><span class="line">        <span class="keyword">if</span>((index * <span class="number">2</span> + <span class="number">2</span>) &lt; arr.length)&#123;</span><br><span class="line">            preOrder(<span class="number">2</span> * index + <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        <span class="type">ArrTree</span> <span class="variable">arrTree</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrTree</span>(arr);</span><br><span class="line">        arrTree.preOrder(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线索化二叉树"><a href="#线索化二叉树" class="headerlink" title="*线索化二叉树"></a>*线索化二叉树</h3><h3 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h3><p>给定n个权值作为n个叶子节点，构造一棵二叉树，若该树的带权路径长度（wpl）达到最小，称为最优二叉树，也称为哈夫曼树</p><h4 id="哈夫曼编码"><a href="#哈夫曼编码" class="headerlink" title="哈夫曼编码"></a>哈夫曼编码</h4><p>可以用于文件压缩</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过List 创建对应的哈夫曼树</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Node <span class="title function_">createHuffmanTree</span><span class="params">(List&lt;Node&gt; nodes)</span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (nodes.size()&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//排序 从小到大</span></span><br><span class="line">        Collections.sort(nodes);</span><br><span class="line">        <span class="comment">//取出第一个节点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">leftNode</span> <span class="operator">=</span> nodes.get(<span class="number">0</span>);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">rightNode</span> <span class="operator">=</span> nodes.get(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//创建一个新二叉树，它的根节点没有data</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">parent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="literal">null</span>, leftNode.weight+ rightNode.weight);</span><br><span class="line">        parent.left = leftNode;</span><br><span class="line">        parent.right = rightNode;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//移除用过的二叉树</span></span><br><span class="line">        nodes.remove(leftNode);</span><br><span class="line">        nodes.remove(rightNode);</span><br><span class="line">        nodes.add(parent);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回最后的节点就是哈夫曼树根节点</span></span><br><span class="line">    <span class="keyword">return</span> nodes.get(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="补码-反码"><a href="#补码-反码" class="headerlink" title="*补码 反码"></a><span style="color:red">*补码 反码</span></h4><h3 id="二叉排序树（BST）"><a href="#二叉排序树（BST）" class="headerlink" title="二叉排序树（BST）"></a>二叉排序树（BST）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建二叉排序树</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinarySortTree</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Node root;</span><br><span class="line">    <span class="comment">//添加节点的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Node node)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            root = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            root.add(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//中序遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">infixOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root != <span class="literal">null</span>)&#123;</span><br><span class="line">            root.infixOrder();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;二叉排序树为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查找要删除的节点</span></span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">search</span><span class="params">(<span class="type">int</span> value)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> root.search(value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查找父节点</span></span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">searchParent</span><span class="params">(<span class="type">int</span> value)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> root.searchParent(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delNode</span><span class="params">(<span class="type">int</span> value)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">targetNode</span> <span class="operator">=</span> search(value);</span><br><span class="line">            <span class="keyword">if</span>(targetNode == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>)&#123;</span><br><span class="line">                root = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">Node</span> <span class="variable">parent</span> <span class="operator">=</span> searchParent(value);</span><br><span class="line">            <span class="keyword">if</span>(targetNode.left == <span class="literal">null</span> &amp;&amp; targetNode.right == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (parent.left != <span class="literal">null</span> &amp;&amp; parent.left.value == value) &#123;</span><br><span class="line">                    parent.left = <span class="literal">null</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (parent.right != <span class="literal">null</span> &amp;&amp; parent.right.value == value) &#123;</span><br><span class="line">                    parent.right = <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(targetNode.left != <span class="literal">null</span> &amp;&amp; targetNode.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">minVal</span> <span class="operator">=</span> delRightTreeMin(targetNode.right);</span><br><span class="line">                targetNode.value = minVal;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(targetNode.left != <span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(parent.left.value == value)&#123;</span><br><span class="line">                        parent.left = targetNode.left;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        parent.right = targetNode.left;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(parent.left.value == value)&#123;</span><br><span class="line">                        parent.left = targetNode.right;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        parent.right = targetNode.right;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">delRightTreeMin</span><span class="params">(Node node)</span>&#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">target</span> <span class="operator">=</span> node;</span><br><span class="line">        <span class="keyword">while</span> (target.left != <span class="literal">null</span>)&#123;</span><br><span class="line">            target = target.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//这时target就指向了最小结点</span></span><br><span class="line">        <span class="comment">//删除最小节点</span></span><br><span class="line">        delNode(target.value);</span><br><span class="line">        <span class="keyword">return</span> target.value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建节点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    Node left;</span><br><span class="line">    Node right;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> value)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加节点 递归的形式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Node node)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断传入节点值与当前树节点值编辑哦</span></span><br><span class="line">        <span class="keyword">if</span>(node.value &lt; <span class="built_in">this</span>.value)&#123;</span><br><span class="line">            <span class="comment">//判断左节点是否有值</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">this</span>.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="built_in">this</span>.left.add(node);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.left = node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//判断右子节点是否为空</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">this</span>.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="built_in">this</span>.right.add(node);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.right = node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//中序排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">infixOrder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.left != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.left.infixOrder();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.right != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.right.infixOrder();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找要删除的节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 查找节点的value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回查找结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">search</span><span class="params">(<span class="type">int</span> value)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(value == <span class="built_in">this</span>.value)&#123;</span><br><span class="line">            <span class="comment">//找到 就是该节点</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(value &gt; <span class="built_in">this</span>.value)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">this</span>.right == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.right.search(value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">this</span>.left == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.left.search(value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找要删除节点的父节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 查找节点的value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回查找结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">searchParent</span><span class="params">(<span class="type">int</span> value)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>((<span class="built_in">this</span>.left != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.left.value == value) ||</span><br><span class="line">            <span class="built_in">this</span>.right != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.right.value == value)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">this</span>.left != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.value &gt; value)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.left.searchParent(value);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">this</span>.right != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.value &lt; value)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.right.searchParent(value);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Node&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;value=&quot;</span> + value +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉树的删除"><a href="#二叉树的删除" class="headerlink" title="二叉树的删除"></a>二叉树的删除</h3><p>三种删除情况</p><ul><li>删除叶子节点</li><li>删除节点下还有一个子节点</li><li>删除节点下还有两个子节点</li></ul><h3 id="平衡二叉树-AVL"><a href="#平衡二叉树-AVL" class="headerlink" title="平衡二叉树(AVL)"></a>平衡二叉树(AVL)</h3><p>左旋转，右旋转</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//左旋转方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">leftRotate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//以当前根节点的值</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(value);</span><br><span class="line">        <span class="comment">//把新的节点的左子树设置为当前节点的左子树</span></span><br><span class="line">        newNode.left = left;</span><br><span class="line">        <span class="comment">//把新的节点的右子树设置为当前节点的右子树的左子树</span></span><br><span class="line">        newNode.right = right.left;</span><br><span class="line">        <span class="comment">//把当前节点的值替换成右子节点的值</span></span><br><span class="line">        value = right.value;</span><br><span class="line">        <span class="comment">//把当前节点的右子树设置成右子树的右子树</span></span><br><span class="line">        right = right.right;</span><br><span class="line">        <span class="comment">//把当前节点的左子树设置成新节点</span></span><br><span class="line">        left = newNode;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="数据结构-多路查找树"><a href="#数据结构-多路查找树" class="headerlink" title="数据结构-多路查找树"></a>数据结构-多路查找树</h2><h3 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h3><p>&#x3D;&#x3D; B-tree</p><p><img src="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%AE%97%E6%B3%95%EF%BC%88JAVA%EF%BC%89.assets/image-20220822204548264.png" alt="image-20220822204548264"></p><h3 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h3><p>相比于B树所有数据只存在于叶子节点（适合文件存储）</p><p><img src="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%AE%97%E6%B3%95%EF%BC%88JAVA%EF%BC%89.assets/image-20220822204616659.png" alt="image-20220822204616659"></p><h3 id="B-树-1"><a href="#B-树-1" class="headerlink" title="B*树"></a>B*树</h3><h2 id="数据结构-图"><a href="#数据结构-图" class="headerlink" title="数据结构-图"></a>数据结构-图</h2><p>线性表和树一般只有一个前驱，当我们要表示多对多的关系时，就需要使用图（图 是一种数据结构）</p><ul><li>顶点</li><li>边</li><li>路径</li><li>无向图</li><li>有向图</li><li>带权图</li></ul><h3 id="图的表示"><a href="#图的表示" class="headerlink" title="图的表示"></a>图的表示</h3><h4 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h4><p>需要为每一个顶点分配n个边的空间，但是很多边不存在，会浪费空间</p><h4 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h4><h3 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h3><h4 id="深度优先（DFS）"><a href="#深度优先（DFS）" class="headerlink" title="深度优先（DFS）"></a>深度优先（DFS）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Dfs</span><span class="params">(<span class="type">int</span> index,<span class="type">boolean</span>[] flag)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(flag[index])<span class="keyword">return</span>;</span><br><span class="line">        System.out.print(vertexList.get(index) + <span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">        flag[index] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> index + <span class="number">1</span>; i &lt; vertexList.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(edges[index][i] == <span class="number">1</span>)&#123;</span><br><span class="line">                Dfs(i,flag);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="广度优先（BFS）"><a href="#广度优先（BFS）" class="headerlink" title="广度优先（BFS）"></a>广度优先（BFS）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Bfs</span><span class="params">(List&lt;Integer&gt; indexs, <span class="type">boolean</span>[] flag)</span>&#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span>(indexs.size()==<span class="number">0</span>)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> index :indexs) &#123;</span><br><span class="line">        <span class="comment">//获得当前层数据</span></span><br><span class="line">        System.out.print(vertexList.get(index) + <span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">        flag[index] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> index :indexs) &#123;</span><br><span class="line">        <span class="comment">//遍历当前层下一层数据 并判断是否已经访问过</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> index + <span class="number">1</span>; i &lt; vertexList.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(edges[index][i] == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!flag[i]) &#123;</span><br><span class="line">                    list.add(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//递归下一层</span></span><br><span class="line">    System.out.println();</span><br><span class="line">    Bfs(list,flag);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>算法中的基本操作语句的重复执行次数是问题规模n的某个函数，用T(n)表示–&gt;n趋近于无穷大 T(n)的极限不为零的常数。O(n)为算法的渐进时间复杂度，简称时间复杂度</p><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] bubbleSorting(<span class="type">int</span>[] test)&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; test.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="comment">//定义一个boolean值 判断本次是否有数字调换位置 默认是未调换位置的</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>; j &lt; test.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(test[i]&gt;test[j])&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> test[i];</span><br><span class="line">                test[i] = test[j];</span><br><span class="line">                test[j] = temp;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!flag)<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> test;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] selectSort(<span class="type">int</span>[] arr)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxIndex</span> <span class="operator">=</span> i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[maxIndex] &gt; arr[j])&#123;</span><br><span class="line">                maxIndex = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        arr[i] = arr[maxIndex];</span><br><span class="line">        arr[maxIndex] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insertSort</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="comment">//定义待插入的值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">insertValue</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        <span class="comment">//定义有序数组最后一项下标</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">insertIndex</span> <span class="operator">=</span> i - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(insertIndex &gt;= <span class="number">0</span> &amp;&amp; insertValue &lt; arr[insertIndex])&#123;</span><br><span class="line">            arr[insertIndex + <span class="number">1</span>] = arr[insertIndex] ;</span><br><span class="line">            insertIndex--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        arr[insertIndex + <span class="number">1</span>] = insertValue;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;第&quot;</span>+i+<span class="string">&quot;轮插入&quot;</span>);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><p>基于插入排序</p><h4 id="交换式"><a href="#交换式" class="headerlink" title="交换式"></a>交换式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">shellSort</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> arr.length/<span class="number">2</span>; i &gt; <span class="number">0</span>; i /= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length/i; j += i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> j + i; k &lt; arr.length; k+=i) &#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[j]&gt;arr[k])&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                    arr[j] = arr[k];</span><br><span class="line">                    arr[k] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;第&quot;</span>+ ++count +<span class="string">&quot;轮输出结果：&quot;</span>);</span><br><span class="line">        System.out.println(Arrays.toString(arr));;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="移动式-插入排序"><a href="#移动式-插入排序" class="headerlink" title="移动式(+插入排序)"></a>移动式(+插入排序)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">shellSort2</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> arr.length/<span class="number">2</span>; i &gt; <span class="number">0</span>; i /= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length/i; j += i) &#123;</span><br><span class="line">            <span class="comment">//定义待插入的值</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">insertValue</span> <span class="operator">=</span> arr[j];</span><br><span class="line">            <span class="comment">//定义有序数组最后一项下标</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">insertIndex</span> <span class="operator">=</span> j - i;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (insertIndex&gt;=<span class="number">0</span> &amp;&amp; insertValue &gt; arr[insertIndex])&#123;</span><br><span class="line">                arr[insertIndex + i] = arr[insertIndex];</span><br><span class="line">                insertIndex -= i;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            arr[insertIndex + i] = insertValue;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;第&quot;</span>+ ++count +<span class="string">&quot;轮输出结果：&quot;</span>);</span><br><span class="line">        System.out.println(Arrays.toString(arr));;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速排序（改进于冒泡）"><a href="#快速排序（改进于冒泡）" class="headerlink" title="快速排序（改进于冒泡）"></a>快速排序（改进于冒泡）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> left,<span class="type">int</span> right)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> left;<span class="comment">//左哨兵</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> right;<span class="comment">//右哨兵</span></span><br><span class="line">    <span class="comment">//定义中间值</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">point</span> <span class="operator">=</span> arr[l];</span><br><span class="line">    <span class="keyword">while</span> (l&lt;r)&#123;</span><br><span class="line">        <span class="keyword">while</span> (arr[r]&gt;point &amp;&amp; l&lt;r)&#123;</span><br><span class="line">            r--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (arr[l]&lt;point &amp;&amp; l&lt;r)&#123;</span><br><span class="line">            l++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[l];</span><br><span class="line">            arr[l] = arr[r];</span><br><span class="line">            arr[r] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(left&lt;l)</span><br><span class="line">        quickSort(arr,left,l-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(r&lt;right)</span><br><span class="line">        quickSort(arr,r+<span class="number">1</span>,right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="归并排序（分治"><a href="#归并排序（分治" class="headerlink" title="归并排序（分治)"></a>归并排序（分治)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分+合方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mergeSort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> right,<span class="type">int</span>[] temp)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left &lt; right)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right)/<span class="number">2</span>;</span><br><span class="line">        <span class="comment">//向左递归分解</span></span><br><span class="line">        mergeSort(arr,left,mid,temp);</span><br><span class="line">        <span class="comment">//向右边递归分解</span></span><br><span class="line">        mergeSort(arr,mid+<span class="number">1</span>,right,temp);</span><br><span class="line">        <span class="comment">//每分解一次就合并一次</span></span><br><span class="line">        merge(arr,left,mid,right,temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//合并方法</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr 排序的原始数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> left 左边有序序列的初始索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mid 中间索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> right 右边索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> temp 左中转的数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> mid, <span class="type">int</span> right,<span class="type">int</span>[] temp)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left;<span class="comment">//初始化 i 左边有序序列的初始索引</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> mid + <span class="number">1</span>;<span class="comment">//初始化 j 右边有序序列的初始索引</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//指向temp数组的当前索引</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//先把左右两边(有序)数据按规则填充到temp数组</span></span><br><span class="line">    <span class="comment">//直到左右两边有序数列有一边处理完毕</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= right)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] &lt;= arr[j])&#123;</span><br><span class="line">            temp[t++] = arr[i++];</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            temp[t++] = arr[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果一边有剩余 把剩余数据的全部填充到temp</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid)&#123;</span><br><span class="line">        temp[t++] = arr[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= right)&#123;</span><br><span class="line">        temp[t++] = arr[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将temp数组的元素重新拷贝到arr</span></span><br><span class="line">    t = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">tempLeft</span> <span class="operator">=</span> left;</span><br><span class="line">    <span class="keyword">while</span> (tempLeft &lt;= right)&#123;</span><br><span class="line">        arr[tempLeft++] = temp[t++];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基数排序"><a href="#基数排序" class="headerlink" title="*基数排序"></a>*基数排序</h3><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><p><strong>大顶堆</strong>：左右孩子节点值相加小于父节点</p><p><strong>小顶堆</strong>：左右孩子节点值相加大于父节点</p><h3 id="排序算法时间复杂度"><a href="#排序算法时间复杂度" class="headerlink" title="排序算法时间复杂度"></a>排序算法时间复杂度</h3><table><thead><tr><th>排序算法</th><th>平均时间复杂度</th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>冒泡排序</td><td>O(n^2)</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>选择排序</td><td>O(n^2)</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>插入排序</td><td>O(n^2)</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>希尔排序</td><td>O(n log n)</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>归并排序</td><td>O(n log n)</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>快速排序</td><td>O(n log n)</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>堆排序</td><td>O(n log n)</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>计数排序</td><td>O(n+k)</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>桶排序</td><td>O(n+k)</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>基数排序</td><td>O(n×k)</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="查找算法"><a href="#查找算法" class="headerlink" title="查找算法"></a>查找算法</h2><h3 id="线性查找"><a href="#线性查找" class="headerlink" title="线性查找"></a>线性查找</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查找满足条件的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">seqSearch</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> value)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i]==value)<span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不用递归</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> value)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>,right = arr.length;</span><br><span class="line">    <span class="keyword">while</span> (left&lt;right)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (left+right)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(arr[index] == value)&#123;</span><br><span class="line">            <span class="keyword">return</span> index;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(arr[index] &gt; value)&#123;</span><br><span class="line">            right = index;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            left = index + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> value,<span class="type">int</span> left,<span class="type">int</span> right)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">rus</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(left&lt;=right) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (arr[index] == value) rus = index;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (arr[index] &gt; value) &#123;</span><br><span class="line">            rus = binarySearch(arr, value, left, index - <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            rus = binarySearch(arr, value, index, right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rus;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插值查找"><a href="#插值查找" class="headerlink" title="插值查找"></a>插值查找</h3><p>$$<br>mid &#x3D; left+(right-left)*(findval-arr[left])&#x2F;(arr[right]-arr[left])<br>$$</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr 待查找的数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> left 最左下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> right 最右下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value 待查寻的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">insertSearch</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> left,<span class="type">int</span> right,<span class="type">int</span> value)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left&gt;right || arr[left]&gt;value || arr[right] &lt; value)<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) * (value -arr[left])/(arr[right]-arr[left]);</span><br><span class="line">    <span class="type">int</span> <span class="variable">findValue</span> <span class="operator">=</span> arr[mid];</span><br><span class="line">    <span class="keyword">if</span>(findValue&gt;value)&#123;</span><br><span class="line">        mid = insertSearch(arr,left,mid-<span class="number">1</span>,value);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(findValue&lt;value)&#123;</span><br><span class="line">        mid = insertSearch(arr,mid+<span class="number">1</span>,right,value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="斐波那契查找"><a href="#斐波那契查找" class="headerlink" title="斐波那契查找"></a>斐波那契查找</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">maxSize</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="comment">//得到一个斐波那契数列</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] fibonacci()&#123;</span><br><span class="line">    <span class="type">int</span>[] f = <span class="keyword">new</span> <span class="title class_">int</span>[maxSize];</span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    f[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; f.length; i++) &#123;</span><br><span class="line">        f[i] = f[i-<span class="number">1</span>]+f[i-<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//斐波那契查找算法</span></span><br><span class="line"><span class="comment">//非递归</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a 数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key 返回查找关键码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回对应下标 无则返回-1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fibonacciSearch</span><span class="params">(<span class="type">int</span>[] a,<span class="type">int</span> key)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> a.length -<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//表示斐波那契数列下标</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//存放mid值</span></span><br><span class="line">    <span class="type">int</span> f[] = fibonacci();<span class="comment">//获取斐波那契数列</span></span><br><span class="line">    <span class="comment">//获取分割数组下标</span></span><br><span class="line">    <span class="keyword">while</span> (high &gt; f[k] -<span class="number">1</span>)k++;</span><br><span class="line">    <span class="type">int</span>[] temp = Arrays.copyOf(a,f[k]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> high + <span class="number">1</span>; i &lt; temp.length; i++) &#123;</span><br><span class="line">        temp[i] = a[high];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用while循环找到key</span></span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high)&#123;</span><br><span class="line">        mid = low + f[k-<span class="number">1</span>]-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(key &lt; temp[mid])&#123;</span><br><span class="line">            high = mid =<span class="number">1</span>;</span><br><span class="line">            k--;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(key &gt; temp[mid])&#123;</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">            k -= <span class="number">2</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Math.min(mid, high);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ++mid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二分算法"><a href="#二分算法" class="headerlink" title="二分算法"></a>二分算法</h2><p>适用于有序数列，运行时间O（log2n）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二分查找非递归实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr 待查找的数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> target 需要查找的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回结果下标 如果没找到返回-1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> target)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//初始化起点</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> arr.length -<span class="number">1</span>;<span class="comment">//初始化终点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (right + left)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (arr[index] == target)&#123;</span><br><span class="line">            <span class="keyword">return</span> index;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[index] &gt; target)&#123;</span><br><span class="line">            right = index - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            left = index + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分治算法"><a href="#分治算法" class="headerlink" title="分治算法"></a>分治算法</h2><p>将一个复杂的问题分解为较小的问题</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">hanoiTower</span><span class="params">(<span class="type">int</span> num,<span class="type">char</span> a, <span class="type">char</span> b,<span class="type">char</span> c)</span>&#123;</span><br><span class="line">    <span class="comment">//如果只有一个盘</span></span><br><span class="line">    <span class="keyword">if</span>(num == <span class="number">1</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第1个盘从&quot;</span> + a + <span class="string">&quot;-&gt;&quot;</span> + c);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//分成上面的盘和最下面的盘</span></span><br><span class="line">        hanoiTower(num-<span class="number">1</span>,a,c,b);</span><br><span class="line">        <span class="comment">//把最下面的盘移动到c</span></span><br><span class="line">        System.out.println(<span class="string">&quot;第&quot;</span> + num + <span class="string">&quot;个盘从&quot;</span> + a + <span class="string">&quot;-&gt;&quot;</span> + c);</span><br><span class="line">        <span class="comment">//把b塔的所有盘移动到a</span></span><br><span class="line">        hanoiTower(num-<span class="number">1</span>,b,a,c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><h2 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h2><h2 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h2><h2 id="普利姆算法（Prim）-MST"><a href="#普利姆算法（Prim）-MST" class="headerlink" title="普利姆算法（Prim） MST"></a>普利姆算法（Prim） MST</h2><h2 id="克鲁斯卡尔算法（Kruskal）"><a href="#克鲁斯卡尔算法（Kruskal）" class="headerlink" title="克鲁斯卡尔算法（Kruskal）"></a>克鲁斯卡尔算法（Kruskal）</h2><h2 id="迪杰斯特拉算法（Dijkstra）"><a href="#迪杰斯特拉算法（Dijkstra）" class="headerlink" title="迪杰斯特拉算法（Dijkstra）"></a>迪杰斯特拉算法（Dijkstra）</h2><h2 id="弗洛伊德（Floyd）算法"><a href="#弗洛伊德（Floyd）算法" class="headerlink" title="弗洛伊德（Floyd）算法"></a>弗洛伊德（Floyd）算法</h2><h2 id="骑士周游"><a href="#骑士周游" class="headerlink" title="骑士周游"></a>骑士周游</h2>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逻辑 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatisPlus</title>
      <link href="/2022/10/06/frame/MyBatisPlus/"/>
      <url>/2022/10/06/frame/MyBatisPlus/</url>
      
        <content type="html"><![CDATA[<h1 id="MyBastis-Plus"><a href="#MyBastis-Plus" class="headerlink" title="MyBastis Plus"></a>MyBastis Plus</h1><p>是一个MyBatis的增强工具 只做增强不做改变，为简化开发，提高效率而生</p><p><img src="D:\Data\Typora\资料库\图纸\MyBatis-Plus.png" alt="MyBatis-Plus"></p><h2 id="一、项目搭建-添加依赖"><a href="#一、项目搭建-添加依赖" class="headerlink" title="一、项目搭建-添加依赖"></a>一、项目搭建-添加依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis-plus--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二、sql语句日志显示"><a href="#二、sql语句日志显示" class="headerlink" title="二、sql语句日志显示"></a>二、sql语句日志显示</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><h2 id="三、BaseMapper"><a href="#三、BaseMapper" class="headerlink" title="三、BaseMapper"></a>三、BaseMapper</h2><p>详细见源码</p><h2 id="四、自定义功能"><a href="#四、自定义功能" class="headerlink" title="四、自定义功能"></a>四、自定义功能</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="comment">#默认</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> </span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">    <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">    <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="五、IService"><a href="#五、IService" class="headerlink" title="五、IService"></a>五、IService</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、-TableName"><a href="#六、-TableName" class="headerlink" title="六、@TableName"></a>六、@TableName</h2><p>设置实体对应表名</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置实体类对应数据库表名</span></span><br><span class="line"><span class="meta">@TableName(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="comment">#设置实体类对应表</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="comment">#去除表统一前缀</span></span><br><span class="line">      <span class="attr">table-prefix:</span></span><br></pre></td></tr></table></figure><h2 id="七、-TableId"><a href="#七、-TableId" class="headerlink" title="七、@TableId"></a>七、@TableId</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将属性所对应的字段设置为主键</span></span><br><span class="line"><span class="meta">@TableId(value = &quot;字段名&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Long id;</span><br></pre></td></tr></table></figure><p>value 实体对应数据库对应表主键</p><p>type 表示主键自动生成策略 默认雪花算法</p><blockquote><p>注意设置自动递增需要数据库设置为递增。同时type属性改为IdType.AUTO</p></blockquote><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="comment">#设置全局id生成策略</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br></pre></td></tr></table></figure><h2 id="八、雪花算法"><a href="#八、雪花算法" class="headerlink" title="八、雪花算法"></a>八、雪花算法</h2><h2 id="九、-TableField"><a href="#九、-TableField" class="headerlink" title="九、@TableField"></a>九、@TableField</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//属性对应的字段名</span></span><br><span class="line"><span class="meta">@TableField(&quot;name&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure><h2 id="十、-TableLogic"><a href="#十、-TableLogic" class="headerlink" title="十、@TableLogic"></a>十、@TableLogic</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//逻辑删除 将删除操作改为修改操作</span></span><br><span class="line"><span class="meta">@TableLogic</span></span><br><span class="line"><span class="keyword">private</span> Integer isDeleted;</span><br></pre></td></tr></table></figure><h2 id="十一、Wrapper"><a href="#十一、Wrapper" class="headerlink" title="十一、Wrapper"></a>十一、Wrapper</h2><h2 id="十二、分页插件"><a href="#十二、分页插件" class="headerlink" title="十二、分页插件"></a>十二、分页插件</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.example.demo1.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisPlusConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十三、乐观锁-悲观锁"><a href="#十三、乐观锁-悲观锁" class="headerlink" title="十三、乐观锁 悲观锁"></a>十三、乐观锁 悲观锁</h2><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><blockquote><p>数据库中添加version字段</p><p>取出记录时，获取当前version</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT id,name,price,version FROM product WHERE id=1</span><br></pre></td></tr></table></figure><p>更新时，version + 1, 如果where语句中的version版本不对，则更新失败</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UODATE product SET price=prive+50,version=version+1 WHERE id=1 AND version=1</span><br></pre></td></tr></table></figure></blockquote><h3 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h3><p>只能等前一个操作结束才可以操作</p><h2 id="十四、枚举"><a href="#十四、枚举" class="headerlink" title="十四、枚举"></a>十四、枚举</h2><h2 id="十五、代码生成器"><a href="#十五、代码生成器" class="headerlink" title="十五、代码生成器"></a>十五、代码生成器</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis-plus 代码自动生成--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.31<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FastAutoGenerator.create(<span class="string">&quot;url&quot;</span>, <span class="string">&quot;username&quot;</span>, <span class="string">&quot;password&quot;</span>)</span><br><span class="line">.globalConfig(builder -&gt; &#123;</span><br><span class="line">builder.author(<span class="string">&quot;baomidou&quot;</span>) <span class="comment">// 设置作者</span></span><br><span class="line">            .enableSwagger() <span class="comment">// 开启 swagger 模式</span></span><br><span class="line">.fileOverride() <span class="comment">// 覆盖已生成文件</span></span><br><span class="line">.outputDir(<span class="string">&quot;D://&quot;</span>); <span class="comment">// 指定输出目录</span></span><br><span class="line">&#125;)</span><br><span class="line">.packageConfig(builder -&gt; &#123;</span><br><span class="line">builder.parent(<span class="string">&quot;com.baomidou.mybatisplus.samples.generator&quot;</span>) <span class="comment">// 设置父包名</span></span><br><span class="line">.moduleName(<span class="string">&quot;system&quot;</span>) <span class="comment">// 设置父包模块名</span></span><br><span class="line">            .pathInfo(Collections.singletonMap(OutputFile.mapperXml, <span class="string">&quot;D://&quot;</span>)); <span class="comment">// 设置mapperXml生成路径</span></span><br><span class="line">&#125;)</span><br><span class="line">.strategyConfig(builder -&gt; &#123;</span><br><span class="line">builder.addInclude(<span class="string">&quot;t_simple&quot;</span>) <span class="comment">// 设置需要生成的表名</span></span><br><span class="line">.addTablePrefix(<span class="string">&quot;t_&quot;</span>, <span class="string">&quot;c_&quot;</span>); <span class="comment">// 设置过滤表前缀</span></span><br><span class="line">&#125;)</span><br><span class="line">.templateEngine(<span class="keyword">new</span> <span class="title class_">FreemarkerTemplateEngine</span>()) <span class="comment">// 使用Freemarker引擎模板，默认的是Velocity引擎模板</span></span><br><span class="line">.execute();</span><br></pre></td></tr></table></figure><h2 id="十六、MyBatis-X"><a href="#十六、MyBatis-X" class="headerlink" title="十六、MyBatis X"></a>十六、MyBatis X</h2>]]></content>
      
      
      <categories>
          
          <category> 框架功能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据持久 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot 1.0</title>
      <link href="/2022/10/06/frame/SpringBoot-1.0/"/>
      <url>/2022/10/06/frame/SpringBoot-1.0/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><hr><p>​SpringBoot并不是新东西，如同Spring的升级版！</p><p>​新一代JAVAEE的开发标准，开箱即用 ——&gt;拿来就可以用</p><p>​<strong>自动配置</strong> 直接使用</p><p>​特性：**<u>约定大于配置</u>**</p><p>​问题：随着公司规模的扩大，用户越来越多，SpringBoot无法满足需求</p><hr><p>[TOC]</p><hr><h4 id="一、Spring-Boot简介"><a href="#一、Spring-Boot简介" class="headerlink" title="一、Spring Boot简介"></a>一、Spring Boot简介</h4><p>​使用Spring Boot很容易创建一个独立运行（运行jar，内置Servlet容器，Tomcat、jetty）使用SpringBoot框架，你可以不用或者只需要很少的配置文件。</p><h4 id="二、Spring-Boot环境搭建"><a href="#二、Spring-Boot环境搭建" class="headerlink" title="二、Spring Boot环境搭建"></a>二、Spring Boot环境搭建</h4><ol><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--提供Web开发场景所需的底层所有依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--单元测试类依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加插件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--将Spring Boot应用打包为可执行的jar或war文件，然后以通常的方式运行Spring Boot应用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>resources目录下配置<strong>application</strong>.yml文件(或properties文件,注意文件名)</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#更改项目的端口号</span></span><br><span class="line"><span class="string">server.port=8081</span></span><br><span class="line"><span class="comment">#默认图标</span></span><br><span class="line"><span class="string">spring.mvc.favicon.enabled=false</span></span><br><span class="line"><span class="comment">#我们的配置文件的真实位置</span></span><br><span class="line"><span class="string">spring.messages.basename=i18n.login</span></span><br><span class="line"><span class="comment">#时间日期格式化</span></span><br><span class="line"><span class="string">spring.mvc.date-format=yyyy-MM-dd</span></span><br><span class="line"><span class="comment">#关闭缓存引擎</span></span><br><span class="line"><span class="string">spring.thymeleaf.cache=false</span></span><br></pre></td></tr></table></figure></li><li><p>resources目录下添加资源</p><ol><li><p><strong>static</strong>（静态资源目录）：css&#x2F;js&#x2F;img</p></li><li><p><strong>mabatis</strong>（mapper:sql映射语句）：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">    <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//En&quot;</span></span></span><br><span class="line"><span class="meta">    <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.xdj.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>templates</strong>（HTML页面）：commons(放置一些重复代码)&#x2F;error</p></li><li><p><strong>i18n</strong>（显示语言）：Resource Bundle ‘login’（.properties(默认)&#x2F;en_US.properties(英文)&#x2F;zh_CN.properties(中文)）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//国际化</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLocaleResolver</span> <span class="keyword">implements</span> <span class="title class_">LocaleResolver</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析请求</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Locale <span class="title function_">resolveLocale</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">language</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;l&quot;</span>);<span class="comment">//获取请求中的语言参数</span></span><br><span class="line">        <span class="type">Locale</span> <span class="variable">locale</span> <span class="operator">=</span> Locale.getDefault();<span class="comment">//如果没有使用默认的</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果请求参数不为空，携带了国际化的参数</span></span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isEmpty(language))&#123;</span><br><span class="line">            <span class="comment">//zh_CN</span></span><br><span class="line">            String[] split = language.split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">            <span class="comment">//国家，地区</span></span><br><span class="line">            locale = <span class="keyword">new</span> <span class="title class_">Locale</span>(split[<span class="number">0</span>],split[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> locale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLocale</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Locale locale)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>建包 pojo(vo)、dao、service、controller、config</p></li><li><p>彩蛋</p><ul><li><a href="https://www.bootschool.net/ascii">spring boot banner在线生成</a></li></ul></li></ol><h4 id="三、自动装配原理及注解"><a href="#三、自动装配原理及注解" class="headerlink" title="三、自动装配原理及注解"></a>三、自动装配原理及注解</h4><p>SpringBoot所有自动配置都是在启动时扫描并加载</p><ol><li><strong>@SpringBootApplication</strong>：Sprnig Boot项目的核心注解，目的是开启自动配置</li><li>@Repository、@Service、@Controller 和 @Component 将类标识为Bean</li><li>@Autowired：自动装配实体类属性</li><li>@Configuration ：定义配置类，可替换xml配置文件，被注解的类内部包含有一个或多个被@Bean注解的方法,相当于Beans<ol><li>@SpringBootConfiguration：标记当前类为配置类</li><li>@EnableAutoConfiguration：开启自动配置</li></ol></li><li>@ComponentScan：扫描主类所在的同级包以及下级包里的Bean</li><li>@Mapper：这个注解表示了这是一个mybatis的mapper类</li><li>&#x2F;&#x2F;给实体类增加文档注释@Api (注释)<ol><li>@ApiModel(“用户实体类”)</li><li>@ApiModelProperty(“属性”)</li><li>@ApiOperation(value &#x3D; “hello控制”,notes &#x3D; “这是有趣的说明书”)接口相关注释</li><li>@ApiParam(“参数”)</li></ol></li><li>@Accessors(chain &#x3D; true)&#x2F;&#x2F;链式写法 chain&#x3D;true表示支持链式写法</li></ol><h4 id="四、thymeleaf"><a href="#四、thymeleaf" class="headerlink" title="四、thymeleaf"></a>四、thymeleaf</h4><p>​Thymeleaf是一个现代服务器端Java模板引擎，适用于Web和独立环境，能够处理HTML，XML，JavaScript，CSS甚至纯文本。<br>​Thymeleaf的主要目标是提供一种优雅且高度可维护的模板创建方式。为实现这一目标，它以自然模板的概念为基础，将其逻辑注入模板文件，其方式不会影响模板被用作设计原型。</p><ol><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Thymeleaf,我们都是基于3.x开发--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-java8time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加使用</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">xmlns:th=&quot;http://www.thymeleaf.org&quot;</span><br></pre></td></tr></table></figure></li><li><p>语法规则</p><p>th:text；改变当前元素里面的文本内容</p><p>th：任意html属性；来替换原生属性的值</p><p>th:include：加载模板的内容： 读取加载节点的内容（不含节点名称），替换div内容</p><p>th:replace：替换当前标签为模板中的标签，加载的节点会整个替换掉加载他的div</p><p>th:attr 来设置任意属性</p><p>th:attrprepend 来追加(不是替换)属性值</p><p>th:classappend</p><p>th:each每次遍历都会生成当前这个标签</p><p>th:href&#x3D;”@{…}” 替换url</p><p>th:text&#x3D;”${…}”　　　　 转译特殊字符，特殊符号原方不动输出</p><p>th:utext&#x3D;”${…}　　　　会转译字符,特殊符号被转译后输出结果</p><p>行内写法</p><p>[[ ]]等价于th:text  　 </p><p>[( )]等价于th:utext　</p><p><strong>表达式语法</strong></p><p>选择变量表达式: *{…}</p><p>消息表达式: #{…}</p><p>URL 表达式: @{…}</p><p>代码段表达式: ~{…}</p></li></ol><h4 id="五、数据库配置-举例druid"><a href="#五、数据库配置-举例druid" class="headerlink" title="五、数据库配置(举例druid)"></a>五、数据库配置(举例druid)</h4><ol><li><p>添加依赖(因为使用druid数据库连接池)</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Druid--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--自启动Druid管理后台--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--log4j日志--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--jdbc--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>yml配置文件文件</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">newpassword</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/bookstore?useUnicod=true&amp;characterEncoding=utf-8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="comment">#spring Boot默认不注入这些属性的，需要自己配置</span></span><br><span class="line">    <span class="comment">#druid 数据源专有配置</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">initial-size:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">20</span></span><br><span class="line">      <span class="attr">max-wait:</span> <span class="number">60000</span></span><br><span class="line">      <span class="attr">time-between-eviction-runs-millis:</span> <span class="number">60000</span></span><br><span class="line">      <span class="attr">min-evictable-idle-time-millis:</span> <span class="number">30000</span></span><br><span class="line">      <span class="attr">validation-query:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">      <span class="attr">test-while-idle:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">test-on-borrow:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">test-on-return:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">pool-prepared-statements:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">#配置监控统计拦截的filters、stat：监控统计、log4j:日志记录、wall:防御sql注入</span></span><br><span class="line">      <span class="comment">#如果允许时报错 java.lang.ClassNotFoundException: org.apache.log4j.Priority</span></span><br><span class="line">      <span class="comment">#则导入log4j 依赖即可，Maven地址：https://menrepository.com/artifact/log4j/log4j</span></span><br><span class="line">      <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">      <span class="attr">max-pool-prepared-statement-per-connection-size:</span> <span class="number">20</span></span><br><span class="line">      <span class="attr">use-global-data-source-stat:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">connect-properties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br></pre></td></tr></table></figure></li><li><p>配置类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DruidConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">druidDataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//后台监控 :web.xml,ServletRegistrationBean</span></span><br><span class="line">    <span class="comment">//因为SpringBoot 内置了servlet 容器，所以没有web.xml,替代方法:ServletRegistrationBean</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServletRegistrationBean <span class="title function_">statViewServlet</span><span class="params">()</span>&#123;</span><br><span class="line">        ServletRegistrationBean&lt;StatViewServlet&gt; bean = <span class="keyword">new</span> <span class="title class_">ServletRegistrationBean</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">StatViewServlet</span>(),<span class="string">&quot;/druid/*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//后台需要有人登录，账号密码配置</span></span><br><span class="line">        HashMap&lt;String,String&gt; initParaments = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//增加配置</span></span><br><span class="line">        initParaments.put(<span class="string">&quot;loginUsername&quot;</span>,<span class="string">&quot;admin&quot;</span>);<span class="comment">//设置key是固定的 loginUsername loginPassword</span></span><br><span class="line">        initParaments.put(<span class="string">&quot;loginPassword&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//允许谁可以访问</span></span><br><span class="line">        initParaments.put(<span class="string">&quot;allow&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//禁止谁能访问  initParaments.put(&quot;名字&quot;,&quot;ip地址&quot;)</span></span><br><span class="line"></span><br><span class="line">        bean.setInitParameters(initParaments);<span class="comment">//设置初始化参数</span></span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//filter 过滤器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FilterRegistrationBean <span class="title function_">webStatFilter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">FilterRegistrationBean</span> <span class="variable">bean</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>();</span><br><span class="line">        bean.setFilter(<span class="keyword">new</span> <span class="title class_">WebStatFilter</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这些东西不进行统计</span></span><br><span class="line">        Map&lt;String,String&gt; initParameters = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        initParameters.put(<span class="string">&quot;exclusions&quot;</span>,<span class="string">&quot;*.js,*.css,/druid/*&quot;</span>);</span><br><span class="line">        <span class="comment">//可以过滤哪些请求？</span></span><br><span class="line">        bean.setInitParameters(initParameters);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="六、Spring-Security"><a href="#六、Spring-Security" class="headerlink" title="六、Spring Security"></a>六、Spring Security</h4><p>​Spring Security是一个功能强大且高度可定制的身份验证和访问控制框架。提供了完善的<strong>认证机制</strong>和方法级的<strong>授权功能</strong>。</p><ol><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--security 安全--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Thymeleaf springboot整合包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-springsecurity4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Thymeleaf--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-java8time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>HTML中使用</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">xmlns:sec=&quot;http://www.thymeleaf.org/thymeleaf-extras-springsecurity4&quot;</span><br><span class="line"><span class="comment">&lt;!--如果未登录--&gt;</span></span><br><span class="line">sec:authorize=&quot;!isAuthenticated()&quot;</span><br></pre></td></tr></table></figure></li><li><p>配置类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//AOP：拦截器</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//链式编程  授权</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//首页默认所有人可以访问，功能页只有对应有权限的人才能访问</span></span><br><span class="line">        <span class="comment">//请求授权的规则</span></span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/level1/**&quot;</span>).hasRole(<span class="string">&quot;vip1&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/level2/**&quot;</span>).hasRole(<span class="string">&quot;vip2&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/level3/**&quot;</span>).hasRole(<span class="string">&quot;vip3&quot;</span>);</span><br><span class="line">        <span class="comment">//没有权限默认跳转到登录页面,该行代码开启登陆的页面</span></span><br><span class="line">        http.formLogin().loginPage(<span class="string">&quot;/toLogin&quot;</span>);</span><br><span class="line">        <span class="comment">//注销，开启了注销功能</span></span><br><span class="line">        http.logout().logoutSuccessUrl(<span class="string">&quot;/&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//防止网站攻击: get,post</span></span><br><span class="line">        http.csrf().disable();<span class="comment">//关闭csrf功能</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启记住我功能,默认保存两周</span></span><br><span class="line">        http.rememberMe();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//认证,springboot 2.1.x可以直接使用</span></span><br><span class="line">    <span class="comment">//密码编码：PasswordEncoder</span></span><br><span class="line">    <span class="comment">//在spring Secutiry 5.0+ 新增了很多加密方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//这些数据正常在数据库中读取</span></span><br><span class="line">        auth.inMemoryAuthentication().passwordEncoder(<span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>())</span><br><span class="line">                .withUser(<span class="string">&quot;xdj&quot;</span>).password(<span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>().encode(<span class="string">&quot;123456&quot;</span>)).roles(<span class="string">&quot;vip1&quot;</span>,<span class="string">&quot;vip3&quot;</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .withUser(<span class="string">&quot;root&quot;</span>).password(<span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>().encode(<span class="string">&quot;123456&quot;</span>)).roles(<span class="string">&quot;vip1&quot;</span>,<span class="string">&quot;vip2&quot;</span>,<span class="string">&quot;vip3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="七、Apache-Shiro"><a href="#七、Apache-Shiro" class="headerlink" title="七、Apache Shiro"></a>七、Apache Shiro</h4><p>​Apache Shiro是一个强大且易用的Java安全框架,执行身份验证、授权、密码和会话管理。使用Shiro的易于理解的API,您可以快速、轻松地获得任何应用程序,从最小的移动应用程序到最大的网络和企业应用程序。</p><ol><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        Subject 用户</span></span><br><span class="line"><span class="comment">        SecurityManager 管理所有用户</span></span><br><span class="line"><span class="comment">        Realm 连接数据</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--shiro-thymeleaf--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.theborakompanioni<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-shiro<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--shiro整合spring的包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置shiro</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">//3.ShiroFilterFactoryBean</span></span><br><span class="line">    <span class="keyword">public</span> ShiroFilterFactoryBean <span class="title function_">getShiroFilterFactoryBean</span><span class="params">(<span class="meta">@Qualifier(&quot;securityManager&quot;)</span>DefaultWebSecurityManager securityManager)</span>&#123;</span><br><span class="line">        <span class="type">ShiroFilterFactoryBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">        <span class="comment">//设置安全管理器</span></span><br><span class="line">        bean.setSecurityManager(securityManager);</span><br><span class="line">        <span class="comment">//添加shiro的内置过滤器</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            anon:无需认证就可以访问</span></span><br><span class="line"><span class="comment">            authc:必须认证了才能访问</span></span><br><span class="line"><span class="comment">            user:必须拥有 记住我 功能才能用</span></span><br><span class="line"><span class="comment">            perms:拥有对某个资源的权限才能访问</span></span><br><span class="line"><span class="comment">            role:拥有某个角色权限才能访问</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//拦截</span></span><br><span class="line">        Map&lt;String,String&gt; filterMap = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//授权</span></span><br><span class="line">        filterMap.put(<span class="string">&quot;/user/add&quot;</span>,<span class="string">&quot;perms[user:add]&quot;</span>);</span><br><span class="line">        filterMap.put(<span class="string">&quot;/user/update&quot;</span>,<span class="string">&quot;perms[user:update]&quot;</span>);</span><br><span class="line"></span><br><span class="line">        filterMap.put(<span class="string">&quot;/user/*&quot;</span>,<span class="string">&quot;authc&quot;</span>);</span><br><span class="line">        bean.setFilterChainDefinitionMap(filterMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置登录的请求</span></span><br><span class="line">        bean.setLoginUrl(<span class="string">&quot;/toLogin&quot;</span>);</span><br><span class="line">        <span class="comment">//设置未授权的请求</span></span><br><span class="line">        bean.setUnauthorizedUrl(<span class="string">&quot;/noAuth&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.DefaultWebSecurityManager</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;securityManager&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DefaultWebSecurityManager <span class="title function_">getDefaultWebSecurityManager</span><span class="params">(<span class="meta">@Qualifier(&quot;userRealm&quot;)</span> UserRealm userRealm)</span>&#123;</span><br><span class="line">        <span class="type">DefaultWebSecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">        <span class="comment">//关联UserRealm</span></span><br><span class="line">        securityManager.setRealm(userRealm);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.创建realm对象,需要自定义</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> UserRealm <span class="title function_">userRealm</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserRealm</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//整合ShiroDialect:用来整合shiro和thymeleaf</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ShiroDialect <span class="title function_">getShiroDialect</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ShiroDialect</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>授权认证</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRealm</span> <span class="keyword">extends</span> <span class="title class_">AuthorizingRealm</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//授权</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了==&gt;授权doGetAuthorizationInfo&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">SimpleAuthorizationInfo</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthorizationInfo</span>();</span><br><span class="line">        <span class="comment">//拿到当前登录的对象</span></span><br><span class="line">        <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) subject.getPrincipal();<span class="comment">//拿到User对象</span></span><br><span class="line">        <span class="comment">//设置当前用户的权限</span></span><br><span class="line">        info.addStringPermission(user.getPerms());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//认证</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了==&gt;认证doGetAuthenticationInfo&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">UsernamePasswordToken</span> <span class="variable">token</span> <span class="operator">=</span> (UsernamePasswordToken) authenticationToken;</span><br><span class="line">        <span class="comment">//连接真实数据库</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.queryUserByName(token.getUsername());</span><br><span class="line">        <span class="keyword">if</span>(user==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;<span class="comment">//抛出异常 UnknownAccountException 用户名错误</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//密码认证，shiro做</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(user,user.getPassword(),<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="八、Swagger"><a href="#八、Swagger" class="headerlink" title="八、Swagger"></a>八、Swagger</h4><p>​Swagger 是一个规范且完整的框架()，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。</p><p>​Swagger 的目标是对 REST API 定义一个标准且和语言无关的接口，可以让人和计算机拥有无须访问源码、文档或网络流量监测就可以发现和理解服务的能力。当通过 Swagger 进行正确定义，用户可以理解远程服务并使用最少实现逻辑与远程服务进行交互。与为底层编程所实现的接口类似，Swagger 消除了调用服务时可能会有的猜测。</p><ol><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Swagger配置类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//开启Swagger2</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span> &#123;</span><br><span class="line">    <span class="comment">//配置了Swagger的Docket的bean实例</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">docket1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">docket2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">docket3</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">//配置项目运行环境</span></span><br><span class="line">    <span class="meta">@Profile(&quot;pro&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">docket</span><span class="params">(Environment environment)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                <span class="comment">//配置分组类名，分割与他人的接口</span></span><br><span class="line">                .groupName(<span class="string">&quot;小夏&quot;</span>)</span><br><span class="line">                <span class="comment">//enable 是否启动Swagger,如果启动为true,关闭为false,则swagger不能在浏览器中被访问</span></span><br><span class="line">                .enable(<span class="literal">true</span>)</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                    RequestHandlerSelectors,配置要扫描接口的方法</span></span><br><span class="line"><span class="comment">                    basePackage():指定要扫描的包</span></span><br><span class="line"><span class="comment">                    any():扫描全部</span></span><br><span class="line"><span class="comment">                    none():不扫描</span></span><br><span class="line"><span class="comment">                    withClassAnnotation:扫描类上的注解，参数是一个注解的反射对象</span></span><br><span class="line"><span class="comment">                    withMethodAnnotation:扫描方法上的注解</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.xdj.swagger.controller&quot;</span>))</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                    paths 选择路径下的接口</span></span><br><span class="line"><span class="comment">                    PathSelectors.any() 返回满足条件的</span></span><br><span class="line"><span class="comment">                    PathSelectors.none() 返回不满足条件的</span></span><br><span class="line"><span class="comment">                    PathSelectors.ant(&quot;/xdj/**&quot;) 过滤掉指定路径下的</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line"><span class="comment">//                .paths(PathSelectors.ant(&quot;/xdj/**&quot;))</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置swagger信息=apiInfo</span></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Contact</span> <span class="variable">contact</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Contact</span>(<span class="string">&quot;小夏&quot;</span>,<span class="string">&quot;http://localhost:8080/hello&quot;</span>,<span class="string">&quot;1226954639@qq.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfo</span>(</span><br><span class="line">                <span class="string">&quot;小夏的日志&quot;</span>,                                <span class="comment">//标题</span></span><br><span class="line">                <span class="string">&quot;落花流水意&quot;</span>,                          <span class="comment">//介绍</span></span><br><span class="line">                <span class="string">&quot;v1.0&quot;</span>,                                 <span class="comment">//版本</span></span><br><span class="line">                <span class="string">&quot;http://localhost:8080/hello&quot;</span>,  <span class="comment">//服务条款网址</span></span><br><span class="line">                contact,                                       <span class="comment">//作者信息</span></span><br><span class="line">                <span class="string">&quot;Apache 2.0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>环境切换：测试环境和项目发布环境，可以减少项目发布后的加载</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">##application.properties:选择环境</span></span><br><span class="line"><span class="attr">spring.profiles.active</span>=<span class="string">pro</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#application-pro.properties</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8081</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#application-dev.properties</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8080</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="九、异步Async"><a href="#九、异步Async" class="headerlink" title="九、异步Async"></a>九、异步Async</h4><ol start="2"><li><p>Controller</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AsyncService asyncService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        asyncService.hello();<span class="comment">//停止三秒</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>service</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Async</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;数据正在处理......&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在一个特定的时间执行这个方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//cron 表达式</span></span><br><span class="line">    <span class="comment">//cron= 秒 分 时 日 月 周</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0 18 14 * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello,你被执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="十、邮件的发送"><a href="#十、邮件的发送" class="headerlink" title="十、邮件的发送"></a>十、邮件的发送</h4><ol><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--java.mail邮箱：配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置文件application.properties</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.mail.username</span>=<span class="string">1226954639@qq.com</span></span><br><span class="line"><span class="attr">spring.mail.password</span>=<span class="string">tehxmucwwgmvibaa</span></span><br><span class="line"><span class="attr">spring.mail.host</span>=<span class="string">smtp.qq.com</span></span><br><span class="line"><span class="comment">#&lt;tehxmucwwgmvibaa&gt;qq邮箱授权密码</span></span><br><span class="line"><span class="comment">#开启加密验证</span></span><br><span class="line"><span class="attr">spring.mail.properties.mail.smtp.ssl.enable</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure></li><li><p>几种邮件发送的测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Springboot10TestApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JavaMailSenderImpl mailSender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一个简单的邮件</span></span><br><span class="line">        <span class="type">SimpleMailMessage</span> <span class="variable">simpleMailMessage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleMailMessage</span>();</span><br><span class="line">        simpleMailMessage.setSubject(<span class="string">&quot;通知:你被捕了&quot;</span>);</span><br><span class="line">        simpleMailMessage.setText(<span class="string">&quot;通缉令10086-20210721号&quot;</span>);</span><br><span class="line">        simpleMailMessage.setFrom(<span class="string">&quot;1226954639@qq.com&quot;</span>);</span><br><span class="line">        simpleMailMessage.setTo(<span class="string">&quot;1226954639@qq.com&quot;</span>);</span><br><span class="line"><span class="comment">//        simpleMailMessage.setTo(&quot;1289536775@qq.com&quot;);</span></span><br><span class="line">        mailSender.send(simpleMailMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads_2</span><span class="params">()</span> <span class="keyword">throws</span> MessagingException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一个复杂的邮件</span></span><br><span class="line">        <span class="type">MimeMessage</span> <span class="variable">mimeMessage</span> <span class="operator">=</span> mailSender.createMimeMessage();</span><br><span class="line">        <span class="comment">//组装</span></span><br><span class="line">        <span class="type">MimeMessageHelper</span> <span class="variable">helper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeMessageHelper</span>(mimeMessage,<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//标题</span></span><br><span class="line">        helper.setSubject(<span class="string">&quot;你好啊！交个朋友吧&quot;</span>);</span><br><span class="line">        <span class="comment">//内容，true开启HTML</span></span><br><span class="line">        helper.setText(</span><br><span class="line">                <span class="string">&quot;&lt;p&gt;&lt;h1 style=&#x27;color:red&#x27;&gt;击壤歌&lt;/h1&gt;佚名 〔先秦〕&lt;/p&gt;&quot;</span></span><br><span class="line">                +<span class="string">&quot;&lt;p&gt;日出而作，日入而息。&lt;/p&gt;&quot;</span></span><br><span class="line">                +<span class="string">&quot;&lt;p&gt;凿井而饮，耕田而食。&lt;/p&gt;&quot;</span></span><br><span class="line">                +<span class="string">&quot;&lt;p&gt;帝力于我何有哉！&lt;/p&gt;&quot;</span></span><br><span class="line">                ,<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//附件</span></span><br><span class="line">        helper.addAttachment(<span class="string">&quot;1.jpg&quot;</span>,<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\lenovo\\Desktop\\1.jpg&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送来源</span></span><br><span class="line">        helper.setFrom(<span class="string">&quot;1226954639@qq.com&quot;</span>);</span><br><span class="line">        <span class="comment">//发送对象</span></span><br><span class="line">        helper.setTo(<span class="string">&quot;1289536775@qq.com&quot;</span>);</span><br><span class="line">        mailSender.send(mimeMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span> html</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span> subject</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span> text</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> MessagingException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span> author</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//邮箱模板</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMail</span><span class="params">(Boolean html,String subject,String text)</span> <span class="keyword">throws</span> MessagingException&#123;</span><br><span class="line">        <span class="comment">//一个复杂的邮件</span></span><br><span class="line">        <span class="type">MimeMessage</span> <span class="variable">mimeMessage</span> <span class="operator">=</span> mailSender.createMimeMessage();</span><br><span class="line">        <span class="comment">//组装</span></span><br><span class="line">        <span class="type">MimeMessageHelper</span> <span class="variable">helper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeMessageHelper</span>(mimeMessage,html);</span><br><span class="line">        <span class="comment">//正文:标题</span></span><br><span class="line">        helper.setSubject(<span class="string">&quot;title&quot;</span>);</span><br><span class="line">        <span class="comment">//正文:内容，true开启HTML</span></span><br><span class="line">        helper.setText(<span class="string">&quot;text&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//附件</span></span><br><span class="line">        helper.addAttachment(<span class="string">&quot;fileName&quot;</span>,<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;filePath&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送来源</span></span><br><span class="line">        helper.setFrom(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">        <span class="comment">//发送对象</span></span><br><span class="line">        helper.setTo(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">        mailSender.send(mimeMessage);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 框架功能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot 2.0</title>
      <link href="/2022/10/06/frame/SpringBoot-2.0/"/>
      <url>/2022/10/06/frame/SpringBoot-2.0/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot-self"><a href="#SpringBoot-self" class="headerlink" title="SpringBoot-self"></a>SpringBoot-self</h1><p>[TOC]</p><h2 id="一、POM依赖"><a href="#一、POM依赖" class="headerlink" title="一、POM依赖"></a>一、POM依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二、Config"><a href="#二、Config" class="headerlink" title="二、Config"></a>二、Config</h2><p>组件配置</p><p>环境切换</p><h2 id="三、数据库操作"><a href="#三、数据库操作" class="headerlink" title="三、数据库操作"></a>三、数据库操作</h2><h3 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h3><p>映射文件</p><p>注解配置</p><p>druid监测</p><h3 id="JdbcTemplate"><a href="#JdbcTemplate" class="headerlink" title="JdbcTemplate"></a>JdbcTemplate</h3><h3 id="Druid"><a href="#Druid" class="headerlink" title="Druid"></a>Druid</h3><p>数据源驱动，数据池</p><h2 id="四、thymeleaf"><a href="#四、thymeleaf" class="headerlink" title="四、thymeleaf"></a>四、thymeleaf</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>默认的静态资源目录src&#x2F;main&#x2F;resources&#x2F;static</p><p>默认html页面地址为src&#x2F;main&#x2F;resources&#x2F;templates</p><p><strong>默认配置</strong>一般开发中将<code>spring.thymeleaf.cache</code>设置为false，其他保持默认值即可。</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开启模板缓存（默认值：true）</span></span><br><span class="line"><span class="attr">spring.thymeleaf.cache</span>=<span class="string">true </span></span><br><span class="line"><span class="comment">#Check that the template exists before rendering it.</span></span><br><span class="line"><span class="attr">spring.thymeleaf.check-template</span>=<span class="string">true </span></span><br><span class="line"><span class="comment">#检查模板位置是否正确（默认值:true）</span></span><br><span class="line"><span class="attr">spring.thymeleaf.check-template-location</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#Content-Type的值（默认值：text/html）</span></span><br><span class="line"><span class="attr">spring.thymeleaf.content-type</span>=<span class="string">text/html</span></span><br><span class="line"><span class="comment">#开启MVC Thymeleaf视图解析（默认值：true）</span></span><br><span class="line"><span class="attr">spring.thymeleaf.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#模板编码</span></span><br><span class="line"><span class="attr">spring.thymeleaf.encoding</span>=<span class="string">UTF-8</span></span><br><span class="line"><span class="comment">#要被排除在解析之外的视图名称列表，用逗号分隔</span></span><br><span class="line"><span class="attr">spring.thymeleaf.excluded-view-names</span>=<span class="string"></span></span><br><span class="line"><span class="comment">#要运用于模板之上的模板模式。另见StandardTemplate-ModeHandlers(默认值：HTML5)</span></span><br><span class="line"><span class="attr">spring.thymeleaf.mode</span>=<span class="string">HTML5</span></span><br><span class="line"><span class="comment">#在构建URL时添加到视图名称前的前缀（默认值：classpath:/templates/）</span></span><br><span class="line"><span class="attr">spring.thymeleaf.prefix</span>=<span class="string">classpath:/templates/</span></span><br><span class="line"><span class="comment">#在构建URL时添加到视图名称后的后缀（默认值：.html）</span></span><br><span class="line"><span class="attr">spring.thymeleaf.suffix</span>=<span class="string">.html</span></span><br><span class="line"><span class="comment">#Thymeleaf模板解析器在解析器链中的顺序。默认情况下，它排第一位。顺序从1开始，只有在定义了额外的TemplateResolver Bean时才需要设置这个属性。</span></span><br><span class="line"><span class="attr">spring.thymeleaf.template-resolver-order</span>=<span class="string"></span></span><br><span class="line"><span class="comment">#可解析的视图名称列表，用逗号分隔</span></span><br><span class="line"><span class="attr">spring.thymeleaf.view-names</span>=<span class="string"></span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">xmlns:th=&quot;http://www.thymeleaf.org&quot;</span><br></pre></td></tr></table></figure><h2 id="五、缓存"><a href="#五、缓存" class="headerlink" title="五、缓存"></a>五、缓存</h2><p>用以减少节省数据库的开销</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加缓存依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//开启缓存注解</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在service层接口出添加缓存注解</span></span><br><span class="line"><span class="meta">@CacheConfig(cacheNames = &quot;student&quot;)</span></span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;@CacheConfig&#x3D;&#x3D;：主要用于配置该类中会用到的一些共用的缓存配置。在这里@CacheConfig(cacheNames &#x3D; “student”)：配置了该数据访问对象中返回的内容将存储于名为student的缓存对象中，我们也可以不使用该注解，直接通过@Cacheable自己配置缓存集的名字来定义；</p><p>&#x3D;&#x3D;@Cacheable&#x3D;&#x3D;：配置了queryStudentBySno函数的返回值将被加入缓存。同时在查询时，会先从缓存中获取，若不存在才再发起对数据库的访问。该注解主要有下面几个参数：</p><p>value、cacheNames：两个等同的参数（cacheNames为Spring 4新增，作为value的别名），用于指定缓存存储的集合名。由于Spring 4中新增了@CacheConfig，因此在Spring 3中原本必须有的value属性，也成为非必需项了；</p><p>key：缓存对象存储在Map集合中的key值，非必需，缺省按照函数的所有参数组合作为key值，若自己配置需使用SpEL表达式，比如：@Cacheable(key &#x3D; “#p0”)：使用函数第一个参数作为缓存的key值，更多关于SpEL表达式的详细内容可参考<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/integration.html#cache%EF%BC%9B">https://docs.spring.io/spring/docs/current/spring-framework-reference/integration.html#cache；</a></p><p>condition：缓存对象的条件，非必需，也需使用SpEL表达式，只有满足表达式条件的内容才会被缓存，比如：@Cacheable(key &#x3D; “#p0”, condition &#x3D; “#p0.length() &lt; 3”)，表示只有当第一个参数的长度小于3的时候才会被缓存；</p><p>unless：另外一个缓存条件参数，非必需，需使用SpEL表达式。它不同于condition参数的地方在于它的判断时机，该条件是在函数被调用之后才做判断的，所以它可以通过对result进行判断；</p><p>keyGenerator：用于指定key生成器，非必需。若需要指定一个自定义的key生成器，我们需要去实现org.springframework.cache.interceptor.KeyGenerator接口，并使用该参数来指定；</p><p>cacheManager：用于指定使用哪个缓存管理器，非必需。只有当有多个时才需要使用；</p><p>cacheResolver：用于指定使用那个缓存解析器，非必需。需通过org.springframework.cache.interceptor.CacheResolver接口来实现自己的缓存解析器，并用该参数指定；</p><p>&#x3D;&#x3D;@CachePut&#x3D;&#x3D;：配置于函数上，能够根据参数定义条件来进行缓存，其缓存的是方法的返回值，它与@Cacheable不同的是，它每次都会真实调用函数，所以主要用于数据新增和修改操作上。它的参数与@Cacheable类似，具体功能可参考上面对@Cacheable参数的解析；</p><p>&#x3D;&#x3D;@CacheEvict&#x3D;&#x3D;：配置于函数上，通常用在删除方法上，用来从缓存中移除相应数据。除了同@Cacheable一样的参数之外，它还有下面两个参数：</p><p>allEntries：非必需，默认为false。当为true时，会移除所有数据；</p><p>beforeInvocation：非必需，默认为false，会在调用方法之后移除数据。当为true时，会在调用方法之前移除数据。</p><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring-boot redis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#application.yml</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="comment"># Redis数据库索引（默认为0）</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">    <span class="comment"># Redis服务器地址</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="comment"># Redis服务器连接端口</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">pool:</span></span><br><span class="line">      <span class="comment"># 连接池最大连接数（使用负值表示没有限制）</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">8</span></span><br><span class="line">      <span class="comment"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span></span><br><span class="line">      <span class="attr">max-wait:</span> <span class="number">-1</span></span><br><span class="line">      <span class="comment"># 连接池中的最大空闲连接</span></span><br><span class="line">      <span class="attr">max-idle:</span> <span class="number">8</span></span><br><span class="line">      <span class="comment"># 连接池中的最小空闲连接</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">0</span></span><br><span class="line">    <span class="comment"># 连接超时时间（毫秒）</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> <span class="keyword">extends</span> <span class="title class_">CachingConfigurerSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义缓存key生成策略</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> KeyGenerator <span class="title function_">keyGenerator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">KeyGenerator</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">generate</span><span class="params">(Object target, java.lang.reflect.Method method, Object... params)</span> &#123;</span><br><span class="line">                <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">                sb.append(target.getClass().getName());</span><br><span class="line">                sb.append(method.getName());</span><br><span class="line">                <span class="keyword">for</span> (Object obj : params) &#123;</span><br><span class="line">                    sb.append(obj.toString());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> sb.toString();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 缓存管理器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CacheManager <span class="title function_">cacheManager</span><span class="params">(<span class="meta">@SuppressWarnings(&quot;rawtypes&quot;)</span> RedisTemplate redisTemplate)</span> &#123;</span><br><span class="line">        <span class="type">RedisCacheManager</span> <span class="variable">cacheManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisCacheManager</span>(redisTemplate);</span><br><span class="line">        <span class="comment">// 设置缓存过期时间（秒）</span></span><br><span class="line">        cacheManager.setDefaultExpiration(<span class="number">3600</span>);</span><br><span class="line">        <span class="keyword">return</span> cacheManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, String&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> &#123;</span><br><span class="line">        <span class="type">StringRedisTemplate</span> <span class="variable">template</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringRedisTemplate</span>(factory);</span><br><span class="line">        setSerializer(template);<span class="comment">// 设置序列化工具</span></span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setSerializer</span><span class="params">(StringRedisTemplate template)</span> &#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unchecked&quot; &#125;)</span></span><br><span class="line">        <span class="type">Jackson2JsonRedisSerializer</span> <span class="variable">jackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Ehcache"><a href="#Ehcache" class="headerlink" title="Ehcache"></a>Ehcache</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ehcache --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.ehcache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>在src&#x2F;main&#x2F;resources目录下新建ehcache.xml：</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">&quot;ehcache.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxElementsInMemory</span>=<span class="string">&quot;10000&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;3600&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">overflowToDisk</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">diskPersistent</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">diskExpiryThreadIntervalSeconds</span>=<span class="string">&quot;120&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">&quot;student&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxEntriesLocalHeap</span>=<span class="string">&quot;2000&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;3600&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">overflowToDisk</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">statistics</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure><p>关于Ehcahe的一些说明：</p><ul><li>name：缓存名称。</li><li>maxElementsInMemory：缓存最大数目</li><li>maxElementsOnDisk：硬盘最大缓存个数。</li><li>eternal：对象是否永久有效，一但设置了，timeout将不起作用。</li><li>overflowToDisk：是否保存到磁盘。</li><li>timeToIdleSeconds:设置对象在失效前的允许闲置时间（单位：秒）。仅当<code>eternal=false</code>对象不是永久有效时使用，可选属性，默认值是0，也就是可闲置时间无穷大。</li><li>timeToLiveSeconds：设置对象在失效前允许存活时间（单位：秒）。最大时间介于创建时间和失效时间之间。仅当<code>eternal=false</code>对象不是永久有效时使用，默认是0，也就是对象存活时间无穷大。</li><li>diskPersistent：是否缓存虚拟机重启期数据，默认值为false。</li><li>diskSpoolBufferSizeMB：这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区。</li><li>diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认是120秒。</li><li>memoryStoreEvictionPolicy：当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。默认策略是LRU（最近最少使用）。你可以设置为FIFO（先进先出）或是LFU（较少使用）。</li><li>clearOnFlush：内存数量最大时是否清除。</li><li>memoryStoreEvictionPolicy：Ehcache的三种清空策略：<strong>FIFO</strong>，first in first out，这个是大家最熟的，先进先出。<strong>LFU</strong>， Less Frequently Used，就是上面例子中使用的策略，直白一点就是讲一直以来最少被使用的。如上面所讲，缓存的元素有一个hit属性，hit值最小的将会被清出缓存。<strong>LRU</strong>，Least Recently Used，最近最少使用的，缓存的元素有一个时间戳，当缓存容量满了，而又需要腾出地方来缓存新的元素的时候，那么现有缓存元素中时间戳离当前时间最远的元素将被清出缓存。</li></ul><h2 id="六、JSON"><a href="#六、JSON" class="headerlink" title="六、JSON"></a>六、JSON</h2><h3 id="自定义ObjectMapper"><a href="#自定义ObjectMapper" class="headerlink" title="自定义ObjectMapper"></a>自定义ObjectMapper</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JacksonConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ObjectMapper <span class="title function_">getObjectMapper</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        mapper.setDateFormat(<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> mapper;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h5 style="color:green">在Spring中使用`@ResponseBody`注解可以将方法返回的对象序列化成JSON </h5></blockquote><blockquote><h5 style="color:green">Jackson通过使用mapper的`writeValueAsString`方法将Java对象序列化为JSON格式字符串 </h5></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//序列化</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;serialization&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">serialization</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setUserName(<span class="string">&quot;mrbird&quot;</span>);</span><br><span class="line">    user.setBirthday(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> mapper.writeValueAsString(user);</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h5 style="color:green">当采用树遍历的方式时，JSON被读入到JsonNode对象中，可以像操作XML DOM那样读取JSON。</h5></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//反序列化</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;readjsonstring&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">readJsonString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;name\&quot;:\&quot;mrbird\&quot;,\&quot;age\&quot;:26&#125;&quot;</span>;</span><br><span class="line">        <span class="type">JsonNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="built_in">this</span>.mapper.readTree(json);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> node.get(<span class="string">&quot;name&quot;</span>).asText();</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> node.get(<span class="string">&quot;age&quot;</span>).asInt();</span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">&quot; &quot;</span> + age;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//解析多级JSON例子，如解析对象包含子对象</span></span><br><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;name\&quot;:\&quot;mrbird\&quot;,\&quot;hobby\&quot;:&#123;\&quot;first\&quot;:\&quot;sleep\&quot;,\&quot;second\&quot;:\&quot;eat\&quot;&#125;&#125;&quot;</span>;;<span class="type">JsonNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="built_in">this</span>.mapper.readTree(json);<span class="type">JsonNode</span> <span class="variable">hobby</span> <span class="operator">=</span> node.get(<span class="string">&quot;hobby&quot;</span>);<span class="type">String</span> <span class="variable">first</span> <span class="operator">=</span> hobby.get(<span class="string">&quot;first&quot;</span>).asText();</span><br></pre></td></tr></table></figure><blockquote><h5 style="color:green">将java对象和JSON数据进行绑定，将json数据返回成一个对象，然后获取对象的属性</h5></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//绑定</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;readjsonasobject&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">readJsonAsObject</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;name\&quot;:\&quot;mrbird\&quot;,\&quot;age\&quot;:26&#125;&quot;</span>;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.readValue(json, User.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> user.getUserName();</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> user.getAge();</span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">&quot; &quot;</span> + age;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@JsonProperty</strong>：作用于属性，指定别名</p><p><strong>@JsonIgnore</strong>:作用于属性，用来忽略此属性</p><p><strong>@JsonIgnorePropertes({ “password”, “age” })</strong>:作用于类，忽略一组属性</p><p><strong>@JsonFormat(pattern &#x3D; “yyyy-MM-dd HH:mm:ss”)</strong>:作用于日期属性，用于日期格式化</p><p><strong>@JsonNaming(PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy.class)</strong>:命名策略，作用于类或属性如其中一种线性命名&#x3D;&#x3D;userName转化为user-name&#x3D;&#x3D;</p><p>@JsonSerialize:指定一个类来实现自定义序列化</p><p>@JsonDeserialize:用户自定义反序列化</p><p>@JsonView(User.UserNameView.class):作用在类或者属性上，用来定义一个序列化组。 比如对于User对象，某些情况下只返回userName属性就行，而某些情况下需要返回全部属性。</p><h2 id="七、单元测试"><a href="#七、单元测试" class="headerlink" title="七、单元测试"></a>七、单元测试</h2><h3 id="Assert"><a href="#Assert" class="headerlink" title="Assert"></a>Assert</h3><p>​上面代码中，我们使用了Assert类提供的assert口方法，下面列出了一些<strong>常用的assert方法</strong>：</p><ul><li><code>assertEquals(&quot;message&quot;,A,B)</code>，判断A对象和B对象是否相等，这个判断在比较两个对象时调用了<code>equals()</code>方法。</li><li><code>assertSame(&quot;message&quot;,A,B)</code>，判断A对象与B对象是否相同，使用的是<code>==</code>操作符。</li><li><code>assertTrue(&quot;message&quot;,A)</code>，判断A条件是否为真。</li><li><code>assertFalse(&quot;message&quot;,A)</code>，判断A条件是否不为真。</li><li><code>assertNotNull(&quot;message&quot;,A)</code>，判断A对象是否不为<code>null</code>。</li><li><code>assertArrayEquals(&quot;message&quot;,A,B)</code>，判断A数组与B数组是否相等。</li></ul><h3 id="MockMvc"><a href="#MockMvc" class="headerlink" title="MockMvc"></a>MockMvc</h3><h4 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h4><p>对Controller的测试需要用到MockMvc技术。MockMvc，从字面上来看指的是<strong>模拟的MVC</strong>，即其可以模拟一个MVC环境，向Controller发送请求然后得到响应。</p><p>[Spring Boot中编写单元测试 | MrBird](<a href="https://mrbird.cc/Spring-Boot">https://mrbird.cc/Spring-Boot</a> TESTing.html)</p><h4 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h4><h2 id="八、Swagger2构建RESTful-API"><a href="#八、Swagger2构建RESTful-API" class="headerlink" title="八、Swagger2构建RESTful API"></a>八、Swagger2构建RESTful API</h2><p>Swagger是一款可以快速生成符合RESTful风格API并进行在线调试的插件。</p><table><thead><tr><th align="left">描述</th><th align="left">传统请求</th><th align="left">方法</th><th align="left">RESTful请求</th><th align="left">方法</th></tr></thead><tbody><tr><td align="left">查询</td><td align="left">&#x2F;user&#x2F;query?name&#x3D;mrbird</td><td align="left">GET</td><td align="left">&#x2F;user?name&#x3D;mrbird</td><td align="left">GET</td></tr><tr><td align="left">详情</td><td align="left">&#x2F;user&#x2F;getInfo?id&#x3D;1</td><td align="left">GET</td><td align="left">&#x2F;user&#x2F;1</td><td align="left">GET</td></tr><tr><td align="left">创建</td><td align="left">&#x2F;user&#x2F;create?name&#x3D;mrbird</td><td align="left">POST</td><td align="left">&#x2F;user</td><td align="left">POST</td></tr><tr><td align="left">修改</td><td align="left">&#x2F;user&#x2F;update?name&#x3D;mrbird&amp;id&#x3D;1</td><td align="left">POST</td><td align="left">&#x2F;user&#x2F;1</td><td align="left">PUT</td></tr><tr><td align="left">删除</td><td align="left">&#x2F;user&#x2F;delete?id&#x3D;1</td><td align="left">GET</td><td align="left">&#x2F;user&#x2F;1</td><td align="left">DELETE</td></tr></tbody></table><h5 style="color:green">RESTful只是一种风格，并不是一种强制性的标准。</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置config"><a href="#配置config" class="headerlink" title="配置config"></a>配置config</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableSwagger2</span><br><span class="line">public class SwaggerConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Docket buildDocket()&#123;</span><br><span class="line">        return new Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(buildApiInf())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(&quot;com.xve.springbootswagger2.controller&quot;))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">    //管理者信息</span><br><span class="line">    private ApiInfo buildApiInf()&#123;</span><br><span class="line">        return new ApiInfoBuilder()</span><br><span class="line">                .title(&quot;系统RESTful API文档&quot;)</span><br><span class="line">                .contact(new Contact(&quot;xve&quot;,&quot;https://www.baidu.com&quot;, &quot;1226954639@qq.com&quot;))</span><br><span class="line">                .version(&quot;1.0&quot;)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Swagger常用注解"><a href="#Swagger常用注解" class="headerlink" title="Swagger常用注解"></a>Swagger常用注解</h3><ul><li><code>@Api</code>：修饰整个类，描述Controller的作用；</li><li><code>@ApiOperation</code>：描述一个类的一个方法，或者说一个接口；</li><li><code>@ApiParam</code>：单个参数描述；</li><li><code>@ApiModel</code>：用对象来接收参数；</li><li><code>@ApiProperty</code>：用对象接收参数时，描述对象的一个字段；</li><li><code>@ApiResponse</code>：HTTP响应其中1个描述；</li><li><code>@ApiResponses</code>：HTTP响应整体描述；</li><li><code>@ApiIgnore</code>：使用该注解忽略这个API；</li><li><code>@ApiError</code> ：发生错误返回的信息；</li><li><code>@ApiImplicitParam</code>：一个请求参数；</li><li><code>@ApiImplicitParams</code>：多个请求参数。</li></ul><h2 id="九、Actuator监控Spring-Boot应用"><a href="#九、Actuator监控Spring-Boot应用" class="headerlink" title="九、Actuator监控Spring Boot应用"></a>九、Actuator监控Spring Boot应用</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">HTTP 方法</th><th align="left">路径</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">&#x2F;autoconfig</td><td align="left">提供了一份自动配置报告，记录哪些自动配置条件通过了，哪些没通过</td></tr><tr><td align="left">GET</td><td align="left">&#x2F;configprops</td><td align="left">描述配置属性(包含默认值)如何注入Bean</td></tr><tr><td align="left">GET</td><td align="left">&#x2F;beans</td><td align="left">描述应用程序上下文里全部的Bean，以及它们的关系</td></tr><tr><td align="left">GET</td><td align="left">&#x2F;dump</td><td align="left">获取线程活动的快照</td></tr><tr><td align="left">GET</td><td align="left">&#x2F;env</td><td align="left">获取全部环境属性</td></tr><tr><td align="left">GET</td><td align="left">&#x2F;env&#x2F;{name}</td><td align="left">根据名称获取特定的环境属性值</td></tr><tr><td align="left">GET</td><td align="left">&#x2F;health</td><td align="left">报告应用程序的健康指标，这些值由HealthIndicator的实现类提供</td></tr><tr><td align="left">GET</td><td align="left">&#x2F;info</td><td align="left">获取应用程序的定制信息，这些信息由info打头的属性提供</td></tr><tr><td align="left">GET</td><td align="left">&#x2F;mappings</td><td align="left">描述全部的URI路径，以及它们和控制器(包含Actuator端点)的映射关系</td></tr><tr><td align="left">GET</td><td align="left">&#x2F;metrics</td><td align="left">报告各种应用程序度量信息，比如内存用量和HTTP请求计数</td></tr><tr><td align="left">GET</td><td align="left">&#x2F;metrics&#x2F;{name}</td><td align="left">报告指定名称的应用程序度量值</td></tr><tr><td align="left">POST</td><td align="left">&#x2F;shutdown</td><td align="left">关闭应用程序，要求endpoints.shutdown.enabled设置为true</td></tr><tr><td align="left">GET</td><td align="left">&#x2F;trace</td><td align="left">提供基本的HTTP请求跟踪信息(时间戳、HTTP头等)</td></tr></tbody></table><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span> <span class="comment">#关掉安全认证</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">context-path:</span> <span class="string">/monitor</span> <span class="comment">#actuator的访问路径</span></span><br><span class="line"><span class="attr">endpoints:</span></span><br><span class="line">  <span class="attr">shutdown:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="十、Spring-Boot-发邮件"><a href="#十、Spring-Boot-发邮件" class="headerlink" title="十、Spring Boot 发邮件"></a>十、Spring Boot 发邮件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="十一、Admin监控服务"><a href="#十一、Admin监控服务" class="headerlink" title="十一、Admin监控服务"></a>十一、Admin监控服务</h2><p>这是一款基于Actuator的监控Spring Boot应用，相比于Actuator只是单纯的返回JSON格式的数据，它返回的是以图形化界面的方式展示**Spring Boot应用的配置信息、Beans信息、环境属性、线程信息、JVM状况</p><h2 id="十二、Devtools热部署"><a href="#十二、Devtools热部署" class="headerlink" title="十二、Devtools热部署"></a>十二、Devtools热部署</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>devtools会监听classpath下的文件变动，并且会立即重启应用<strong>（发生在保存时机）</strong>，因为其采用的虚拟机机制，该项重启是很快的。</p><h2 id="十三、logback日志配置"><a href="#十三、logback日志配置" class="headerlink" title="十三、logback日志配置"></a>十三、logback日志配置</h2><p>​默认情况下，Spring Boot会用Logback来记录日志，并用INFO级别输出到控制台。</p><ol><li><p>时间日期：精确到毫秒；</p></li><li><p>日志级别：ERROR, WARN, INFO, DEBUG or TRACE；</p></li><li><p>进程ID；</p></li><li><p>分隔符：<code>---</code>标识实际日志的开始；</p></li><li><p>线程名：方括号括起来（可能会截断控制台输出）；</p></li><li><p>Logger名：通常使用源代码的类名；</p></li><li><p>日志内容。</p><p>​日志级别从低到高分为<strong>TRACE</strong> &lt; <strong>DEBUG</strong> &lt; <strong>INFO</strong> &lt; <strong>WARN</strong> &lt; <strong>ERROR</strong> &lt; <strong>FATAL</strong>，如果设置为WARN，则低于WARN的信息都不会输出。</p></li></ol><h2 id="十四、Spring-Boot项目打war包"><a href="#十四、Spring-Boot项目打war包" class="headerlink" title="十四、Spring Boot项目打war包"></a>十四、Spring Boot项目打war包</h2><ol><li><p>在pom.xml文件中，将打包方式改为war：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>然后添加如下的Tomcat依赖配置，覆盖Spring Boot自带的Tomcat依赖：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在<code>&lt;build&gt;&lt;/build&gt;</code>标签内配置项目名（该配置类似于server.context-path&#x3D;mrbird）：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>mrbird<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加启动类ServletInitializer：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletInitializer</span> <span class="keyword">extends</span> <span class="title class_">SpringBootServletInitializer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> SpringApplicationBuilder <span class="title function_">configure</span><span class="params">(SpringApplicationBuilder application)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> application.sources(Application.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>准备完毕后，运行<code>mvn clean package</code>命令即可在target目录下生产war包：</p></li></ol><h2 id="十五、Spring-Boot项目打jar包"><a href="#十五、Spring-Boot项目打jar包" class="headerlink" title="十五、Spring Boot项目打jar包"></a>十五、Spring Boot项目打jar包</h2><p>​部署Spring Boot项目可以使用Maven命令<code>mvn:clean package</code>将项目打包成只执行的jar文件，然后使用命令<code>java -jar XX.jar</code>来执行。但这样做无法将shell命令行释放，关闭terminal后项目也随之关闭了。这里介绍在Linux系统中后台运行Spring Boot jar文件的方法。</p><h2 id="十六、Jsoup防御XSS攻击"><a href="#十六、Jsoup防御XSS攻击" class="headerlink" title="十六、Jsoup防御XSS攻击"></a>十六、Jsoup防御XSS攻击</h2><p>Jsoup可以有效过滤不安全的代码，使用白名单机制来预防XSS攻击，如只允许<span>标签，那么将过滤其他所有标签。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jsoup<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsoup<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * XSS过滤工具</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsoupUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Whitelist</span> <span class="variable">whitelist</span> <span class="operator">=</span> Whitelist.basicWithImages();</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 配置过滤化参数,不对代码进行格式化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Document.<span class="type">OutputSettings</span> <span class="variable">outputSettings</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Document</span>.OutputSettings().prettyPrint(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 富文本编辑时一些样式是使用style来进行实现的 比如红色字体 style=&quot;color:red;&quot; 所以需要给所有标签添加style属性</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        whitelist.addAttributes(<span class="string">&quot;:all&quot;</span>, <span class="string">&quot;style&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">clean</span><span class="params">(String content)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Jsoup.clean(content, <span class="string">&quot;&quot;</span>, whitelist, outputSettings);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">白名单对象</th><th align="left">标签</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">none</td><td align="left">无</td><td align="left">只保留标签内文本内容</td></tr><tr><td align="left">simpleText</td><td align="left">b,em,i,strong,u</td><td align="left">简单的文本标签</td></tr><tr><td align="left">basic</td><td align="left">a,b,blockquote,br,cite,code,dd, dl,dt,em,i,li,ol,p,pre,q,small,span, strike,strong,sub,sup,u,ul</td><td align="left">基本使用的标签</td></tr><tr><td align="left">basicWithImages</td><td align="left">basic 的基础上添加了 img 标签 及 img 标签的 src,align,alt,height,width,title 属性</td><td align="left">基本使用的加上 img 标签</td></tr><tr><td align="left">relaxed</td><td align="left">a,b,blockquote,br,caption,cite, code,col,colgroup,dd,div,dl,dt, em,h1,h2,h3,h4,h5,h6,i,img,li, ol,p,pre,q,small,span,strike,strong, sub,sup,table,tbody,td,tfoot,th,thead,tr,u,ul</td><td align="left">在 basicWithImages 的基础上又增加了一部分部分标签</td></tr></tbody></table><p>创建两个参数过滤的类，并通过config配置bean</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Jsoup过滤http请求，防止Xss攻击</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XssHttpServletRequestWrapper</span> <span class="keyword">extends</span> <span class="title class_">HttpServletRequestWrapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">HttpServletRequest</span> <span class="variable">orgRequest</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">isIncludeRichText</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">XssHttpServletRequestWrapper</span><span class="params">(HttpServletRequest request, <span class="type">boolean</span> isIncludeRichText)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(request);</span><br><span class="line">        orgRequest = request;</span><br><span class="line">        <span class="built_in">this</span>.isIncludeRichText = isIncludeRichText;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 覆盖getParameter方法，将参数名和参数值都做xss过滤如果需要获得原始的值，则通过super.getParameterValues(name)来获取</span></span><br><span class="line"><span class="comment">    * getParameterNames,getParameterValues和getParameterMap也可能需要覆盖</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getParameter</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="string">&quot;content&quot;</span>.equals(name) || name.endsWith(<span class="string">&quot;WithHtml&quot;</span>)) &amp;&amp; !isIncludeRichText) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.getParameter(name);</span><br><span class="line">        &#125;</span><br><span class="line">        name = JsoupUtil.clean(name);</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> <span class="built_in">super</span>.getParameter(name);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(value)) &#123;</span><br><span class="line">            value = JsoupUtil.clean(value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] getParameterValues(String name) &#123;</span><br><span class="line">        String[] arr = <span class="built_in">super</span>.getParameterValues(name);</span><br><span class="line">        <span class="keyword">if</span> (arr != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">                arr[i] = JsoupUtil.clean(arr[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 覆盖getHeader方法，将参数名和参数值都做xss过滤如果需要获得原始的值，则通过super.getHeaders(name)来获取</span></span><br><span class="line"><span class="comment">    * getHeaderNames 也可能需要覆盖</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getHeader</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        name = JsoupUtil.clean(name);</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> <span class="built_in">super</span>.getHeader(name);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(value)) &#123;</span><br><span class="line">            value = JsoupUtil.clean(value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取原始的request</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> HttpServletRequest <span class="title function_">getOrgRequest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> orgRequest;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取原始的request的静态方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HttpServletRequest <span class="title function_">getOrgRequest</span><span class="params">(HttpServletRequest req)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (req <span class="keyword">instanceof</span> XssHttpServletRequestWrapper) &#123;</span><br><span class="line">            <span class="keyword">return</span> ((XssHttpServletRequestWrapper) req).getOrgRequest();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> req;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Xss攻击拦截器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XssFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(XssFilter.class);</span><br><span class="line">    <span class="comment">// 是否过滤富文本内容</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">IS_INCLUDE_RICH_TEXT</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; excludes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;------------ xss filter init ------------&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">isIncludeRichText</span> <span class="operator">=</span> filterConfig.getInitParameter(<span class="string">&quot;isIncludeRichText&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(isIncludeRichText)) &#123;</span><br><span class="line">            IS_INCLUDE_RICH_TEXT = BooleanUtils.toBoolean(isIncludeRichText);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">temp</span> <span class="operator">=</span> filterConfig.getInitParameter(<span class="string">&quot;excludes&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (temp != <span class="literal">null</span>) &#123;</span><br><span class="line">            String[] url = temp.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; url != <span class="literal">null</span> &amp;&amp; i &lt; url.length; i++) &#123;</span><br><span class="line">                excludes.add(url[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span><br><span class="line">            <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> (HttpServletRequest) request;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">resp</span> <span class="operator">=</span> (HttpServletResponse) response;</span><br><span class="line">        <span class="keyword">if</span> (handleExcludeURL(req, resp)) &#123;</span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">XssHttpServletRequestWrapper</span> <span class="variable">xssRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XssHttpServletRequestWrapper</span>((HttpServletRequest) request,</span><br><span class="line">        IS_INCLUDE_RICH_TEXT);</span><br><span class="line">        chain.doFilter(xssRequest, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">handleExcludeURL</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (excludes == <span class="literal">null</span> || excludes.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> request.getServletPath();</span><br><span class="line">        <span class="keyword">for</span> (String pattern : excludes) &#123;</span><br><span class="line">            <span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;^&quot;</span> + pattern);</span><br><span class="line">            <span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> p.matcher(url);</span><br><span class="line">            <span class="keyword">if</span> (m.find())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> FilterRegistrationBean <span class="title function_">xssFilterRegistrationBean</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">FilterRegistrationBean</span> <span class="variable">filterRegistrationBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>();</span><br><span class="line">    filterRegistrationBean.setFilter(<span class="keyword">new</span> <span class="title class_">XssFilter</span>());</span><br><span class="line">    filterRegistrationBean.setOrder(<span class="number">1</span>);</span><br><span class="line">    filterRegistrationBean.setEnabled(<span class="literal">true</span>);</span><br><span class="line">    filterRegistrationBean.addUrlPatterns(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">    Map&lt;String, String&gt; initParameters = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line">    initParameters.put(<span class="string">&quot;excludes&quot;</span>, <span class="string">&quot;/favicon.ico,/img/*,/js/*,/css/*&quot;</span>);</span><br><span class="line">    initParameters.put(<span class="string">&quot;isIncludeRichText&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">    filterRegistrationBean.setInitParameters(initParameters);</span><br><span class="line">    <span class="keyword">return</span> filterRegistrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十七、异常处理"><a href="#十七、异常处理" class="headerlink" title="十七、异常处理"></a>十七、异常处理</h2><p>一般在spring boot中，几种常见异常都有对应默认html页面</p><p>自定义异常</p><p>我们手动定义一个<code>UserNotExistException</code>，继承<code>RuntimeException</code>。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserNotExistException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">1574716826948451793L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserNotExistException</span><span class="params">(String id)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;user not exist&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后定义一个Controller异常处理类<code>ControllerExceptionHandler</code>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@ControllerAdvice</span><br><span class="line">public class ControllerExceptionHandler &#123;</span><br><span class="line"></span><br><span class="line">    @ExceptionHandler(UserNotExistException.class)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)</span><br><span class="line">    public Map&lt;String, Object&gt; handleUserNotExistsException(UserNotExistException e) &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">        map.put(&quot;id&quot;, e.getId());</span><br><span class="line">        map.put(&quot;message&quot;, e.getMessage());</span><br><span class="line">        return map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中注解<code>@ExceptionHandler</code>指定了要处理的异常类型，注解<code>@ResponseStatus</code>指定异常处理方法返回的HTTP状态码为<code>HttpStatus.INTERNAL_SERVER_ERROR</code>，即500。<code>HttpStatus</code>是一个spring自带的枚举类型，封装了常见的HTTP状态码及描述：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">HttpStatus</span> &#123;</span><br><span class="line">    CONTINUE(<span class="number">100</span>, <span class="string">&quot;Continue&quot;</span>),</span><br><span class="line">    SWITCHING_PROTOCOLS(<span class="number">101</span>, <span class="string">&quot;Switching Protocols&quot;</span>),</span><br><span class="line">    PROCESSING(<span class="number">102</span>, <span class="string">&quot;Processing&quot;</span>),</span><br><span class="line">    CHECKPOINT(<span class="number">103</span>, <span class="string">&quot;Checkpoint&quot;</span>),</span><br><span class="line">    OK(<span class="number">200</span>, <span class="string">&quot;OK&quot;</span>),</span><br><span class="line">    CREATED(<span class="number">201</span>, <span class="string">&quot;Created&quot;</span>),</span><br><span class="line">    ACCEPTED(<span class="number">202</span>, <span class="string">&quot;Accepted&quot;</span>),</span><br><span class="line">    NON_AUTHORITATIVE_INFORMATION(<span class="number">203</span>, <span class="string">&quot;Non-Authoritative Information&quot;</span>),</span><br><span class="line">    NO_CONTENT(<span class="number">204</span>, <span class="string">&quot;No Content&quot;</span>),</span><br><span class="line">    RESET_CONTENT(<span class="number">205</span>, <span class="string">&quot;Reset Content&quot;</span>),</span><br><span class="line">    PARTIAL_CONTENT(<span class="number">206</span>, <span class="string">&quot;Partial Content&quot;</span>),</span><br><span class="line">    MULTI_STATUS(<span class="number">207</span>, <span class="string">&quot;Multi-Status&quot;</span>),</span><br><span class="line">    ALREADY_REPORTED(<span class="number">208</span>, <span class="string">&quot;Already Reported&quot;</span>),</span><br><span class="line">    IM_USED(<span class="number">226</span>, <span class="string">&quot;IM Used&quot;</span>),</span><br><span class="line">    MULTIPLE_CHOICES(<span class="number">300</span>, <span class="string">&quot;Multiple Choices&quot;</span>),</span><br><span class="line">    MOVED_PERMANENTLY(<span class="number">301</span>, <span class="string">&quot;Moved Permanently&quot;</span>),</span><br><span class="line">    FOUND(<span class="number">302</span>, <span class="string">&quot;Found&quot;</span>),</span><br><span class="line">    <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    MOVED_TEMPORARILY(<span class="number">302</span>, <span class="string">&quot;Moved Temporarily&quot;</span>),</span><br><span class="line">    SEE_OTHER(<span class="number">303</span>, <span class="string">&quot;See Other&quot;</span>),</span><br><span class="line">    NOT_MODIFIED(<span class="number">304</span>, <span class="string">&quot;Not Modified&quot;</span>),</span><br><span class="line">    <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    USE_PROXY(<span class="number">305</span>, <span class="string">&quot;Use Proxy&quot;</span>),</span><br><span class="line">    TEMPORARY_REDIRECT(<span class="number">307</span>, <span class="string">&quot;Temporary Redirect&quot;</span>),</span><br><span class="line">    PERMANENT_REDIRECT(<span class="number">308</span>, <span class="string">&quot;Permanent Redirect&quot;</span>),</span><br><span class="line">    BAD_REQUEST(<span class="number">400</span>, <span class="string">&quot;Bad Request&quot;</span>),</span><br><span class="line">    UNAUTHORIZED(<span class="number">401</span>, <span class="string">&quot;Unauthorized&quot;</span>),</span><br><span class="line">    PAYMENT_REQUIRED(<span class="number">402</span>, <span class="string">&quot;Payment Required&quot;</span>),</span><br><span class="line">    FORBIDDEN(<span class="number">403</span>, <span class="string">&quot;Forbidden&quot;</span>),</span><br><span class="line">    NOT_FOUND(<span class="number">404</span>, <span class="string">&quot;Not Found&quot;</span>),</span><br><span class="line">    METHOD_NOT_ALLOWED(<span class="number">405</span>, <span class="string">&quot;Method Not Allowed&quot;</span>),</span><br><span class="line">    NOT_ACCEPTABLE(<span class="number">406</span>, <span class="string">&quot;Not Acceptable&quot;</span>),</span><br><span class="line">    PROXY_AUTHENTICATION_REQUIRED(<span class="number">407</span>, <span class="string">&quot;Proxy Authentication Required&quot;</span>),</span><br><span class="line">    REQUEST_TIMEOUT(<span class="number">408</span>, <span class="string">&quot;Request Timeout&quot;</span>),</span><br><span class="line">    CONFLICT(<span class="number">409</span>, <span class="string">&quot;Conflict&quot;</span>),</span><br><span class="line">    GONE(<span class="number">410</span>, <span class="string">&quot;Gone&quot;</span>),</span><br><span class="line">    LENGTH_REQUIRED(<span class="number">411</span>, <span class="string">&quot;Length Required&quot;</span>),</span><br><span class="line">    PRECONDITION_FAILED(<span class="number">412</span>, <span class="string">&quot;Precondition Failed&quot;</span>),</span><br><span class="line">    PAYLOAD_TOO_LARGE(<span class="number">413</span>, <span class="string">&quot;Payload Too Large&quot;</span>),</span><br><span class="line">    <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    REQUEST_ENTITY_TOO_LARGE(<span class="number">413</span>, <span class="string">&quot;Request Entity Too Large&quot;</span>),</span><br><span class="line">    URI_TOO_LONG(<span class="number">414</span>, <span class="string">&quot;URI Too Long&quot;</span>),</span><br><span class="line">    <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    REQUEST_URI_TOO_LONG(<span class="number">414</span>, <span class="string">&quot;Request-URI Too Long&quot;</span>),</span><br><span class="line">    UNSUPPORTED_MEDIA_TYPE(<span class="number">415</span>, <span class="string">&quot;Unsupported Media Type&quot;</span>),</span><br><span class="line">    REQUESTED_RANGE_NOT_SATISFIABLE(<span class="number">416</span>, <span class="string">&quot;Requested range not satisfiable&quot;</span>),</span><br><span class="line">    EXPECTATION_FAILED(<span class="number">417</span>, <span class="string">&quot;Expectation Failed&quot;</span>),</span><br><span class="line">    I_AM_A_TEAPOT(<span class="number">418</span>, <span class="string">&quot;I&#x27;m a teapot&quot;</span>),</span><br><span class="line">    <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    INSUFFICIENT_SPACE_ON_RESOURCE(<span class="number">419</span>, <span class="string">&quot;Insufficient Space On Resource&quot;</span>),</span><br><span class="line">    <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    METHOD_FAILURE(<span class="number">420</span>, <span class="string">&quot;Method Failure&quot;</span>),</span><br><span class="line">    <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    DESTINATION_LOCKED(<span class="number">421</span>, <span class="string">&quot;Destination Locked&quot;</span>),</span><br><span class="line">    UNPROCESSABLE_ENTITY(<span class="number">422</span>, <span class="string">&quot;Unprocessable Entity&quot;</span>),</span><br><span class="line">    LOCKED(<span class="number">423</span>, <span class="string">&quot;Locked&quot;</span>),</span><br><span class="line">    FAILED_DEPENDENCY(<span class="number">424</span>, <span class="string">&quot;Failed Dependency&quot;</span>),</span><br><span class="line">    UPGRADE_REQUIRED(<span class="number">426</span>, <span class="string">&quot;Upgrade Required&quot;</span>),</span><br><span class="line">    PRECONDITION_REQUIRED(<span class="number">428</span>, <span class="string">&quot;Precondition Required&quot;</span>),</span><br><span class="line">    TOO_MANY_REQUESTS(<span class="number">429</span>, <span class="string">&quot;Too Many Requests&quot;</span>),</span><br><span class="line">    REQUEST_HEADER_FIELDS_TOO_LARGE(<span class="number">431</span>, <span class="string">&quot;Request Header Fields Too Large&quot;</span>),</span><br><span class="line">    UNAVAILABLE_FOR_LEGAL_REASONS(<span class="number">451</span>, <span class="string">&quot;Unavailable For Legal Reasons&quot;</span>),</span><br><span class="line">    INTERNAL_SERVER_ERROR(<span class="number">500</span>, <span class="string">&quot;Internal Server Error&quot;</span>),</span><br><span class="line">    NOT_IMPLEMENTED(<span class="number">501</span>, <span class="string">&quot;Not Implemented&quot;</span>),</span><br><span class="line">    BAD_GATEWAY(<span class="number">502</span>, <span class="string">&quot;Bad Gateway&quot;</span>),</span><br><span class="line">    SERVICE_UNAVAILABLE(<span class="number">503</span>, <span class="string">&quot;Service Unavailable&quot;</span>),</span><br><span class="line">    GATEWAY_TIMEOUT(<span class="number">504</span>, <span class="string">&quot;Gateway Timeout&quot;</span>),</span><br><span class="line">    HTTP_VERSION_NOT_SUPPORTED(<span class="number">505</span>, <span class="string">&quot;HTTP Version not supported&quot;</span>),</span><br><span class="line">    VARIANT_ALSO_NEGOTIATES(<span class="number">506</span>, <span class="string">&quot;Variant Also Negotiates&quot;</span>),</span><br><span class="line">    INSUFFICIENT_STORAGE(<span class="number">507</span>, <span class="string">&quot;Insufficient Storage&quot;</span>),</span><br><span class="line">    LOOP_DETECTED(<span class="number">508</span>, <span class="string">&quot;Loop Detected&quot;</span>),</span><br><span class="line">    BANDWIDTH_LIMIT_EXCEEDED(<span class="number">509</span>, <span class="string">&quot;Bandwidth Limit Exceeded&quot;</span>),</span><br><span class="line">    NOT_EXTENDED(<span class="number">510</span>, <span class="string">&quot;Not Extended&quot;</span>),</span><br><span class="line">    NETWORK_AUTHENTICATION_REQUIRED(<span class="number">511</span>, <span class="string">&quot;Network Authentication Required&quot;</span>);</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十八、Spring-Boot整合Dubbo-amp-Zookeeper"><a href="#十八、Spring-Boot整合Dubbo-amp-Zookeeper" class="headerlink" title="十八、Spring Boot整合Dubbo&amp;Zookeeper"></a>十八、Spring Boot整合Dubbo&amp;Zookeeper</h2><p><strong>Dubbo</strong>是一款由阿里巴巴开发的远程服务调用框架（RPC），其可以透明化的调用远程服务，就像调用本地服务一样简单。截至目前，Dubbo发布了基于Spring Boot构建的版本，版本号为0.2.0，这使得其与Spring Boot项目整合变得更为简单方便。而<strong>Zookeeper</strong>在这里充当的是<strong>服务注册中心</strong>的角色，我们将各个微服务提供的服务通过Dubbo注册到Zookeeper中，然后服务消费者通过Dubbo从Zookeeper中获取相应服务并消费。</p><p>面向接口的远程方法调用，智能容错和负载均衡，服务自动注册和发现</p><ol><li><p>服务端依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入依赖 Dubbo + Zookeeper--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--dubbo--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--zkclient:zookeeper客户端--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.sgroschupf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--zookeeper:日志会冲突--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-recipes<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-x-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--排除这个slf4j-log4j12--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><h4 style="color:red">出现报错可能是zookeeper和curator产生冲突</h4></blockquote></li></ol><p>服务提供配置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#提供者</span><br><span class="line">server.port=8001</span><br><span class="line"></span><br><span class="line">#服务应用名字</span><br><span class="line">dubbo.application.name=provider-server</span><br><span class="line">#注册中心地址</span><br><span class="line">dubbo.registry.address=zookeeper://127.0.0.1:2181</span><br><span class="line">#哪些服务要被注册</span><br><span class="line">dubbo.scan.base-packages=com.xve.providerserver.service</span><br></pre></td></tr></table></figure><p>服务消费配置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#消费者</span><br><span class="line">server.port=8002</span><br><span class="line"></span><br><span class="line">#注册中心的地址</span><br><span class="line">dubbo.registry.address=zookeeper://127.0.0.1:2181</span><br><span class="line">#暴露自己的名字</span><br><span class="line">dubbo.application.name=consumer-server</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="十九、Spring-Boot整合Shiro"><a href="#十九、Spring-Boot整合Shiro" class="headerlink" title="十九、Spring Boot整合Shiro"></a>十九、Spring Boot整合Shiro</h2><ol><li>定义一个ShiroConfig，然后配置SecurityManager Bean,SecurityManager为Shiro的安全管理器，管理所有的Subject</li><li>在ShiroConfig中配置ShiroFilterFactoryBean，其为Shiro过滤器工厂类，依赖于SecurityManager</li><li>自定义Realm实现，Realm包含含<code>doGetAuthorizationInfo()</code>授权和<code>doGetAuthenticationInfo()</code>认证方法，</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--MyBatis--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--thymeleaf--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--shiro-spring--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mysql驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.26<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--druid数据驱动源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">Filter Name</th><th align="left">Class</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">anon</td><td align="left"><a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authc/AnonymousFilter.html">org.apache.shiro.web.filter.authc.AnonymousFilter</a></td><td align="left">匿名拦截器，即不需要登录即可访问；一般用于静态资源过滤；示例<code>/static/**=anon</code></td></tr><tr><td align="left">authc</td><td align="left"><a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authc/FormAuthenticationFilter.html">org.apache.shiro.web.filter.authc.FormAuthenticationFilter</a></td><td align="left">基于表单的拦截器；如<code>/**=authc</code>，如果没有登录会跳到相应的登录页面登录</td></tr><tr><td align="left">authcBasic</td><td align="left"><a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authc/BasicHttpAuthenticationFilter.html">org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter</a></td><td align="left">Basic HTTP身份验证拦截器</td></tr><tr><td align="left">logout</td><td align="left"><a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authc/LogoutFilter.html">org.apache.shiro.web.filter.authc.LogoutFilter</a></td><td align="left">退出拦截器，主要属性：redirectUrl：退出成功后重定向的地址（&#x2F;），示例<code>/logout=logout</code></td></tr><tr><td align="left">noSessionCreation</td><td align="left"><a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/session/NoSessionCreationFilter.html">org.apache.shiro.web.filter.session.NoSessionCreationFilter</a></td><td align="left">不创建会话拦截器，调用<code>subject.getSession(false)</code>不会有什么问题，但是如果<code>subject.getSession(true)</code>将抛出<code>DisabledSessionException</code>异常</td></tr><tr><td align="left">perms</td><td align="left"><a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authz/PermissionsAuthorizationFilter.html">org.apache.shiro.web.filter.authz.PermissionsAuthorizationFilter</a></td><td align="left">权限授权拦截器，验证用户是否拥有所有权限；属性和roles一样；示例<code>/user/**=perms[&quot;user:create&quot;]</code></td></tr><tr><td align="left">port</td><td align="left"><a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authz/PortFilter.html">org.apache.shiro.web.filter.authz.PortFilter</a></td><td align="left">端口拦截器，主要属性<code>port(80)</code>：可以通过的端口；示例<code>/test= port[80]</code>，如果用户访问该页面是非80，将自动将请求端口改为80并重定向到该80端口，其他路径&#x2F;参数等都一样</td></tr><tr><td align="left">rest</td><td align="left"><a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authz/HttpMethodPermissionFilter.html">org.apache.shiro.web.filter.authz.HttpMethodPermissionFilter</a></td><td align="left">rest风格拦截器，自动根据请求方法构建权限字符串；示例<code>/users=rest[user]</code>，会自动拼出user:read,user:create,user:update,user:delete权限字符串进行权限匹配（所有都得匹配，isPermittedAll）</td></tr><tr><td align="left">roles</td><td align="left"><a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authz/RolesAuthorizationFilter.html">org.apache.shiro.web.filter.authz.RolesAuthorizationFilter</a></td><td align="left">角色授权拦截器，验证用户是否拥有所有角色；示例<code>/admin/**=roles[admin]</code></td></tr><tr><td align="left">ssl</td><td align="left"><a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authz/SslFilter.html">org.apache.shiro.web.filter.authz.SslFilter</a></td><td align="left">SSL拦截器，只有请求协议是https才能通过；否则自动跳转会https端口443；其他和port拦截器一样；</td></tr><tr><td align="left">user</td><td align="left"><a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authc/UserFilter.html">org.apache.shiro.web.filter.authc.UserFilter</a></td><td align="left">用户拦截器，用户已经身份验证&#x2F;记住我登录的都可；示例<code>/**=user</code></td></tr></tbody></table><h2 id="二十、Spring-Boot整合Spring-Security-amp-Oauth2"><a href="#二十、Spring-Boot整合Spring-Security-amp-Oauth2" class="headerlink" title="二十、Spring Boot整合Spring Security&amp;Oauth2"></a>二十、Spring Boot整合Spring Security&amp;Oauth2</h2>]]></content>
      
      
      <categories>
          
          <category> 框架功能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud 1.0</title>
      <link href="/2022/10/06/frame/SpringCloud-1.0/"/>
      <url>/2022/10/06/frame/SpringCloud-1.0/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h1><hr><p>​微服务架构。模块化，功能化。实现<strong>负载均衡</strong>。</p><p>​Spring Cloud是一套生态，就是来解决以上分布式架构的4个问题。*(SpringCloud基于SpringBoot)*</p><p>​<em>1.API网关，服务路由</em></p><p>​<em>2.HTTP，RPC框架，异步调用</em></p><p>​<em>3.服务注册与发现，高可用</em></p><p>​<em>4.熔断机制，服务降级</em></p><p>​<strong>服务网格（Server Mesh）</strong>：下一代微服务标准。代表解决方案：istio</p><hr><p>[TOC]</p><hr><h4 id="一、回顾"><a href="#一、回顾" class="headerlink" title="一、回顾"></a>一、回顾</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">三层架构 + MVC</span><br><span class="line"></span><br><span class="line">框架：</span><br><span class="line">spring IOC AOP</span><br><span class="line">SpringBoot ,新一代的JavaEE开发标准，自动装配</span><br><span class="line">模块化~ all in one</span><br><span class="line"></span><br><span class="line">微服务架构四个核心问题？</span><br><span class="line">1.这么多服务，客户端该如何去访问？</span><br><span class="line">2.这么多服务，服务之间如何进行通信？</span><br><span class="line">3.这么多服务器，如何治理？</span><br><span class="line">4.服务挂了，怎么办？</span><br><span class="line"></span><br><span class="line">重点</span><br><span class="line">API</span><br><span class="line">HTTP,RPC</span><br><span class="line">注册和发现</span><br><span class="line">熔断机制</span><br></pre></td></tr></table></figure><h6 id="解决方案：Spring-Cloud生态"><a href="#解决方案：Spring-Cloud生态" class="headerlink" title="解决方案：Spring Cloud生态"></a>解决方案：Spring Cloud生态</h6><ol><li>Spring Cloud netFlix（一站式解决方案）<ul><li>api网关，zuul组件</li><li>Feign –httpClinet —-Http通信方式，同步，阻塞</li><li>服务注册发现：Eureka</li><li>熔断机制：Hystrix</li><li></li></ul></li><li>Apache Dubbo zookeeper（半自动需要整合别人的）<ul><li>API：没有，找第三方或自己实现</li><li>Dubbo：</li><li>Zookeeper：</li><li>没有熔断，借助第三方</li></ul></li><li>Spring Cloud Alibaba（一站式解决方案，更简单）</li></ol><h4 id="二、什么是微服务"><a href="#二、什么是微服务" class="headerlink" title="二、什么是微服务"></a>二、什么是微服务</h4><p>微服务是一种架构思想，将传统的一站式应用，根据业务拆分成一个一个的服务，彻底解耦合</p><p>​引用ThoughtWorks公司的首席科学家Martin Fowler于2014年提出的一段话：微服务架构是一种架构模式，一种架构风格，它<strong>提倡将单一的应用程序划分为一组小的服务</strong>。每个服务运行在其自己独立的进程中，服务之间相互协调相互配置。<strong>服务之间采用轻量级的通信机制互相沟通</strong>。每个服务都围绕着具体业务进行构建，并且能够被独立的部署到生产环境中。对于具体的一个服务根据上下文，可以选择不同的语言编写，选择不同的数据库存储。</p><h6 id="微服务与微服务架构"><a href="#微服务与微服务架构" class="headerlink" title="微服务与微服务架构"></a>微服务与微服务架构</h6><p>​微服务：强调的是一个个体完成一项服务</p><p>​微服务架构：是一种新的架构。</p><h4 id="三、微服务优缺点"><a href="#三、微服务优缺点" class="headerlink" title="三、微服务优缺点"></a>三、微服务优缺点</h4><h6 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h6><ul><li>单一职责原则</li><li>每个服务足够内聚，足够小，代码容易理解，这样能聚焦一个指定的业务功能或业务需求</li><li>开发简单，开发效率高，一个服务可能就是专一干一件事</li><li>微服务能被小团队单独开发，这个小团队是2-5个人的开发人员组成</li><li>微服务是松耦合的，是有功能意义的服务，无论是在开发阶段或部署阶段都是独立的</li><li>微服务能使用不同的语言开发</li><li>易于和第三方集成，微服务允许容易且灵活的方式集成自动部署，通过持续集成工具，如jenkins,Hudson,bamboo</li><li>微服务易于被一个人开发人员理解，修改和维护，这样小团队能够更关注自己的工作成果，无需通过合作才能体现价值</li><li>微服务允许利用最新的技术</li><li><strong>微服务只是业务逻辑的代码，不会和HTML,CSS或其他界面混合</strong></li><li><strong>每个微服务都有自己的存储能力，可以有自己的数据库，也可以有统一数据库</strong></li></ul><h6 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a><strong>缺点</strong></h6><ul><li>开发人员要处理分布式系统的复杂性</li><li>多服务运维难度，随着服务的增加，运维的压力也在增大</li><li>系统部署依赖</li><li>服务间通讯成本</li><li>数据一致性</li><li>系统集成测试</li><li>性能监控</li></ul><p>选择Spring Cloud作为微服务架构</p><ul><li>整体解决方案和框架成熟度</li><li>社区热度</li><li>可维护性</li><li>学习曲线</li></ul><h4 id="四、什么是Spring-Cloud"><a href="#四、什么是Spring-Cloud" class="headerlink" title="四、什么是Spring Cloud"></a>四、什么是Spring Cloud</h4><p>​Spring Cloud基于SpringBoot提供了一套微服务解决方案，巧妙的简化了分布式系统基础设施的开发，包括<strong>服务注册与发现，配置中心，配置中心，全链路监控，服务网关，负载均衡，熔断器</strong>等组件，除了基于NetFlix的开源组件做高度抽象封装之外，还有一些选型中立的开源组件。</p><p>​包括<strong>配置管理，服务发现，断路器，路由，微代理，时间总线，全局锁，决策竞选，分布式会话等等</strong>。可以使用SpringBoot的开发风格做到一键启动和部署。</p><h6 id="SpringCloud构建微服务-x3D-x3D-gt-SpringBoot协调微服务"><a href="#SpringCloud构建微服务-x3D-x3D-gt-SpringBoot协调微服务" class="headerlink" title="SpringCloud构建微服务  &#x3D;&#x3D;&gt;  SpringBoot协调微服务"></a>SpringCloud构建微服务  &#x3D;&#x3D;&gt;  SpringBoot协调微服务</h6><p>SpringBoot专注于快速方便的开发单个个体微服务 -jar</p><p>SpringCloud是关注全局的微服务协调整理治理框架，它将SpringBoot开发的一个个单体微服务整合并管理起来</p><h6 id="SpringCloud能干嘛"><a href="#SpringCloud能干嘛" class="headerlink" title="SpringCloud能干嘛"></a>SpringCloud能干嘛</h6><ol><li>Distributed&#x2F;versioned configuration（分布式、版本控制配置）</li><li>Service registration and discovery（服务注册与发现）</li><li>Routing（路由）</li><li>Service-to-service calls（服务到服务的调用）</li><li>Load balancing （负载均衡配置）</li><li>Circuit Breakers（断路器）</li><li>Distributed messaging（分布式消息管理）</li></ol><p><a href="https://www.springcloud.cc/spring-cloud-netflix.html">Spring Cloud Netflix 中文文档 参考手册 中文版</a></p><p><a href="https://www.springcloud.cc/spring-cloud-dalston.html">Spring Cloud Dalston 中文文档 参考手册 中文版</a></p><h4 id="五、使用流程"><a href="#五、使用流程" class="headerlink" title="五、使用流程"></a>五、使用流程</h4><ol><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--打包方式 pom--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">&lt;!--版本号统一管理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">junt.version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">junt.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SpringCloud依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Greenwich.SR6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SpringBoot依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--连接数据库 mysql druid--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SpringBoot启动器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--junit 单元测试--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junt.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--lombok 实体类--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--log4j 日志--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--如有需要再添加--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>api（放置所有实体）&#x3D;&#x3D;》所有实体类必须序列化 public class Dept（实体类名） implements Serializable</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--当前的Model自己需要的依赖，如果父依赖中已经配置版本，这里就不用写版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>provider（服务提供）&#x3D;&#x3D;》需要添加依赖，配置yml，配置mybatis主文件和映射文件，通过pom依赖获得其他modle中的实体类</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--我们需要拿到实体类 所以需要配置api module--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xdj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud-01-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--test--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--jetty--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--热部署工具--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#application.yml配置</span></span><br><span class="line"><span class="comment">#端口号</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"><span class="comment">#mybatis配置</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.xdj.springcloud.pojo</span></span><br><span class="line">  <span class="attr">config-location:</span> <span class="string">classpath:mybatis/mybatis-config.xml</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#spring的配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spingcloud-provider-dept</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span> <span class="comment">#数据源</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/DB01?useUnicode=true&amp;amp;characterEncoding=utf8&amp;amp;useSSL=false&amp;amp;serverTimezone=UTC&amp;amp;rewriteBatchedStatements=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">newpassword</span></span><br></pre></td></tr></table></figure></li><li><p>consumer（消费者）&#x3D;&#x3D;》配置端口，config类</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--实体类+web--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xdj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud-01-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--r--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//RestTemplate的简单使用</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptConsumerController</span> &#123;</span><br><span class="line">    <span class="comment">//理解:消费者不会有service层</span></span><br><span class="line">    <span class="comment">//RestTemplate ...供我们直接调用就可以  注册到Spring中</span></span><br><span class="line">    <span class="comment">//(url,实体:Map,Class&lt;T&gt; responseType)</span></span><br><span class="line">    <span class="comment">//两种方法，根据后端是get还是post请求选择方法getForObject getForEntity,postForObject postForEntity</span></span><br><span class="line">    <span class="comment">//参数列表 请求地址  传递参数  返回类型</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line">    <span class="comment">//提供多种便捷访问远程http服务的方法，简单的Restful服务模板</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取地址  固定前缀</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REST_URL_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;http://localhost:8001&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/dept/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(Dept dept)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.postForObject(REST_URL_PREFIX+<span class="string">&quot;/dept/add&quot;</span>,dept,Boolean.class);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/dept/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Dept <span class="title function_">get</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(REST_URL_PREFIX+<span class="string">&quot;/dept/get/&quot;</span>+id,Dept.class);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/dept/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Dept&gt; <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(REST_URL_PREFIX+<span class="string">&quot;/dept/list&quot;</span>,List.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="六、Eureka服务注册与发现"><a href="#六、Eureka服务注册与发现" class="headerlink" title="六、Eureka服务注册与发现"></a>六、Eureka服务注册与发现</h4><p>cap原理，可以参考：<a href="http://www.ruanyifeng.com/blog/2018/07/cap.html%E3%80%82">http://www.ruanyifeng.com/blog/2018/07/cap.html。</a></p><p><strong>P:Partition tolerance</strong>,网络分区容错。类似多机房部署，保证服务稳定性。<br><strong>A: Availability</strong>，可用性。<br><strong>C:Consistency</strong> ，一致性。<br>CAP定理：CAP三个属性对于分布式系统不能同时做到。如AP&#x2F;CP&#x2F;AC。再来看Zookeepr区别：</p><p>（1）Zookeeper是CP，分布式协同服务，突出一致性。对ZooKeeper的的每次请求都能得到一致的数据结果，但是无法保证每次访问服务可用性。如请求到来时，zookeer正在做leader选举，此时不能提供服务，即不满足A可用性。</p><p>（2）Euere是AP，高可用与可伸缩的Service发现服务，突出可用性。相对于Zookeeper而言，可能返回数据没有一致性，但是保证能够返回数据，服务是可用的。</p><blockquote><h6 style="color:green">Eureka可以很好的应对网络故障导致部分节点丢失失去联系的情况，而不会像zookeeper那样使整个注册服务瘫痪</h6></blockquote><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加eureka相关依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Eureka配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span> <span class="comment">#服务端的实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment">#表示向eureka注册中心注册自己</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment">#如果false 表示自己为注册中心</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment">#注册中心监控页面 默认是http://localhost:8761/eureka/</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure><blockquote><div style="color:red">@EnableEurekaServer //服务端的启动类，可以接受别人注册进来</div><div style="color:red">@EnableEurekaClient  //将该项目添加进服务</div><div style="color:red">@EnableDiscoveryClient //服务发现</div></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#需要配置如何添加进来</span></span><br><span class="line"><span class="comment">#Eureka配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka/</span> <span class="comment">#与上方一致</span></span><br><span class="line">    <span class="attr">instance:</span></span><br><span class="line">      <span class="attr">instance-id:</span> <span class="string">springcloud-provider-dept8001</span>  <span class="comment">#修改eureka上默认的描述信息</span></span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line"><span class="comment">#info配置 可以让人看到这个微服务的介绍</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">app.name:</span> <span class="string">xdj-springcloud</span></span><br><span class="line">  <span class="attr">company.name:</span> <span class="string">blog.xdjstudy.com</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取一些配置的微服务信息</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient client;</span><br><span class="line">    </span><br><span class="line"> <span class="comment">//注册进来的微服务，获取一些消息,向别人告诉这个微服务的信息</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/dept/discovery&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">discovery</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//获得微服务列表的清单</span></span><br><span class="line">        List&lt;String&gt; services = client.getServices();</span><br><span class="line">        System.out.println(<span class="string">&quot;discovery=&gt;services:&quot;</span>+services);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到一个具体的微服务信息,通过具体的微服务id</span></span><br><span class="line">        List&lt;ServiceInstance&gt; instances = client.getInstances(<span class="string">&quot;SPINGCLOUD-PROVIDER-DEPT&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (ServiceInstance instance : instances) &#123;</span><br><span class="line">            System.out.println(</span><br><span class="line">                    instance.getHost()+<span class="string">&quot;\t&quot;</span>+</span><br><span class="line">                    instance.getPort()+<span class="string">&quot;\t&quot;</span>+</span><br><span class="line">                    instance.getUri()+<span class="string">&quot;\t&quot;</span>+</span><br><span class="line">                    instance.getServiceId()</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.client;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>集群配置</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Eureka配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span> <span class="comment">#服务端的实例名称 eureka7001.com</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment">#表示向eureka注册中心注册自己</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment">#如果false 表示自己为注册中心</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment">#注册中心监控页面 默认是http://localhost:8761/eureka/</span></span><br><span class="line">      <span class="comment">#单机:defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br><span class="line">      <span class="comment">#集群(关联):defaultZone: http://eureka7002.com/eureka/</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure><h4 id="七、负载均衡及Ribbon"><a href="#七、负载均衡及Ribbon" class="headerlink" title="七、负载均衡及Ribbon"></a>七、负载均衡及Ribbon</h4><p><a href="D:\Data\Typora\资料库\部分名称详解">Spring Cloud Ribbon</a>是基于Netflix Ribbon实现的一套&#x3D;&#x3D;<strong>客户端负载均衡的工具</strong>&#x3D;&#x3D;</p><p>实现负载均衡机制：轮询、随机</p><ol><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Ribbon负载均衡--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写配置</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Eureka</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment">#不向Eureka中注册自己</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com/eureka/,http://eureka7002.com/eureka/,http://eureka7003.com/eureka/</span></span><br></pre></td></tr></table></figure></li><li><p>配置基于负载均衡实现RestTemplate</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置基于负载均衡实现RestTemplate</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span> <span class="comment">//Ribbon</span></span><br><span class="line"><span class="keyword">public</span> RestTemplate <span class="title function_">getRestTemplate</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>负载均衡自定义算法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//IRule</span></span><br><span class="line">    <span class="comment">//RoundRobinRule 轮询</span></span><br><span class="line">    <span class="comment">//RandomRule 随机</span></span><br><span class="line">    <span class="comment">//AvailabilityFilteringRule:会先过滤掉跳闸的访问故障的服务，对剩下的轮询</span></span><br><span class="line">    <span class="comment">//RetryRule:会先按照轮询获取服务,如果服务获取失败，则会在指定的时间内重试</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> IRule <span class="title function_">myRule</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomRule</span>();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//为保证微服务启动时就加载，需要放到一个与主类所在包同级的包内，避免被扫描到</span></span><br><span class="line"><span class="meta">@RibbonClient(name = &quot;SPRINGCLOUD-PROOVIDER-DEPT&quot;,configuration = XRule.class)</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="八、Feign负载均衡"><a href="#八、Feign负载均衡" class="headerlink" title="八、Feign负载均衡"></a>八、Feign负载均衡</h4><p>【ribbon】通过微服务名称来配置</p><p>【feign】通过接口和注解来配置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//api mudel添加service层</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;SPRINGCLOUD-PROVIDER-DEPT&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DeptClientService</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;dept/get/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addDept</span><span class="params">(Dept dept)</span>;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;dept/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Dept <span class="title function_">queryById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;dept/get/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Dept&gt; <span class="title function_">queryAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//主类配置注解</span></span><br><span class="line"><span class="meta">@EnableFeignClients(basePackages = &#123;&quot;com.xdj.springcloud&quot;&#125;)</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.xdj.springcloud&quot;)</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptConsumerController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DeptClientService service;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/dept/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(Dept dept)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> service.addDept(dept);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/dept/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Dept <span class="title function_">get</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> service.queryById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/dept/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Dept&gt; <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> service.queryAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="九、Hystrix：服务熔断"><a href="#九、Hystrix：服务熔断" class="headerlink" title="九、Hystrix：服务熔断"></a>九、Hystrix：服务熔断</h4><p>​<strong>服务雪崩</strong>：微服务之间的调用一旦中间一环出现问题，导致链路上所有环境崩溃。</p><p>​Hystix:是一个用于分布式系统的延迟和容错的开源库，在分布式系统里，许多依赖不可避免调用失败，能保证整体服务不会崩坏。避免级联故障，提高分布式系统的弹性</p><p>​<strong>当某一个服务单元发送故障时，通过断路器的故障监控，向调用方法返回一个服务预期的可处理的备选响应（FallBack）而不是长时间的等待或者抛出调用方法无法处理的异常，这样就可以保证了服务调用方的线程不会被长时间不必要的占用</strong></p><p>服务降级，服务熔断，服务限流，接近实时的监控</p><blockquote><p>&#x2F;&#x2F;在会熔断的地方加入这个注解，后面加上熔断了替代的方法</p><h4 style="color:green">@HystrixCommand(fallbackMethod = "hystrixGet")</h4></blockquote><ol><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Hystrix依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在主类添加断路器的支持</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableCircuitBreaker</span><span class="comment">//添加对熔断的支持</span></span><br></pre></td></tr></table></figure><blockquote><h1>服务降级</h1></blockquote><blockquote><h1>监控</h1></blockquote></li></ol><h4 id="十、Zuul路由网关"><a href="#十、Zuul路由网关" class="headerlink" title="十、Zuul路由网关"></a>十、Zuul路由网关</h4><h4 id="十一、config环境配置"><a href="#十一、config环境配置" class="headerlink" title="十一、config环境配置"></a>十一、config环境配置</h4>]]></content>
      
      
      <categories>
          
          <category> 框架功能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring 1.0</title>
      <link href="/2022/10/06/frame/Spring-1.0/"/>
      <url>/2022/10/06/frame/Spring-1.0/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><hr><p>​Spring是一个轻量级的JAVA开源框架，存放java对象的容器，需要把对象放入到容器中</p><p>​<strong>目的：</strong>解决企业开发的复杂性问题</p><p>​<u><strong>问题：</strong>存在大量的配置文件，十分复杂</u></p><p><img src="D:\Data\Typora\资料库\图纸\Spring七大核心模块.png"></p><table><thead><tr><th align="center"><a href="D:\Data\Typora\资料库\部分名称详解">Spring七大核心框架</a></th></tr></thead></table><hr><p>[TOC]</p><hr><h4 id="一、核心思想"><a href="#一、核心思想" class="headerlink" title="一、核心思想"></a>一、核心思想</h4><p>​(1) **<a href="D:\Data\Typora\资料库\部分名称详解">IOC</a>:**控制反转 实例化对象不是通过new，而是通过spring配置文件进行配置（applicationContext.xml）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">×User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">√<span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;bean.id&quot;</span>);</span><br><span class="line"><span class="comment">//bean.id为需要对象在spring配置文件中配置的对应对象bean的id</span></span><br></pre></td></tr></table></figure><p>​(2) **<a href="D:\Data\Typora\资料库\部分名称详解">AOP</a>:**面向切面编程（本质是动态代理）在不影响业务的情况下增加一些日志、事务的功能</p><h4 id="二、使用原理"><a href="#二、使用原理" class="headerlink" title="二、使用原理"></a>二、使用原理</h4><ol><li>将需要使用的对象放置于容器（applicationContext.xml）</li><li>让容器完成对象的创建</li><li>需要使用对象时从容器中获取</li></ol><h4 id="三、可放置的对象类型"><a href="#三、可放置的对象类型" class="headerlink" title="三、可放置的对象类型"></a>三、可放置的对象类型</h4><ol><li><p>dao类，service类，controller类，工具类</p><ul><li><p>使用xml配置文件，使用<bean></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xdj.pojo.Dog&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>注解</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启注解 实现自动装配--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>spring中的对象默认都是单例的，在容器中叫这个名称的对象只能有一个</p></li></ol><h4 id="四、不可放置的对象类型"><a href="#四、不可放置的对象类型" class="headerlink" title="四、不可放置的对象类型"></a>四、不可放置的对象类型</h4><ol><li>实体类对象，实体类数据来源于数据库</li><li>servlet,listener,filter等</li></ol><h4 id="五、使用框架步骤"><a href="#五、使用框架步骤" class="headerlink" title="五、使用框架步骤"></a>五、使用框架步骤</h4><ol><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--只使用Spring,该包在spring-webmvc中也有--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--使用spring创建web项目--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建类：接口，实现类，没有接口的类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实体类</span></span><br><span class="line"><span class="keyword">public</span> Class User&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"><span class="keyword">public</span> String getUserName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接口实现</span></span><br><span class="line"><span class="keyword">public</span> Class UserDaoImpl <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;</span><br><span class="line"></span><br><span class="line">User user;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String getUserName&#123;</span><br><span class="line"><span class="keyword">return</span> user.gerName();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建spring的配置文件（applicationContext.xml），使用<bean>声明对象</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定要扫描的包，这个包下面的注解就会生效--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.xdj.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xdj.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在这里加入内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xdj.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>我们使用容器中的对象，通过ApplicationContext接口和它的实现类ClassPathXmlApplicationContext的方法getBean()</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取上下文内容</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"><span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> (cat)context.getBean(<span class="string">&quot;cat&quot;</span>);</span><br></pre></td></tr></table></figure></li></ol><h4 id="六、配置文件相关属性"><a href="#六、配置文件相关属性" class="headerlink" title="六、配置文件相关属性"></a>六、配置文件相关属性</h4><ol><li><p><strong>概念</strong>：指导开发人员在容器中，代码之外管理对象，给属性赋值，管理依赖。spring使用的di的技术，底层使用的是反射机制</p></li><li><p>给属性赋值</p><ul><li><p>set注入：spring调用类的set方法实现属性赋值</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在这里加入内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xdj.pogo.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--基本数据类型--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;夏杜键&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--引用类型--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数组类型--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;books&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>红楼梦<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>三国演义<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>水浒传<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--list--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbys&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>听歌<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>跑步<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>打豆豆<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Map--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;身份证&quot;</span> <span class="attr">value</span>=<span class="string">&quot;330682199903125934&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;联系方式&quot;</span> <span class="attr">value</span>=<span class="string">&quot;17815938600&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Set--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;games&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>戴俊峰<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>LOL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--null--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;wife&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Properties--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;学号&quot;</span>&gt;</span>2028510186<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;性别&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>构造注入：spring调用有参数构造方法</p></li></ul></li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--&lt;constructor-arg&gt;的index属性，表示构造方法形参的位置，从0开始--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xdj.pogo.User&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;夏杜键&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--1&lt;constructor-arg&gt;的name属性，name表示构造方法的形参名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xdj.pogo.User&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;夏杜键&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 框架功能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring 2.0</title>
      <link href="/2022/10/06/frame/Spring-2.0/"/>
      <url>/2022/10/06/frame/Spring-2.0/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-self"><a href="#Spring-self" class="headerlink" title="Spring self"></a>Spring self</h1><hr><p>[TOC]</p><hr><h2 id="pom文件"><a href="#pom文件" class="headerlink" title="pom文件"></a>pom文件</h2><p>maven能帮你构建工程，管理jar包，编译代码，还能帮你自动运行单元测试，打包，生成报表，甚至能帮你部署项目</p><h4 id="一、文件模板"><a href="#一、文件模板" class="headerlink" title="一、文件模板"></a>一、文件模板</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="二、基本属性及含义"><a href="#二、基本属性及含义" class="headerlink" title="二、基本属性及含义"></a>二、基本属性及含义</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--groupId一般分为多个段，这里我只说两段，第一段为域，第二段为公司名称。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Module模块名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>01.Start-Spring-Boot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--版本号--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--项目打包类型【默认：jar类型】 jar包【内部调用或者是做服务使用】 war包【需要部署的项目】 pom【父类型都为pom类型】--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引用pom文件，使用其中的所有依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置文件格式，java版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--效果与-配置java版本-&lt;java.version&gt;1.8&lt;/java.version&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--build资源插件编码格式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--插件输出报告格式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--该Maven项目所添加的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring-boot集成web的启动器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring-boot测试启动器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--使用远程仓库，提高依赖下载速率--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--plugin:插件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--能够以Maven的方式为应用提供Spring Boot的支持，即为Spring Boot应用提供了执行Maven操作的可能。--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="基础Config配置"><a href="#基础Config配置" class="headerlink" title="基础Config配置"></a>基础Config配置</h2><p>Spring配置问价application.properties中可配置的所有属性：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html">Common Application Properties (spring.io)</a></p><blockquote><h2 style="color:green">application.yml也可以实现该功能</h2><p style="color:blue">@ConfigurationProperties(prefix = "yml中对应属性")</p><p style="color:blue">@Value("${yml中对应属性}")</p><p>下面这个注解只适用于properties文件</p><p style="color:blue">@PropertySource(value = "classpath:test.properties",encoding = "UTF-8")</p></blockquote><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#主文件配置使用的端口</span></span><br><span class="line"><span class="attr">spring.profiles.active</span>=<span class="string">pro</span></span><br><span class="line"><span class="comment">#端口设定</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8080</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 框架功能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud 2.0</title>
      <link href="/2022/10/06/frame/SpringCloud-2.0/"/>
      <url>/2022/10/06/frame/SpringCloud-2.0/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h1><h2 id="实验环境版本"><a href="#实验环境版本" class="headerlink" title="实验环境版本"></a>实验环境版本</h2><p>Release Train Version: <strong>Hoxton.SR1</strong></p><p>Supported Boot Version: <strong>2.4.6</strong></p><blockquote><h4>端口集</h4><p>80    ：浏览器默认端口，一般用作客户端</p><p>800X：服务端</p><p>700X：Eureka服务发现</p><p>9001：hystrix服务状态监测</p><p>9527：Gateway路由端</p><p>3344：Config配置中心服务端</p><p>9411：zipkin服务链路追踪</p></blockquote><p>![](D:\Data\Typora\资料库\图纸\Spring Cloud服务技术.png)</p><hr><p>[TOC]</p><hr><h2 id="一、父Maven依赖"><a href="#一、父Maven依赖" class="headerlink" title="一、父Maven依赖"></a>一、父Maven依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--dependencyManagement  子模块继承之后，提供作用: 锁定版本+子模块不用写groupId和version--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--dependencies--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--Spring Boot 2.2.2.RELEASE--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--Spring Cloud Hoxton.SR1--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>Hoxton.SR1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--Spring Cloud alibaba 2.1.0.RELEASE--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--mysql 8.0.26--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--druid 1.1.21--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--MyBatis 2.2.0--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二、微服务模块构建"><a href="#二、微服务模块构建" class="headerlink" title="二、微服务模块构建"></a>二、微服务模块构建</h2><ol><li><p>建module（数据库环境）</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数据库配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">newpassword</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/bookstore?useUnicod=true&amp;characterEncoding=utf-8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br></pre></td></tr></table></figure></li><li><p>改pom</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--actuator是监控系统健康情况的工具--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--true:表示当前依赖不向下传递--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>写yml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Cloud-payment-service</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span>  <span class="comment">#当前数据源操作类型</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span>   <span class="comment">#mysql驱动包</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/sc2021?useUnicod=true&amp;characterEncoding=utf-8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">newpassword</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span>  <span class="comment">#mapper映射文件所在包</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.xve.springcloud.pojo</span>  <span class="comment">#实体类所在包</span></span><br></pre></td></tr></table></figure></li><li><p>主启动</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在com.xve.springcloud包下创建主启动类</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentMain8001</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>业务类</p><ol><li><p>建表</p></li><li><p>pojo实体类</p><ol><li><p>对应数据库实体的类</p></li><li><p>对应前端的json封装类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonResult</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CommonResult</span><span class="params">(Integer code,String message)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>(code,message,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>dao层</p><ol><li><p>接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PaymentDao</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">create</span><span class="params">(Payment payment)</span>;</span><br><span class="line">    Payment <span class="title function_">getPaymentById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>mapper映射</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//En&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.xve.springcloud.dao.PaymentDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--useGeneratedKeys是否返回值   keyProperty主键--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;create&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Payment&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">        insert into db01.payment(id, serial) VALUES (#&#123;id&#125;,#&#123;serial&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.xve.springcloud.pojo.Payment&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--column:数据库内名    property:实体类中名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;serial&quot;</span> <span class="attr">property</span>=<span class="string">&quot;serial&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getPaymentById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Long&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BaseResultMap&quot;</span>&gt;</span></span><br><span class="line">        select * from db01.payment where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>service层</p></li><li><p>controller层</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span>  <span class="comment">//日志</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;payment/create&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">create</span><span class="params">(Payment payment)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> paymentService.create(payment);</span><br><span class="line">        log.info(<span class="string">&quot;*******插入结果为:&quot;</span>+result);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="number">200</span>,<span class="string">&quot;插入成功&quot;</span>,result);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="number">444</span>,<span class="string">&quot;插入失败&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;</span><br><span class="line">        <span class="type">Payment</span> <span class="variable">payment</span> <span class="operator">=</span> paymentService.getPaymentById(id);</span><br><span class="line">        log.info(<span class="string">&quot;*******插入结果为:&quot;</span>+payment);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (payment!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="number">200</span>,<span class="string">&quot;查询成功&quot;</span>,payment);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="number">444</span>,<span class="string">&quot;查询失败&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试</p><blockquote><h4 style="color:green">postman工具测试</h4></blockquote></li><li><p>热部署</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--热部署依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--热部署插件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">addResources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addResources</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用RestTemplate连接本地其他端口内容&#x3D;&#x3D;RestTemplate详见第七章&#x3D;&#x3D;</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RestTemplate <span class="title function_">getRestTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PAYMENT_URL</span> <span class="operator">=</span> <span class="string">&quot;http://localhost:8001&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/create&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title function_">create</span><span class="params">(Payment payment)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.postForObject(PAYMENT_URL+<span class="string">&quot;/payment/create&quot;</span>,payment,CommonResult.class);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title function_">getPayment</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(PAYMENT_URL+<span class="string">&quot;/payment/get/&quot;</span>+id,CommonResult.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="三、工程重构"><a href="#三、工程重构" class="headerlink" title="三、工程重构"></a>三、工程重构</h2><p>创建一个api module项目，设置接口等重复资源</p><p>将该项目以pom依赖的方式导入到其他项目之中以供使用</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xve.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud_api_commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="四、Eureka服务注册与发现"><a href="#四、Eureka服务注册与发现" class="headerlink" title="四、Eureka服务注册与发现"></a>四、Eureka服务注册与发现</h2><p><strong>什么是服务治理：</strong></p><p>​在传统的RPC远程调用框架中，管理每个服务与服务之间的依赖关系比较复杂，管理比较复杂，所以需要使用服务治理，管理服务于服务之间依赖关系，可以实现服务调用，负载均衡，容错等，实现服务发现与注册</p><p><strong>什么是服务注册：</strong></p><p>​Euere是AP，高可用与可伸缩的Service发现服务，突出可用性。相对于Zookeeper而言，可能返回数据没有一致性，但是保证能够返回数据，服务是可用的。</p><p><strong>Eureka包含两个组件：</strong></p><ol><li>Eureka Server：各个微服务节点通过配置启动后，会在EurekaServer中进行注册，这样EurekaServer中的服务注册表中将会存储所有可用服务节点的信息，服务节点的信息可以在界面中直接观看。</li><li>EurekaClient：是一个java客户端，用于简化Eureka Server的交互，客户端同时也具备一个内置的、使用轮询（round-robin）负载算法的负载均衡器。在应用启动后，将会向Eureka Server发送心跳（默认周期30秒）。如果Eureka Server在多个心跳周期内没有接收到某一个节点的心跳，Eureka Server将会从服务注册表中把这个服务节点移除（默认90秒）</li></ol><hr><h3 id="单机版"><a href="#单机版" class="headerlink" title="单机版"></a>单机版</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--eureka-server--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Eureka-client--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注册中心主启动类</strong>添加注解：@EnableEurekaServer</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#添加eureka配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span>             <span class="comment">#eureka服务端的实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span>     <span class="comment">#false表示不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span>           <span class="comment">#false表示自己端就是注册中心，职责就是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">service-url:</span>                    <span class="comment">#设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure><p><strong>服务注册到注册中心</strong>添加注解：@EnableEurekaClient</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Cloud-payment-service</span><span class="comment">#该name就是注册进eureka注册中心的名字</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span>                    <span class="comment">#true 表示将自己注册进EurekaServer（默认为true）</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span>                          <span class="comment">#true 从EUrekaServer获取已有的注册信息（默认为true） 单节点可不设置，集群必须设置为true才能配合ribbon使用负载均衡</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br></pre></td></tr></table></figure><hr><h3 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h3><p>微服务RPC远程服务调用最核心的是什么：<strong>高可用</strong>不能因为一个服务中心故障了就整个项目崩溃了。&#x3D;&#x3D;多个服务器相互注册，相互引用&#x3D;&#x3D;</p><p><strong>注册服务中心</strong>：多个注册中心互相注册</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7002</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">activate.navicat.com</span>             <span class="comment">#eureka服务端的实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span>     <span class="comment">#false表示不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span>           <span class="comment">#false表示自己端就是注册中心，职责就是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">service-url:</span>                    <span class="comment">#设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka/</span></span><br></pre></td></tr></table></figure><p><strong>服务端</strong>：多个服务</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span>                    <span class="comment">#true 表示将自己注册进EurekaServer（默认为true）</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span>                          <span class="comment">#true 从EUrekaServer获取已有的注册信息（默认为true） 单节点可不设置，集群必须设置为true才能配合ribbon使用负载均衡</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#defaultZone: http://localhost:7001/eureka</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://activate.navicat.com:7002/eureka/,http://localhost:7001/eureka/</span> <span class="comment">#集群版</span></span><br></pre></td></tr></table></figure><p><strong>客户端</strong>：controller</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单机版</span></span><br><span class="line"><span class="comment">//public static final String PAYMENT_URL = &quot;http://localhost:8001&quot;;</span></span><br><span class="line"><span class="comment">//服务器集群</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PAYMENT_URL</span> <span class="operator">=</span> <span class="string">&quot;http://CLOUD-PAYMENT-SERVICE&quot;</span>;</span><br></pre></td></tr></table></figure><blockquote><p style="color:red">因为没有负载均衡的机制，所以访问时不知道访问哪一个服务端，就会报错</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//要在RestTemplated的配置Bean上添加注解@LoadBalanced，加载Eureka默认的负载均衡机制（轮询）</span></span><br></pre></td></tr></table></figure><h3 id="服务中心配置"><a href="#服务中心配置" class="headerlink" title="服务中心配置"></a>服务中心配置</h3><ol><li><p>主机名：服务名称修改</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">payment8001</span></span><br></pre></td></tr></table></figure></li><li><p>访问信息有IP信息提示</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span>                       <span class="comment">#访问路径可以显示IP地址</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="服务发现Discovery"><a href="#服务发现Discovery" class="headerlink" title="服务发现Discovery"></a>服务发现Discovery</h3><p><strong>启动类注释</strong>：@EnableDiscoveryClient</p><p><strong>客户端</strong>：controller</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/payment/discovery&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">discovery</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;String&gt; services = discoveryClient.getServices();</span><br><span class="line">    <span class="keyword">for</span>(String element : services)&#123;</span><br><span class="line">        log.info(<span class="string">&quot;******element: &quot;</span>+element+<span class="string">&quot;******&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">&quot;CLOUD-PAYMENT-SERVICE&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(ServiceInstance instance : instances)&#123;</span><br><span class="line">        log.info(instance.getServiceId()+<span class="string">&quot;\t&quot;</span>+instance.getHost()+<span class="string">&quot;\t&quot;</span>+instance.getPort()+<span class="string">&quot;\t&quot;</span>+instance.getUri());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.discoveryClient;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Eureka自我保护"><a href="#Eureka自我保护" class="headerlink" title="Eureka自我保护"></a>Eureka自我保护</h3><p>某时刻某一个服务不可用了，Eureka不会立即清理，依旧会对该微服务的信息进行保存</p><p>属于CAP中的AP分支</p><p><strong>关闭自我保护</strong>：默认是开启的</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span> <span class="comment">#关闭自我保护机制，保证不可用服务被删除</span></span><br><span class="line">    <span class="attr">eviction-interval-timer-in-ms:</span> <span class="number">2000</span> <span class="comment">#间隔</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">1</span>          <span class="comment">#Eureka客户端向服务端发送心跳的时间间隔，单位/s默认（30）</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">2</span>       <span class="comment">#Eureka服务端在收到最后以此心跳后等待时间上线，单位/s默认（90），超时剔除服务</span></span><br></pre></td></tr></table></figure><h2 id="五、Zookeeper服务注册与发现"><a href="#五、Zookeeper服务注册与发现" class="headerlink" title="五、Zookeeper服务注册与发现"></a>五、Zookeeper服务注册与发现</h2><p>属于CAP中的CP分支</p><p><strong>启动类</strong>：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span>  <span class="comment">//该注解用于向使用consul或者zookeeper作为注册中心时注册服务</span></span><br></pre></td></tr></table></figure><p><strong>YML配置文件</strong>：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-provider-payment</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">zookeeper:</span></span><br><span class="line">      <span class="attr">connect-string:</span> <span class="number">192.168</span><span class="number">.111</span><span class="number">.144</span><span class="string">:2181</span>    <span class="comment">#zookeeper的端口号  127.0.0.1:2181</span></span><br></pre></td></tr></table></figure><p><strong>Controller</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/payment/zk&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">paymentZk</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;springcloud with zookeeper : &quot;</span> +serverPort + <span class="string">&quot;\t&quot;</span> + UUID.randomUUID().toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、Consul服务注册与发现"><a href="#六、Consul服务注册与发现" class="headerlink" title="六、Consul服务注册与发现"></a>六、Consul服务注册与发现</h2><p>Consul是一套开源的分布式<strong>服务发现</strong>和<strong>配置管理</strong>系统，由HashiCorp公司用go语言开发</p><p>​提供了微服务系统中的<strong>服务治理</strong>、<strong>配置中心</strong>、<strong>控制总线</strong>等功能，这些功能中的每一个都可以根据需要单独使用，也可以一起使用以构建全方位的服务网络，总之Consul提供了一种完整的服务网格解决方案</p><p>​&#x3D;&#x3D;优点&#x3D;&#x3D;：基于raft协议，比较简洁；支持健康检查，同时支持HTTP和DNS协议，支持跨数据中心的WAN集群 提供图形界面 跨平台，支持Linux&#x2F;Mac&#x2F;Windows</p><p>启动Consul的cmd命令</p><blockquote><h4>consul agent -dev -ui -node=cy</h4></blockquote><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--SpringCloud consul-server--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8006</span>    <span class="comment">#consul服务端口号</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consul-provider-payment</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">##consul注册中心地址</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">service-name:</span> <span class="string">$&#123;spring.application.name&#125;</span>  <span class="comment">#hostname 127.0.0.1</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentController</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/payment/consul&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentConsul</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;springcloud with consul : &quot;</span> +serverPort + <span class="string">&quot;\t&quot;</span> + UUID.randomUUID().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span>  <span class="comment">//该注解用于向使用consul或者zookeeper作为注册中心时注册服务</span></span><br></pre></td></tr></table></figure><hr><h3 id="Eureka-x2F-zookeeper-x2F-Consul三者区别"><a href="#Eureka-x2F-zookeeper-x2F-Consul三者区别" class="headerlink" title="Eureka&#x2F;zookeeper&#x2F;Consul三者区别"></a>Eureka&#x2F;zookeeper&#x2F;Consul三者区别</h3><table><thead><tr><th>组件名</th><th>语言</th><th>CAP</th><th>服务健康检查</th><th>对外暴露接口</th><th>Spring Cloud 集成</th></tr></thead><tbody><tr><td>Eureka</td><td>Java</td><td>AP</td><td>可配支持</td><td>HTTP</td><td>已集成</td></tr><tr><td>Consul</td><td>Go</td><td>CP</td><td>支持</td><td>HTTP&#x2F;DNS</td><td>已集成</td></tr><tr><td>Zookeeeper</td><td>Java</td><td>CP</td><td>支持</td><td>客户端</td><td>已集成</td></tr></tbody></table><p>cap原理，可以参考：<a href="http://www.ruanyifeng.com/blog/2018/07/cap.html%E3%80%82">http://www.ruanyifeng.com/blog/2018/07/cap.html。</a></p><p><strong>P:Partition tolerance</strong>,网络分区容错。类似多机房部署，保证服务稳定性。<br><strong>A: Availability</strong>，可用性。<br><strong>C:Consistency</strong> ，一致性。<br>&#x3D;&#x3D;CAP定理：CAP三个属性对于分布式系统不能同时做到。&#x3D;&#x3D;</p><ol><li>CA：单点集群，满足一致性，可用性的系统，通常在可扩展性上不太强大</li><li>CP：满足一致性，分区容忍性的系统，通常性能不是特别高</li><li>AP：满足高可用，分区容忍性的系统，通常可能对一致性要求低</li></ol><h2 id="七、Ribbon负载均衡服务调用"><a href="#七、Ribbon负载均衡服务调用" class="headerlink" title="七、Ribbon负载均衡服务调用"></a>七、Ribbon负载均衡服务调用</h2><p>Spring Cloud Ribbon 是基于Netflix Ribbon实现的一套客户端，&#x3D;&#x3D;负载均衡的工具：&#x3D;&#x3D;算法和服务调用</p><blockquote><p style="color:blue">Ribbon本地负载均衡客户端 VS Nginx服务端负载均衡区别</p><p><strong>进程内（逻辑集成到消费方进程）</strong>：Nginx是服务器负载均衡，客户端所有请求都会交给nginx，然后由nginx实现转发请求，即负载均衡由<span style="color:red">服务端实现</span></p><p><strong>集中式（独立的LB设施）</strong>：Ribbon本地负载均衡，在调用微服务接口时，会在注册中心上获取注册信息服务列表之后缓存到JVM本地，从而在<span style="color:red">本地实现</span>RPC远程服务调用技术</p></blockquote><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Ribbon依赖，在Eureka客户端依赖下，自带了ribbon的依赖，所以可以不加--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><h2>可能会出现该错误：<span style="color:red">No instances available for CLOUD-PAYMENT-SERVICE</span></h2></blockquote><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--解决方式，Spring boot 或者 Spring Cloud版本问题--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="RestTemplate调用"><a href="#RestTemplate调用" class="headerlink" title="RestTemplate调用"></a>RestTemplate调用</h3><ol><li><p>getForObject()返回对象为响应体中数据转化成的对象，基本上可以理解为JSON</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> restTemplate.getForObject(PAYMENT_URL+<span class="string">&quot;/payment/get/&quot;</span>+id,CommonResult.class);</span><br></pre></td></tr></table></figure></li><li><p>getForEntity(“localhost:8080&#x2F;get&#x2F;resoult”)     返回对象为ResponseEntity对象，包含了响应中的一些重要信息，比如响应头、响应状态码、响应体等</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ResponseEntity&lt;CommonResult&gt; entity = restTemplate.getForEntity(PAYMENT_URL+<span class="string">&quot;/payment/get/&quot;</span>+id,CommonResult.class);</span><br><span class="line"><span class="keyword">if</span> (entity.getStatusCode().is2xxSuccessful())&#123;</span><br><span class="line"><span class="keyword">return</span> entity.getBody();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>&lt;&gt;(<span class="number">444</span>,<span class="string">&quot;操作失败&quot;</span>);</span><br></pre></td></tr></table></figure></li></ol><p><img src="D:\Data\Typora\资料库\图纸\Ribbon负载均衡几种策略.png"></p><p>&#x3D;&#x3D;七种负载均衡&#x3D;&#x3D;除以上六种外，还有一种默认规则，符合判断server所在区域的性能和server的可用性选择服务器</p><h3 id="配置存在的负载均衡方式"><a href="#配置存在的负载均衡方式" class="headerlink" title="配置存在的负载均衡方式"></a>配置存在的负载均衡方式</h3><blockquote><h4 style="color:red">注意不能将该方式定义的类放置在主类@ComponentScan能扫描到的包下</h4></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置自定义负载方式</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySelfRule</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> IRule <span class="title function_">myRule</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomRule</span>();<span class="comment">//定义为随机</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//启动类添加注解</span></span><br><span class="line"><span class="meta">@RibbonClient(name = &quot;CLOUD-PAYMENT-SERVICE&quot;,configuration = MySelfRule.class)</span></span><br></pre></td></tr></table></figure><h3 id="默认负载轮询算法原理"><a href="#默认负载轮询算法原理" class="headerlink" title="默认负载轮询算法原理"></a>默认负载轮询算法原理</h3><p>rest接口第几次请求数%服务器集群总数量 &#x3D; 实际调用服务器位置下标 （每次重启服务后rest接口计数从1开始）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现获取了所有服务名为CLOUD-PAYMENT-SERVICE的服务</span></span><br><span class="line">List&lt;ServiceInstance&gt; list = discoveryClient.getInstances(<span class="string">&quot;CLOUD-PAYMENT-SERVICE&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="RoundRobinRule源码分析"><a href="#RoundRobinRule源码分析" class="headerlink" title="RoundRobinRule源码分析"></a>RoundRobinRule源码分析</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Copyright 2013 Netflix, Inc.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.netflix.loadbalancer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.client.config.IClientConfig;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The most well known and basic load balancing strategy, i.e. Round Robin Rule.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> stonse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nikos Michalakis &lt;nikos@netflix.com&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RoundRobinRule</span> <span class="keyword">extends</span> <span class="title class_">AbstractLoadBalancerRule</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AtomicInteger nextServerCyclicCounter;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">AVAILABLE_ONLY_SERVERS</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">ALL_SERVERS</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(RoundRobinRule.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RoundRobinRule</span><span class="params">()</span> &#123;</span><br><span class="line">        nextServerCyclicCounter = <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RoundRobinRule</span><span class="params">(ILoadBalancer lb)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>();</span><br><span class="line">        setLoadBalancer(lb);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Server <span class="title function_">choose</span><span class="params">(ILoadBalancer lb, Object key)</span> &#123;</span><br><span class="line">        <span class="comment">//lb是一个负载均衡方式接口，如果不存在负载均衡的方式，就返回一个NULL</span></span><br><span class="line">        <span class="keyword">if</span> (lb == <span class="literal">null</span>) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;no load balancer&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//集群中的服务端口在判断前未知</span></span><br><span class="line">        <span class="type">Server</span> <span class="variable">server</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//如果服务为空且总数小于10</span></span><br><span class="line">        <span class="keyword">while</span> (server == <span class="literal">null</span> &amp;&amp; count++ &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="comment">//获取可达的健康的服务</span></span><br><span class="line">            List&lt;Server&gt; reachableServers = lb.getReachableServers();</span><br><span class="line">            <span class="comment">//获取所有服务</span></span><br><span class="line">            List&lt;Server&gt; allServers = lb.getAllServers();</span><br><span class="line">            <span class="comment">//计算健康的服务总数</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">upCount</span> <span class="operator">=</span> reachableServers.size();</span><br><span class="line">            <span class="comment">//计算全部服务总数</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">serverCount</span> <span class="operator">=</span> allServers.size();</span><br><span class="line"><span class="comment">//如果健康的服务个数为0或者服务总数为0 显示日志 返回NULL</span></span><br><span class="line">            <span class="keyword">if</span> ((upCount == <span class="number">0</span>) || (serverCount == <span class="number">0</span>)) &#123;</span><br><span class="line">                <span class="comment">//日志显示：没有可用服务用以负载均衡</span></span><br><span class="line">                log.warn(<span class="string">&quot;No up servers available from load balancer: &quot;</span> + lb);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获得下一个要获得的服务在服务列表中的下标</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">nextServerIndex</span> <span class="operator">=</span> incrementAndGetModulo(serverCount);</span><br><span class="line">            <span class="comment">//从全部服务中得到指定下标的服务</span></span><br><span class="line">            server = allServers.get(nextServerIndex);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (server == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">/* Transient. */</span></span><br><span class="line">                Thread.yield();</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (server.isAlive() &amp;&amp; (server.isReadyToServe())) &#123;</span><br><span class="line">                <span class="keyword">return</span> (server);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Next.</span></span><br><span class="line">            server = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (count &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;No available alive servers after 10 tries from load balancer: &quot;</span></span><br><span class="line">                    + lb);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> server;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Inspired by the implementation of &#123;<span class="doctag">@link</span> AtomicInteger#incrementAndGet()&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modulo The modulo to bound the value of the counter.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The next value.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">incrementAndGetModulo</span><span class="params">(<span class="type">int</span> modulo)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">current</span> <span class="operator">=</span> nextServerCyclicCounter.get();</span><br><span class="line">            <span class="type">int</span> <span class="variable">next</span> <span class="operator">=</span> (current + <span class="number">1</span>) % modulo;</span><br><span class="line">            <span class="keyword">if</span> (nextServerCyclicCounter.compareAndSet(current, next))</span><br><span class="line">                <span class="keyword">return</span> next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Server <span class="title function_">choose</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> choose(getLoadBalancer(), key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initWithNiwsConfig</span><span class="params">(IClientConfig clientConfig)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="手写轮询算法步骤"><a href="#手写轮询算法步骤" class="headerlink" title="手写轮询算法步骤"></a>手写轮询算法步骤</h3><ol><li><p>去除RestTemplate组件定义处的&#x3D;&#x3D;@LoadBalanced&#x3D;&#x3D;</p></li><li><p><strong>定义接口&#x2F;实现</strong>：获取Eureka上所有服务</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLB</span> <span class="keyword">implements</span> <span class="title class_">LoadBalancer</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">AtomicInteger</span> <span class="variable">atomicInteger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getAndIncrement</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span> current;</span><br><span class="line">        <span class="type">int</span> next;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            current = <span class="built_in">this</span>.atomicInteger.get();</span><br><span class="line">            next = current &gt;= Integer.MAX_VALUE ? <span class="number">0</span> : current+<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">while</span> (!<span class="built_in">this</span>.atomicInteger.compareAndSet(current,next));</span><br><span class="line">        System.out.println(<span class="string">&quot;next:&quot;</span>+next);</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ServiceInstance <span class="title function_">instances</span><span class="params">(List&lt;ServiceInstance&gt; serviceInstances)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> getAndIncrement() % serviceInstances.size();</span><br><span class="line">        <span class="keyword">return</span> serviceInstances.get(index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>controller中使用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/consumer/payment/lb&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPaymentLB</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">&quot;CLOUD-PAYMENT-SERVICE&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(instances == <span class="literal">null</span> || instances.size()&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ServiceInstance</span> <span class="variable">serviceInstance</span> <span class="operator">=</span> loadBalancer.instances(instances);</span><br><span class="line">        <span class="type">URI</span> <span class="variable">uri</span> <span class="operator">=</span> serviceInstance.getUri();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(uri+<span class="string">&quot;/payment/lb&quot;</span>,String.class);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="八、OpenFeign服务接口调用"><a href="#八、OpenFeign服务接口调用" class="headerlink" title="八、OpenFeign服务接口调用"></a>八、OpenFeign服务接口调用</h2><p>Feign是一个声明式WebService客户端，使用Feign能让编写Web Service客户端更为简单</p><p><strong>使用方法</strong>：定义一个服务接口，然后在接口上面添加注解</p><p><strong>封装</strong>：Ribbon+RestTemplate,利用RestTemplate对http请求的封装处理</p><blockquote><p style="color:red">往往一个接口会被多处调用，所以通常都会针对每一个微服务自行封装一些客户端类来包装这些依赖服务</p><p><span style="color:red">我们只需要创建一个接口并用注解的方式类配置它</span>类似dao层接口调用@Mapper注解</p></blockquote><p>&#x3D;&#x3D;Feign集成了Ribbon&#x3D;&#x3D; 通过Feign只需要通过定义服务绑定接口且以声明式的方法，优雅而简单的实现了服务调用.同时具备<strong>负载均衡</strong></p><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><ol><li><p>Feign是使用在消费端，添加依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--OpenFeign--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>YML文件</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span> </span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://activate.navicat.com:7002/eureka/,http://localhost:7001/eureka/</span></span><br></pre></td></tr></table></figure></li><li><p>在主启动类开启Fegin</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients</span></span><br></pre></td></tr></table></figure></li><li><p>添加service层接口服务（此服务非彼服务，调用Ribbon和RestTemplate组件）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="comment">//找相应的微服务名称</span></span><br><span class="line"><span class="meta">@FeignClient(&quot;CLOUD-PAYMENT-SERVICE&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PaymentFeignService</span> &#123;</span><br><span class="line">    <span class="comment">//与对应微服务controller层调用方法一致</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    CommonResult&lt;Payment&gt; <span class="title function_">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>controller控制层</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderFeignController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PaymentFeignService paymentFeignService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title function_">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> paymentFeignService.getPaymentById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="OpenFeign超时控制"><a href="#OpenFeign超时控制" class="headerlink" title="OpenFeign超时控制"></a>OpenFeign超时控制</h3><p>Openfeign-ribbon,客户端一般默认等待1秒（测试方式，在服务端加一个线程超过1秒的服务，在客户端使用该服务）</p><blockquote><h4 style="color:red">Read timed out executing GET http://CLOUD-PAYMENT-SERVICE/payment/feign/timeout</h4></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置feign客户端超时时间（OpenFeign默认支持Ribbon）</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="comment">#指的是建立连接所用的时间，适用于网络状况正常的情况下，两端连接所用的时间</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">5000</span></span><br><span class="line">  <span class="comment">#指的是建立连接后从服务器读取到可用资源所用的时间</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">5000</span></span><br></pre></td></tr></table></figure><h3 id="OpenFeign日志打印功能"><a href="#OpenFeign日志打印功能" class="headerlink" title="OpenFeign日志打印功能"></a>OpenFeign日志打印功能</h3><table><thead><tr><th align="left">级别</th><th align="left">范围</th></tr></thead><tbody><tr><td align="left">NONE</td><td align="left">默认：不显示任何日志</td></tr><tr><td align="left">BASIC</td><td align="left">仅记录请求方式、URL、响应状态码及执行时间</td></tr><tr><td align="left">HEADERS</td><td align="left">除了BASIC中定义的信息外，还有请求和响应的头信息</td></tr><tr><td align="left">FULL</td><td align="left">除了HEADERS中定义的信息之外，还有请求和响应的正文及元数据</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FeignConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Logger.Level <span class="title function_">feignLoggerLevel</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span> </span><br><span class="line">    <span class="comment">#feign日志以什么级别监控哪个接口</span></span><br><span class="line">    <span class="attr">com.xve.springcloud.service.PaymentFeignService:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><h2 id="九、Hystrix断路器"><a href="#九、Hystrix断路器" class="headerlink" title="九、Hystrix断路器"></a>九、Hystrix断路器</h2><p>​多个微服务调用，其中一个或若干个服务故障，导致整个服务失败，为避免出现这种&#x3D;&#x3D;级联故障&#x3D;&#x3D;，提高分布式系统的弹性</p><p>​当某个服务单元发生故障之后，通过断路器的故障监控（类似熔断保险丝）向调用方返回一个符合预期的、可处理的<strong>备选响应（FallBack）</strong>,而不是长时间等待或者抛出调用方法无法处理的异常。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--hystrix 服务端--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><h2 style="color:green">添加正确运行的服务方法-->添加错误运行的服务方法-->降级熔断-->恢复</h2></blockquote><p><strong>使用Apache JMeter可以进行多线程高并发测试</strong></p><hr><h3 id="服务降级（一般用于客户端）"><a href="#服务降级（一般用于客户端）" class="headerlink" title="服务降级（一般用于客户端）"></a>服务降级（一般用于客户端）</h3><p>&#x3D;&#x3D;@HystrixCommand&#x3D;&#x3D;</p><ol><li><p>服务端降级</p><ul><li><p>业务类：对需要提供服务降级的方法添加<strong>注解</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//会报错的方法</span></span><br><span class="line">    <span class="comment">//会报错的方法  该线程正常访问时间应为3秒内</span></span><br><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;paymentInfo_ERRORHandler&quot;,commandProperties = &#123;</span></span><br><span class="line"><span class="meta">    @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;,value = &quot;3000&quot;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">paymentInfo_ERROR</span><span class="params">(Integer id)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">timeNumber</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(timeNumber);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;线程池:&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot; paymentInfo_ERROE,id&quot;</span>+id+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;O(∩_∩)O哈哈~&quot;</span>+<span class="string">&quot;耗时3秒&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">paymentInfo_ERRORHandler</span><span class="params">(Integer id)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;线程池:&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot; paymentInfo_ERROEHandler,id&quot;</span>+id+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;/(ㄒoㄒ)/&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在主启动类上添加启动注解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableCircuitBreaker</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>客户端降级</p><ul><li><p>配置yml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>主启动类添加启动注解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//该注解中自带了@EnableCircuitBreaker注解，所以作用一样</span></span><br><span class="line"><span class="meta">@EnableHystrix</span></span><br></pre></td></tr></table></figure></li><li><p>controller层与上方服务端业务类一致</p></li></ul></li></ol><blockquote><h4 style="color:green">上述方式存在问题：代码的膨胀，兜底方法和业务方法混在一起</h4><div> <p style="color:blue">     代码膨胀问题：作用于客户端的controller层 </p> <p>     除个别重要核心业务有专属，其他普通的可以通过<span style="color:red">@DefaultProperties(defaultFallback="")</span>统一跳转到统一处理结果页面 </p></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DefaultProperties(defaultFallback = &quot;payment_Global_FallbackMethod&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line"> <span class="comment">//下面是全局fallback方法</span></span><br><span class="line"> <span class="keyword">public</span> String <span class="title function_">payment_Global_FallbackMethod</span><span class="params">()</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="string">&quot;Global异常处理信息，请稍后再试，/(ㄒoㄒ)/~~&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div> <p style="color:blue">     代码混乱问题：作用于客户端的service层接口 </p> <p>     定义service接口的实现类，重写方法并将该方法放置在接口上 </p></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentFallbackService</span> <span class="keyword">implements</span> <span class="title class_">PaymentFeignService</span>&#123;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> String <span class="title function_">paymentInfo_OK</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="string">&quot;---- PaymentFallbackService fall back,paymentInfo_OK/(ㄒoㄒ)/~~ ----&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> String <span class="title function_">paymentInfo_ERROR</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="string">&quot;---- PaymentFallbackService fall back,paymentInfo_ERROR/(ㄒoㄒ)/~~ ----&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;CLOUD-PAYMENT-SERVICE&quot;,fallback = PaymentFallbackService.class)</span></span><br></pre></td></tr></table></figure><h1>未来遇到的三种异常：运行，超时，宕机</h1></blockquote><h3 id="服务熔断（一般用于服务端）"><a href="#服务熔断（一般用于服务端）" class="headerlink" title="服务熔断（一般用于服务端）"></a>服务熔断（一般用于服务端）</h3><ol><li><p>服务端service添加方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//=====================服务熔断</span></span><br><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;paymentCircuitBreaker_fallback&quot;,commandProperties = &#123;</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;circuitBreaker.enabled&quot;,value = &quot;true&quot;),//是否开启断路器</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;circuitBreaker.requestVolumeThreshold&quot;,value = &quot;10&quot;),//请求次数</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;circuitBreaker.sleepWindowInMilliseconds&quot;,value = &quot;10000&quot;),//时间范围</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;circuitBreaker.errorThresholdPercentage&quot;,value = &quot;60&quot;)//失败率达到多少后跳闸</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">paymentCircuitBreaker</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Integer id)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (id&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;id不能为负数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">serialNumber</span> <span class="operator">=</span> IdUtil.simpleUUID();<span class="comment">//UUID.randomUUID().toString();</span></span><br><span class="line">    <span class="keyword">return</span> Thread.currentThread().getName()+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;调用成功，流水号&quot;</span>+serialNumber;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">paymentCircuitBreaker_fallback</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;id不能为负数，请稍后再试，/(ㄒoㄒ)/~~ id=&quot;</span>+id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>服务端controller</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//=====================服务熔断</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/payment/circuit/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">paymentCircuitBreaker</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> paymentService.paymentCircuitBreaker(id);</span><br><span class="line">    log.info(<span class="string">&quot;******result:&quot;</span>+result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><h2>熔断类型：</h2><p>熔断打开：请求不再进行调用当前服务，内部设置时钟一般为MTTR（平均故障处理时间），当打开时长达到所设时钟则进入半熔断状态</p><p>熔断关闭：熔断关闭不会对服务进行熔断</p><p>熔断半开：部分请求根据规则调用当前服务，如果请求成功且符合规则则认为当前服务恢复正常，关闭熔断</p></blockquote><h3 id="HystrixProperty属性大全"><a href="#HystrixProperty属性大全" class="headerlink" title="@HystrixProperty属性大全"></a>@HystrixProperty属性大全</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;str_fa1lbackMethod&quot;,</span></span><br><span class="line"><span class="meta">groupKey = &quot;strGroupCommand&quot;,</span></span><br><span class="line"><span class="meta">commandKey = &quot;strCommarld&quot; ,</span></span><br><span class="line"><span class="meta">threadPoolKey = &quot;strThreadPoo1&quot;,commandProperties = &#123;</span></span><br><span class="line"><span class="meta">1/没置隔离策喀，THREAD表示线程池SEMAPHORE:信号地隔离</span></span><br><span class="line"><span class="meta">@HystrixProperty(name = &quot;execution.isolation.strategy&quot; , value = &quot;THREAD&quot;),</span></span><br><span class="line"><span class="meta">//当隔离策喀选择信号池隔离的时候，用来设置信号地的大小（最大并发数）</span></span><br><span class="line"><span class="meta">@HystrixProperty(name = &quot;execution.isolation.semaphore.maxConcurrentRequests&quot;, value</span></span><br><span class="line"><span class="meta">//配置命令执行的超时时间</span></span><br><span class="line"><span class="meta">@HystrixProperty(name = &quot;execution.isolation.thread.timeoutinMilliseconds&quot;, value = &quot;10&quot;),</span></span><br><span class="line"><span class="meta">//是否启用超时时间</span></span><br><span class="line"><span class="meta">@HystrixProperty(name = &quot;execution.timeout.enabled&quot;， value = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">//执行超时的时候是否中断</span></span><br><span class="line"><span class="meta">@HystrixProperty(name = &quot;execution.isolation.thread.interruptOnTimeout&quot;，value = &quot;tr</span></span><br><span class="line"><span class="meta">ue&quot; ),</span></span><br><span class="line"><span class="meta">/l/执行被取消的时候是否中断</span></span><br><span class="line"><span class="meta">@HystrixProperty(name = &quot;execution.isolation.thread.interruptOnCance1&quot;，value = &quot;true</span></span><br><span class="line"><span class="meta">//允许回调方法执行的最大并发数</span></span><br><span class="line"><span class="meta">@HystrixProperty(name = &quot;fal1back.isolation.semaphore.maxConcurrentRequests&quot;, value</span></span><br><span class="line"><span class="meta">//服务降级是否启用，是否执行回调函数</span></span><br><span class="line"><span class="meta">@HystrixProperty(name = &quot;fallback.enabled&quot;, value = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">@HystrixProperty(name = &quot; circuitBreaker . enabled&quot;, value = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">//该属性用来没置在燎动时间窗中，断路器熔断的最小请求数。例如，默认该值为20的时候,</span></span><br><span class="line"><span class="meta">//如果滚动时间窗(默以10秒)内仅收到了19个请求，即使这19个请求都失败了， 断路器也不会打开。</span></span><br><span class="line"><span class="meta">@HystrixProperty(name = &quot; circuitBreaker . requestVolumeThreshold&quot;, value = &quot;20&quot;),</span></span><br><span class="line"><span class="meta">//该属性用来没置在燎动时间窗中，表示在熔动时间窗中，在请求数量超过</span></span><br><span class="line"><span class="meta">// circuitBreaker. requestVolumeThreshold的情况下，如果错误请求数的百分比超过50,</span></span><br><span class="line"><span class="meta">//就把断路器没置为”打开”状态，否则就设置为&quot;关闭”状态。</span></span><br><span class="line"><span class="meta">@HystrixProperty(name = &quot;circuitBreaker . errorThresholdPercentage&quot;, value = &quot;50&quot;),</span></span><br><span class="line"><span class="meta">//该属性用来没置当断路器打开之后的休眠时间窗。休眠时间窗结束之后,</span></span><br><span class="line"><span class="meta">//会将断路器置为&quot;半开”状态，尝试熔断的请求命令，如果依然失败就将断路器继续设置为”打开”状态,</span></span><br><span class="line"><span class="meta">//如果成功就没置为&quot;关闭”状态。</span></span><br><span class="line"><span class="meta">@HystrixProperty(name = &quot;circuitBreaker . sleepWindowinMilliseconds&quot;, value = &quot;5000&quot;),</span></span><br><span class="line"><span class="meta">//断路器强制打开</span></span><br><span class="line"><span class="meta">@HystrixProperty(name = &quot; circuitBreaker . forceOpen&quot;, value = &quot;false&quot;),</span></span><br><span class="line"><span class="meta">//断路器强制关闭</span></span><br><span class="line"><span class="meta">@HystrixProperty(name = &quot; circuitBreaker . forceClosed&quot;, value = &quot;false&quot;),</span></span><br><span class="line"><span class="meta">//滚动时间窗没置，该时间用 于断路器判断健康度时需要收集信息的持续时间</span></span><br><span class="line"><span class="meta">@HystrixProperty(name = &quot;metrics . rollingStats . timeinMilliseconds&quot;, value = &quot;10000&quot;),</span></span><br><span class="line"><span class="meta">//该属性用来没置滚动时间窗统计指标信息时划分”桶&quot;的数量，断路器在收集指标信息的时候会根据</span></span><br><span class="line"><span class="meta">//设置的时间窗长度拆分成多个&quot;桶&quot;来累计各度量值，每个”桶&quot;记录了-段时间内 的采集指标。</span></span><br><span class="line"><span class="meta">//比如10秒内拆分成10个&quot;桶&quot;收集这样，所以timeinMilliseconds 必须能被numBuckets 整除。否则会抛异常</span></span><br><span class="line"><span class="meta">@HystrixProperty(name = &quot;metrics .rollingStats . numBuckets&quot;, value = &quot;10&quot;),</span></span><br><span class="line"><span class="meta">eryst -XFT UpErtyinamc -n Cu-toreaker .TurCu-oscu )vaLuc一T d- 3 ,，</span></span><br><span class="line"><span class="meta">//滚动时间窗设置，该时间用于断路 器判断健康度时需要收集信息的持续时间</span></span><br><span class="line"><span class="meta">@HystrixProperty(name = &quot;metrics . rollingStats . timeinMilliseconds&quot;, value =” 10000&quot;),</span></span><br><span class="line"><span class="meta">//该属性用来没置旅动时间窗统计指标信息时划分”桶”的数量，断路器在收集指标信息的时候会根据</span></span><br><span class="line"><span class="meta">//设置的时间窗长度拆分成多个&quot;桶”来累计各度量值，每个”桶&quot;记录了-段时间内的来集指标。</span></span><br><span class="line"><span class="meta">//比如10秒内拆分成10个”桶&quot;收集这样，所以timeinMilliseconds 必须能被numBuckets 整除。否则会抛异常</span></span><br><span class="line"><span class="meta">@HystrixProperty(name = &quot;metrics .rollingStats . numBuckets&quot;, value = &quot;10&quot;),</span></span><br><span class="line"><span class="meta">//该属性用来没置对命令执行的延迟是否使用百分位数来跟踪和计算。如果没置为false,那么所有的概要统计都将返回-1。</span></span><br><span class="line"><span class="meta">@HystrixProperty(name = &quot;metrics. rollingPercentile.enabled&quot;, value = &quot;false&quot;),</span></span><br><span class="line"><span class="meta">//该属性用来设置百分位统计的滚动窗口的持续时间，单位为毫秒。</span></span><br><span class="line"><span class="meta">@HystrixProperty(name = &quot;metrics .rollingPercentile . timeInMilliseconds&quot;, value = &quot;60000&quot;),</span></span><br><span class="line"><span class="meta">. //该属性用来设置百分位统计壤动窗口中使用“桶”的数量。</span></span><br><span class="line"><span class="meta">@HystrixProperty(name = &quot;metrics.rollingPercentfle . numBuckets&quot;, value = &quot;60000&quot;),</span></span><br><span class="line"><span class="meta">//该属性用来没置在执行过程中每个 “桶”中保留的最大执行次数。如果在滚动时间窗内发生超过该没定值的执行次数,</span></span><br><span class="line"><span class="meta">//就从最初的位置开始重写。例如，将该值设置为100， 滚动窗口为10秒，若在10秒内一个 “桶”中发生了500次执行,</span></span><br><span class="line"><span class="meta">//那么该“桶”中只保留最后的100次执行的统计。另外，增加该值的大小将会增加内存量的消耗，并增加排序百分位数所需的计算时间。</span></span><br><span class="line"><span class="meta">@HystrixProperty(name = &quot;metrics. rollingPercentile . bucketSize&quot;, value = &quot;100&quot;),</span></span><br><span class="line"><span class="meta">//该属性用来没置采集影响断路器状态的健康快照(请求的成功、错误百分比) 的间隔等待时间。</span></span><br><span class="line"><span class="meta">@HystrixProperty(name = &quot;metrics . healthSnapshot . intervalinMilliseconds&quot;, value = &quot;500&quot;) ,</span></span><br><span class="line"><span class="meta">//是否开启请求缓存</span></span><br><span class="line"><span class="meta">@HystrixProperty(name = &quot;requestCache.enabled&quot;, value = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">// HystrixCommand 的执行和事件是否打印日志到HystrixRequestLog中</span></span><br><span class="line"><span class="meta">@HystrixProperty(name = &quot;requestLog. enabled&quot;, value = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">@HystrixProperty(name = &quot;metrics . rollingPercentile. bucketSize&quot;, value = &quot;10&quot;),</span></span><br><span class="line"><span class="meta">//该属性用来汝置采集影响断路器状态的健康快照(请求的成功、错误百分 比)的间隔等待时间。</span></span><br><span class="line"><span class="meta">@HystrixProperty(name = &quot;metrics .healthSnapshot . intervalinMilliseconds&quot;, value = &quot;500&quot;),</span></span><br><span class="line"><span class="meta">//是否开启请求缓存</span></span><br><span class="line"><span class="meta">@HystrixProperty(name = &quot;requestCache. enabled&quot;, value = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">// HystrixCommand的执 行和事件是否打印日志到HystrixRequestLog中</span></span><br><span class="line"><span class="meta">@HystrixProperty(name = &quot;requestLog. enabled&quot;, value = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">&#125;,</span></span><br><span class="line"><span class="meta">threadPoolProperties = &#123;</span></span><br><span class="line"><span class="meta">//该参数用来没置执行命令线程池的核心线程数，该值 也就是命令执行的最大并发量</span></span><br><span class="line"><span class="meta">@HystrixProperty(name = &quot;coreSize&quot;, value = &quot;10&quot;),</span></span><br><span class="line"><span class="meta">//该参数用来没置线程池的最大队列大小。当设置为-1时，线程池将使用SynchronousQueue实现的队列,</span></span><br><span class="line"><span class="meta">//否则将使用LinkedBlockingQueue 实现的队列。</span></span><br><span class="line"><span class="meta">@HystrixProperty(name = &quot;maxQueueSize&quot;, value = &quot;-1&quot;),</span></span><br><span class="line"><span class="meta">//该参数用来为队列设置拒绝阙值。通过该参数，即使队列没 有达到最大值也能拒绝请求。</span></span><br><span class="line"><span class="meta">//该参数主要是对LinkedBlockingQueue队列的补充,因为LinkedBlockingQueue</span></span><br><span class="line"><span class="meta">//队列不能动态修改它的对象大小，而通过该属性就可以凋整拒绝请求的队列大小了。</span></span><br><span class="line"><span class="meta">@HystrixProperty(name = &quot;queueSizeRejectionThreshold&quot;, value = &quot;5&quot;),</span></span><br><span class="line"><span class="meta">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="服务限流（后续alibaba的Sentinel说明）"><a href="#服务限流（后续alibaba的Sentinel说明）" class="headerlink" title="服务限流（后续alibaba的Sentinel说明）"></a>服务限流（后续alibaba的Sentinel说明）</h3><h3 id="Hystrix图形化Dashboard服务搭建"><a href="#Hystrix图形化Dashboard服务搭建" class="headerlink" title="Hystrix图形化Dashboard服务搭建"></a>Hystrix图形化Dashboard服务搭建</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//启动类注解</span></span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--actuator是监控系统健康情况的工具 被监控服务需要添加该依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;访问&#x3D;&#x3D;<a href="http://localhost:9001/hystrix">http://localhost:9001/hystrix</a></p><p><strong>在被监控的服务启动类中添加以下代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 此配置是为了服务监控而配置，与服务容错本身无关，spring cloud升级以后存在的问题</span></span><br><span class="line"><span class="comment">* ServletRegistrationBean因为springboot的默认路径不是”/hystrix.stream“</span></span><br><span class="line"><span class="comment">* 只要在自己的项目里配置上下文的servlet就可以了</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> ServletRegistrationBean <span class="title function_">getServlet</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ServletRegistrationBean</span> <span class="variable">registrationBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletRegistrationBean</span>(<span class="keyword">new</span> <span class="title class_">HystrixMetricsStreamServlet</span>());</span><br><span class="line">    registrationBean.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">    registrationBean.addUrlMappings(<span class="string">&quot;/hystrix.stream&quot;</span>);</span><br><span class="line">    registrationBean.setName(<span class="string">&quot;HystrixMetricsStreamServlet&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> registrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十、GateWay服务网关（Zuul逐渐淘汰）"><a href="#十、GateWay服务网关（Zuul逐渐淘汰）" class="headerlink" title="十、GateWay服务网关（Zuul逐渐淘汰）"></a>十、GateWay服务网关（Zuul逐渐淘汰）</h2><p>Gateway旨在提供一种简单而有效的方式来对API进行路由，以及提供一些强大的过滤功能，例如：熔断、限流、重试等</p><p>使用了Webflux中的<strong>reactor-netty</strong>响应式编程组件，底层使用了<strong>Netty</strong>通讯框架</p><p><strong>功能</strong>：反向代理，鉴权，流量控制，熔断，日志监控</p><p>Zuul1是&#x3D;&#x3D;基于servlet之上的一个阻塞式处理模型&#x3D;&#x3D;，在并发不高的场景下这种模型是适合的。</p><p>Gateway是&#x3D;&#x3D;非阻塞异步框架&#x3D;&#x3D;</p><blockquote><h4>Gateway三大核心概念</h4><p>Route（路由）：路由是构建网关的基本模块，它由ID，目标URL，一系列的断言和过滤器组成，如果断言为true则匹配该路由</p><p>Predicate（断言）：参考java8的java.util.function.Predicate开发人员可以匹配HTTP请求中的所有内容（例如请求头或请求参数），<span style="color:red">如果请求与断言相匹配则进行路由</span></p><p>Filter（过滤）：指的是Spring框架中GatewayFilter的实例，使用过滤器，可以在请求被路由前或者之后对请求进行修改</p><p>总结：核心逻辑——<span style="color:red">路由转发+执行过滤器链</span></p></blockquote><hr><ol><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--gateway--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置yml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9527</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-gateway</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">cloud-gateway-service</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置需要网关的路由一种方式</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span>                             <span class="comment">#可以配置多个路由，所以单词为复数</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh</span>               <span class="comment">#路由的ID，没有固定规则但要求唯一，建议配合服务名</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8001</span>      <span class="comment">#匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/get/**</span>        <span class="comment">#断言。路径相匹配的进行路由</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh2</span>              <span class="comment">#路由的ID，没有固定规则但要求唯一，建议配合服务名</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8001</span>      <span class="comment">#匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/lb/**</span>         <span class="comment">#断言。路径相匹配的进行路由</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#配置路由的第二种方式</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GateWayConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RouteLocator <span class="title function_">customRouteLocator</span><span class="params">(RouteLocatorBuilder routeLocatorBuilder)</span>&#123;</span><br><span class="line">        RouteLocatorBuilder.<span class="type">Builder</span> <span class="variable">routes</span> <span class="operator">=</span> routeLocatorBuilder.routes();</span><br><span class="line">        routes.route(<span class="string">&quot;path_route_xve&quot;</span>,</span><br><span class="line">                r -&gt; r.path(<span class="string">&quot;/guonei&quot;</span>).uri(<span class="string">&quot;http://news.baidu.com/guonei&quot;</span>)).build();</span><br><span class="line">        <span class="keyword">return</span> routes.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>主启动类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="配置动态路由"><a href="#配置动态路由" class="headerlink" title="配置动态路由"></a>配置动态路由</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span>                   <span class="comment">#开启从注册中心动态创建路由的功能，利用微服务名访问</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#uri: http://localhost:8001      #匹配后提供服务的路由地址</span></span><br><span class="line"><span class="attr">uri:</span> <span class="string">lb://cloud-payment-service</span> <span class="comment">#匹配提供服务的路由地址lb（load balance）表示使用了负载均衡</span></span><br></pre></td></tr></table></figure><h3 id="Predicate的使用"><a href="#Predicate的使用" class="headerlink" title="Predicate的使用"></a>Predicate的使用</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">After=2021-08-14T23:25:39.452+08:00[Asia/Shanghai]</span><span class="comment">#在该时间以后可以使用</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Before=2021-08-14T23:25:39.452+08:00[Asia/Shanghai]</span><span class="comment">#在该时间以前可以使用</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Between=2021-08-14T23:25:39.452+08:00[Asia/Shanghai]，2021-08-15T23:25:39.452+08:00[Asia/Shanghai]</span> <span class="comment">#在这两者时间以内</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Cookie=username,xve</span><span class="comment">#携带符合条件的cookie可以使用</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Header=X-Request-Id,</span> <span class="string">\d+</span><span class="comment">#请求头要有X-Request-Id属性并且值为整数的正则表达式</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Method=GET</span><span class="comment">#只能访问对应的方法类型</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Path=/payment/lb/**</span><span class="comment">#路径符合要求</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Query=username,</span> <span class="string">\d+</span><span class="comment">#要有参数名username，并且还要是整数才能路由</span></span><br></pre></td></tr></table></figure><p>获取当前时间方式</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.ZonedDateTime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//2021-08-14T23:25:39.452+08:00[Asia/Shanghai]</span></span><br><span class="line">        <span class="type">ZonedDateTime</span> <span class="variable">zonedDateTime</span> <span class="operator">=</span> ZonedDateTime.now(); <span class="comment">//默认时区</span></span><br><span class="line">        System.out.println(zonedDateTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试是否携带cookie访问</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#curl方式</span><br><span class="line">#不携带cookie的</span><br><span class="line">C:\Users\lenovo&gt;curl http://localhost:9527/payment/lb</span><br><span class="line">#携带cookie的</span><br><span class="line">C:\Users\lenovo&gt;curl http://localhost:9527/payment/lb --cookie &quot;username=xve&quot;</span><br><span class="line"></span><br><span class="line">#请求头符合条件的访问</span><br><span class="line">C:\Users\lenovo&gt;curl http://localhost:9527/payment/lb -H &quot;X-Request-Id:123&quot;</span><br></pre></td></tr></table></figure><h3 id="Filter的使用"><a href="#Filter的使用" class="headerlink" title="Filter的使用"></a>Filter的使用</h3><p>路由过滤器可用于修改进入的HTTP请求和返回的HTTP响应，路由过滤器只能指定路由进行使用</p><ol><li>生命周期：pro（前置的）| post（后置的）</li><li>种类：GatewayFilter（单一的）| GlobalFilter（全局的）</li></ol><blockquote><p style="color:red">常用的Fliter在官网可以查看</p></blockquote><p>自定义全局GlobalFilter</p><ol><li>两个主要接口：GlobalFilter,Ordered</li><li>作用：全局日志，统一网关鉴权…</li><li>案例代码</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLogGateWayFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span>, Ordered &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;******come in MyLogGateWayFilter: &quot;</span>+<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="type">String</span> <span class="variable">uname</span> <span class="operator">=</span> exchange.getRequest().getQueryParams().getFirst(<span class="string">&quot;uname&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(uname==<span class="literal">null</span>)&#123;</span><br><span class="line">            log.info(<span class="string">&quot;******用户名为null,非法用户，/(ㄒoㄒ)/~~&quot;</span>);</span><br><span class="line">            exchange.getResponse().setStatusCode(HttpStatus.NOT_ACCEPTABLE);</span><br><span class="line">            <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十一、分布式Config配置中心"><a href="#十一、分布式Config配置中心" class="headerlink" title="十一、分布式Config配置中心"></a>十一、分布式Config配置中心</h2><p>集中，动态管理大量重复的配置文件</p><p>动态化调整不同环境下的配置</p><p>运行期间动态调整配置，每个服务会向配置中心拉取自己的配置信息</p><p>配置改动不需要重启服务，即可应用新的配置文件</p><p>将配置信息以REST接口方式暴露</p><blockquote><p>SpringCloud Config为微服务架构中的微服务提供集中化的<span style="color:red">外部配置支持</span>，配置服务器为各个不同微服务应用的所有环境提供了一个中心化的外部配置</p></blockquote><hr><h3 id="config服务端配置"><a href="#config服务端配置" class="headerlink" title="config服务端配置"></a>config服务端配置</h3><ol><li><p>在github上新建config地址<a href="https://github.com/MlSummer/springcloud-config.git">https://github.com/MlSummer/springcloud-config.git</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add.#添加到暂存区</span><br><span class="line">git commit -m &quot;日志信息&quot; #添加到本地仓库</span><br><span class="line">git push origin master    #添加到远程仓库</span><br></pre></td></tr></table></figure></li><li><p>新建config配置中心POM</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--config配置服务端--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>yml配置文件</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3344</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-config-center</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://github.com/MlSummer/springcloud-config.git</span>   <span class="comment">#GitHub上面的git仓库名字</span></span><br><span class="line">          <span class="attr">search-paths:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">springcloud-config</span>  <span class="comment">#搜索目录</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span>   <span class="comment">#读取分支</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka/</span></span><br></pre></td></tr></table></figure></li><li><p>主启动类添加注解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigCenterMain3344</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ConfigCenterMain3344.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>访问测试      <a href="http://localhost:3344/master/%7B%E8%AE%BF%E9%97%AE%E5%86%85%E5%AE%B9%7D">http://localhost:3344/master/{访问内容}</a></p></li></ol><h3 id="配置读取规则"><a href="#配置读取规则" class="headerlink" title="配置读取规则"></a>配置读取规则</h3><ol><li><strong>&#x2F;{label}&#x2F;{application}-{profile}.yml</strong>          <a href="http://localhost:3344/master/config-dev.yml">http://localhost:3344/master/config-dev.yml</a></li><li>&#x2F;{application}-{profile}.yml</li><li>&#x2F;{application}&#x2F;{profile}&#x2F;{label}.yml</li><li>重要配置细节总结                           <strong>lable</strong>：分支     <strong>application</strong>：服务     <strong>profile</strong>：配置文件名</li></ol><h3 id="config客户端配置"><a href="#config客户端配置" class="headerlink" title="config客户端配置"></a>config客户端配置</h3><blockquote><p>application.yml是用户级的资源配置项</p></blockquote><blockquote><p>bootstrap.yml是系统级，<span style="color:red">优先级更高</span></p><p>Spring Cloud会创建一个“Bootstrap Context”,作为Spring应用的‘Application Context’的&#x3D;&#x3D;父上下文&#x3D;&#x3D;，初始化的时候，’Bootstrap Context‘负责从外部源加载配置属性并解析配置，这两个上下文共享一个从外部获取的’Environment‘</p><p>​‘Bootstrap’属性有高优先级，默认情况下，它们不会被本地配置覆盖。’Bootstrap context‘和’Application Context‘有着不同的约定，所以新增了一个’bootstrap.yml‘文件，保证’Bootstrap Context‘和’Application Context‘配置的分离。</p><p>​<span style="color:red">要将Client模块下的application.yml改成bootstrap.yml.</span>因为bootstrap.yml是比application.yml先加载的，bootstrap.yml优先级高于application.yml</p></blockquote><hr><ol><li><p>配置POM</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--config配置客户端--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>bootstrap.yml</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3355</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span>                       <span class="comment">#Config客户端配置</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span>               <span class="comment">#分支名称</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">config</span>                <span class="comment">#配置文件名称</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span>                <span class="comment">#读取后缀名称</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:3344</span>  <span class="comment">#配置中心地址</span></span><br><span class="line">      </span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span> </span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br></pre></td></tr></table></figure></li><li><p>主启动类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigClientMain3355</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ConfigClientMain3355.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>controller</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigClientController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;config.info&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String configInfo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/configInfo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getConfigInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p style="color:red">存在问题：3344配置中心端口随着修改github上的配置内容可以立刻响应，而3355客户端口没有任何变化，除非重启或重新加载。</p>所以将进行对客户端的动态刷新<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在客户端yml文件中暴露监控端点</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在客户端controller添加注解,实现刷新功能</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br></pre></td></tr></table></figure><p>在cmd中运行该语句curl -X POST “<a href="http://localhost:3355/actuator/refresh&quot;">http://localhost:3355/actuator/refresh&quot;</a></p><h2 id="十二、Bus消息总线"><a href="#十二、Bus消息总线" class="headerlink" title="十二、Bus消息总线"></a>十二、Bus消息总线</h2><p><strong>实现分布式自动刷新配置功能</strong> ：springloud bus配合springcloud config实现配置的动态刷新</p><p>分布式执行器：可以用于广播状态更改，事件推送等，也可以当作微服务间的通信通道，支持两种消息代理：&#x3D;&#x3D;RabbitMQ&#x3D;&#x3D;和&#x3D;&#x3D;Kafka&#x3D;&#x3D;</p><h3 id="RabbitMQ安装"><a href="#RabbitMQ安装" class="headerlink" title="RabbitMQ安装"></a>RabbitMQ安装</h3><ol><li><p>安装erlang：<a href="https://www.erlang.org/downloadsErlang">https://www.erlang.org/downloadsErlang</a>         是一个结构化，动态类型编程语言，内建并行计算支持，有该环境才能运行rabbitMQ</p></li><li><p>安装rabbitMQ：<a href="http://www.rabbitmq.com/download.html">http://www.rabbitmq.com/download.html</a></p><ul><li><p>在D:\application\Dubbo\rabbitMQ\rabbitmq_server-3.9.3\sbin目录下使用以下cmd命令启动管理功能</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure></li></ul></li><li><p>访问地址查看是否安装成功 <a href="http://localhost:15672/">http://localhost:15672/</a>     账号：guest     密码：guest</p></li></ol><h3 id="Bus动态刷新全局广播通知"><a href="#Bus动态刷新全局广播通知" class="headerlink" title="Bus动态刷新全局广播通知"></a>Bus动态刷新全局广播通知</h3><p>两种设计思路</p><ol><li>通过&#x2F;bus&#x2F;refresh –&gt; 客户端实例 –&gt; Bus –&gt; 其他客户端实例</li><li><strong>通过&#x2F;bus&#x2F;refresh –&gt; 服务端ConfigServer –&gt; Bus –&gt; 所有客户端实例</strong></li></ol><h3 id="服务端添加消息总线支持"><a href="#服务端添加消息总线支持" class="headerlink" title="服务端添加消息总线支持"></a>服务端添加消息总线支持</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加消息总线RabbitMQ支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span>           <span class="comment">#rabbitMQ相关配置</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span>        <span class="comment">#rabbitMQ默认服务端口</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#RabbitMQ相关配置，暴露监控端点</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span>  <span class="comment">#暴露bus刷新配置的端点</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;bus-refresh&quot;</span></span><br></pre></td></tr></table></figure><h3 id="客户端添加消息总线支持"><a href="#客户端添加消息总线支持" class="headerlink" title="客户端添加消息总线支持"></a>客户端添加消息总线支持</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加消息总线RabbitMQ支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span>           <span class="comment">#rabbitMQ相关配置</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span>        <span class="comment">#rabbitMQ默认服务端口</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#RabbitMQ相关配置，暴露监控端点</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span>  <span class="comment">#暴露bus刷新配置的端点</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><p><strong>配置完成后在cmd中发送post请求（一次请求，处处生效）</strong>      curl -X POST “<a href="http://localhost:3344/actuator/bus-refresh&quot;">http://localhost:3344/actuator/bus-refresh&quot;</a></p><p>定点通知命令:destination:config-client:3355**(springcloud微服务名+端口号)**curl -X POST “<a href="http://localhost:3344/actuator/bus-refresh/">http://localhost:3344/actuator/bus-refresh/</a><span style="color:red">{destination}</span>“</p><h2 id="十三、Spring-Cloud-Stream-消息驱动"><a href="#十三、Spring-Cloud-Stream-消息驱动" class="headerlink" title="十三、Spring Cloud Stream 消息驱动"></a>十三、Spring Cloud Stream 消息驱动</h2><p>​Spring Cloud Strem消息驱动是<strong>一个构建消息驱动微服务的框架</strong></p><p>​因为除了RabbitMQ消息中间件外，还有好几种消息中间件，当不同端使用不同消息中间键时导致技术的多样冗余等问题，所以出现了Strem消息驱动，<span style="color:red">屏蔽底层消息中间件的差异，降低切换成本，统一消息的编程模型</span>。</p><table><thead><tr><th>组成</th><th>说明</th></tr></thead><tbody><tr><td>Middleware</td><td>中间件，目前只支持RabbitMQ和Kafka</td></tr><tr><td>Binder</td><td>Binder是应用与消息中间件之间的封装，目前实行了Kafka和RabbitMQ的Binder，通过Binder可以很方便的连接中间件，可以动态的改变消息类型（对应于Kafka的topic，RabbitMQ的exchange），这些都可以通过配置文件来实现</td></tr><tr><td>@Input</td><td>注解标识输入通道，通过该输入通道接收到的消息进入应用程序</td></tr><tr><td>@Output</td><td>注解标识输出通道，发布的消息将通过该通道离开应用程序</td></tr><tr><td>@SteamListener</td><td>监听队列，用于消费组的队列的消息接收</td></tr><tr><td>@EnableBinding</td><td>指信道channel和exchange绑定在一起</td></tr></tbody></table><p>应用程序通过<strong>inputs</strong>或<strong>outputs</strong>来与Spring Cloud Stream中的binder对象交互</p><p>通过我们配置来binding（绑定），而Spring Cloud Strem的binder对象负责与消息中间件交互</p><p>Spring Cloud Strem 为一些供应商的消息中间件产品提供了个性化的自动化配置实现，引用了&#x3D;&#x3D;<strong>发布-订阅、消费组、分区的三个核心概念</strong>&#x3D;&#x3D;。消息通信方式遵循了发布-订阅模式。</p><h3 id="消息驱动的生产者"><a href="#消息驱动的生产者" class="headerlink" title="消息驱动的生产者"></a>消息驱动的生产者</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--rabbit--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8801</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-steam-provider</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">binders:</span>                            <span class="comment">#在此配置要绑定的rabbitmq的服务消息</span></span><br><span class="line">        <span class="attr">defaultRabbit:</span>                    <span class="comment">#表示定义的名称</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">rabbit</span>                    <span class="comment">#消息组件类型</span></span><br><span class="line">          <span class="attr">environment:</span>                    <span class="comment">#设置rabbitmq的相关的环境配置</span></span><br><span class="line">            <span class="attr">spring:</span></span><br><span class="line">              <span class="attr">rabbitmq:</span></span><br><span class="line">                <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">                <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">                <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">                <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">      <span class="attr">bindings:</span>                           <span class="comment">#服务整合处理</span></span><br><span class="line">        <span class="attr">output:</span>                           <span class="comment">#这个名字是一个通道的名字</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">studyExchange</span>      <span class="comment">#表示要使用的Exchange名称定义</span></span><br><span class="line">          <span class="attr">content-type:</span> <span class="string">application/json</span>  <span class="comment">#设hi在消息类型，本次为json，文本则设置为”text/plain“</span></span><br><span class="line">          <span class="attr">binder:</span> <span class="string">defaultRabbit</span>             <span class="comment">#设置要绑定的消息服务的具体设置（会爆红，可以运行）</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span>                                         <span class="comment">#客户端进行Eureka服务注册</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">2</span>          <span class="comment">#设置心跳时间间隔（默认30秒）</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">5</span>       <span class="comment">#如果现在超过了5秒的间隔（默认90秒）</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">send-8801.com</span>                    <span class="comment">#在信息列表时显示主机名称</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span>                       <span class="comment">#访问的路径变成IP地址</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IMessageProvider</span> &#123;</span><br><span class="line">    String <span class="title function_">send</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableBinding(Source.class)</span><span class="comment">//定义消息的推送管道</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageProvider</span> <span class="keyword">implements</span> <span class="title class_">IMessageProvider</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MessageChannel output;<span class="comment">//消息发送管道</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">send</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">serial</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">        output.send(MessageBuilder.withPayload(serial).build());</span><br><span class="line">        System.out.println(<span class="string">&quot;******serial:&quot;</span>+serial);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendMessageController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IMessageProvider messageProvider;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;sendMessage&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sendMassage</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> messageProvider.send();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置完成后访问<a href="http://localhost:8801/sendMessage">http://localhost:8801/sendMessage</a></p><h3 id="消息驱动的消费者"><a href="#消息驱动的消费者" class="headerlink" title="消息驱动的消费者"></a>消息驱动的消费者</h3><p>配置与服务者基本一致，修改yml文件中的output为input</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8802</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-steam-consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">binders:</span>                            <span class="comment">#在此配置要绑定的rabbitmq的服务消息</span></span><br><span class="line">        <span class="attr">defaultRabbit:</span>                    <span class="comment">#表示定义的名称</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">rabbit</span>                    <span class="comment">#消息组件类型</span></span><br><span class="line">          <span class="attr">environment:</span>                    <span class="comment">#设置rabbitmq的相关的环境配置</span></span><br><span class="line">            <span class="attr">spring:</span></span><br><span class="line">              <span class="attr">rabbitmq:</span></span><br><span class="line">                <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">                <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">                <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">                <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">      <span class="attr">bindings:</span>                             <span class="comment">#服务整合处理</span></span><br><span class="line">        <span class="attr">input:</span>                              <span class="comment">#这个名字是一个通道的名字</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">studyExchange</span>        <span class="comment">#表示要使用的Exchange名称定义</span></span><br><span class="line">          <span class="attr">content-type:</span> <span class="string">application/json</span>    <span class="comment">#设hi在消息类型，本次为json，文本则设置为”text/plain“</span></span><br><span class="line">          <span class="attr">binder:</span> <span class="string">defaultRabbit</span>             <span class="comment">#设置要绑定的消息服务的具体设置</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span>                                         <span class="comment">#客户端进行Eureka服务注册</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">2</span>          <span class="comment">#设置心跳时间间隔（默认30秒）</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">5</span>       <span class="comment">#如果现在超过了5秒的间隔（默认90秒）</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">receice-8802.com</span>                 <span class="comment">#在信息列表时显示主机名称</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span>                       <span class="comment">#访问的路径变成IP地址</span></span><br></pre></td></tr></table></figure><h3 id="分组消费与持久化"><a href="#分组消费与持久化" class="headerlink" title="分组消费与持久化"></a>分组消费与持久化</h3><p>多个消费者接收消息将会存在以下两个问题</p><ol><li><p>存在重复消费问题：不同组存在重复消费 同一个组会存在竞争关系 默认分组group是不一样的。&#x3D;&#x3D;解决办法：yml中添加group分组，轮询机制&#x3D;&#x3D;</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-steam-consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">bindings:</span>                             <span class="comment">#服务整合处理</span></span><br><span class="line">        <span class="attr">input:</span>                              <span class="comment">#这个名字是一个通道的名字</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">xveA</span></span><br></pre></td></tr></table></figure></li><li><p>持久化   group分组的微服务宕机，不会消息丢失，等再次重启就会获取消息</p></li></ol><h2 id="十四、Spring-Cloud-Sleuth分布式请求链路跟踪"><a href="#十四、Spring-Cloud-Sleuth分布式请求链路跟踪" class="headerlink" title="十四、Spring Cloud Sleuth分布式请求链路跟踪"></a>十四、Spring Cloud Sleuth分布式请求链路跟踪</h2><p>提供了一套完整的服务跟踪的解决方案</p><p>在分布式系统中提供追踪解决方案并且兼容支持&#x3D;&#x3D;zipkin&#x3D;&#x3D;：下载地址<a href="https://repo1.maven.org/maven2/io/zipkin/zipkin-server/">https://repo1.maven.org/maven2/io/zipkin/zipkin-server/</a></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--包含了sleuth+zipkin--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">CLOUD-PAYMENT-SERVICE</span></span><br><span class="line">  <span class="attr">zipkin:</span></span><br><span class="line">    <span class="attr">base-url:</span> <span class="string">http://localhost:9411</span></span><br><span class="line">  <span class="attr">sleuth:</span></span><br><span class="line">    <span class="attr">sampler:</span></span><br><span class="line">      <span class="attr">probability:</span> <span class="number">1</span>  <span class="comment">#采样率值介于0到1之间，1则表示全部采样</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//服务端controller</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/payment/zipkin&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">paymentZipkin</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;hi,i&#x27;am paymentZipkin server fall back,welcome to xve,O(∩_∩)O&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端调用</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/consumer/payment/zipkin&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">paymentZipkin</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> restTemplate.getForObject(<span class="string">&quot;http://localhost:8001&quot;</span>+<span class="string">&quot;/payment/zipkin&quot;</span>,String.class);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十五、Spring-Cloud-Alibaba"><a href="#十五、Spring-Cloud-Alibaba" class="headerlink" title="十五、Spring Cloud Alibaba"></a>十五、Spring Cloud Alibaba</h2><p>因为spring cloud netfilx中许多服务进入维护模式。</p><blockquote><h3 style="color:red">功能</h3><p style="color:green">服务限流与降级：</p>默认支持Servlet、Feign、RestTemplate、Dubbo和RocketMQ限流降级功能的接入，可以在运行时通过控制台实时修改限流降级规则，还支持查看限流降级Metrics监控。<p style="color:green">服务注册与发现：</p>适配Spring Cloud服务注册与发现标准，默认集成了Ribbon的支持<p style="color:green">分布式配置管理：</p>支持分布式系统中的外部化配置，配置更改时自动刷新<p style="color:green">消息驱动能力：</p>基于Spring cloud Stream 为微服务应用构建消息驱动能力<p style="color:green">阿里云对象存储：</p>阿里云提供的海量、安全、低成本、高可靠的云存储服务。支持在任何应用、任何时间、任何地点存储和访问任意类型的数据<p style="color:green">分布式任务调度：</p>提供秒级、精准、高可靠、高可用的定时（基于Cron表达式）任务调度服务。同时提供分布式的任务执行模型，如网格任务。网格任务支持海量子任务均匀分配到所有Worker（schedulerx-client）上执行。</blockquote><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Spring Cloud alibaba 2.1.0.RELEASE--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="详见Spring-Cloud-self-2"><a href="#详见Spring-Cloud-self-2" class="headerlink" title="详见Spring-Cloud-self-2"></a>详见<a href="D:\Data\Typora\架构\SpringCloud-self-2.md">Spring-Cloud-self-2</a></h3><h1 id="Spring-Cloud-Alibaba"><a href="#Spring-Cloud-Alibaba" class="headerlink" title="Spring Cloud Alibaba"></a>Spring Cloud Alibaba</h1><p>三大重要组件：NacosSentinelSeata</p><p>[TOC]</p><hr><h2 id="注册中心对比图"><a href="#注册中心对比图" class="headerlink" title="注册中心对比图"></a>注册中心对比图</h2><table><thead><tr><th></th><th>Nacos</th><th>Eureka</th><th>Consul</th><th>CoreDNS</th><th>ZooKeeper</th></tr></thead><tbody><tr><td>一致性协议</td><td>CP+AP</td><td>AP</td><td>CP</td><td>&#x2F;</td><td>CP</td></tr><tr><td>健康检查</td><td>TCP&#x2F;HTTP&#x2F;MySQL&#x2F;Client Beat</td><td>Client Beat</td><td>TCP&#x2F;HTTP&#x2F;gRPC&#x2F;Cmd</td><td>&#x2F;</td><td>Client Beat</td></tr><tr><td>负载均衡</td><td>权重&#x2F;DSL&#x2F;metadata&#x2F;CMDB</td><td>Ribbon</td><td>Fabio</td><td>RR</td><td>&#x2F;</td></tr><tr><td>雪崩保护</td><td>支持</td><td>支持</td><td>不支持</td><td>不支持</td><td>不支持</td></tr><tr><td>自动注销实例</td><td>支持</td><td>支持</td><td>不支持</td><td>不支持</td><td>支持</td></tr><tr><td>访问协议</td><td>HTTP&#x2F;DNS&#x2F;UDP</td><td>HTTP</td><td>HTTP&#x2F;DNS</td><td>不支持</td><td>TCP</td></tr><tr><td>监听支持</td><td>支持</td><td>支持</td><td>支持</td><td>不支持</td><td>支持</td></tr><tr><td>多数据中心</td><td>支持</td><td>支持</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>跨注册中心</td><td>支持</td><td>不支持</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>SpringCloud集成</td><td>支持</td><td>支持</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>Dubbo集成</td><td>支持</td><td>不支持</td><td>不支持</td><td>不支持</td><td>支持</td></tr><tr><td>K8s集成</td><td>支持</td><td>不支持</td><td>支持</td><td>支持</td><td>不支持</td></tr></tbody></table><h2 id="一、Nacos简介"><a href="#一、Nacos简介" class="headerlink" title="一、Nacos简介"></a>一、Nacos简介</h2><p><strong>Nacos</strong>：前四个字母分别为Naming（命名）和Configuration（配置）的前两个字母，最后的s为Service（服务）</p><p>​一个更易于构建云原生应用的<strong>动态服务发现</strong>、<strong>配置管理</strong>和<strong>服务管理平台</strong>。——-&gt;     &#x3D;&#x3D;注册中心 + 配置中心&#x3D;&#x3D;。替代Eureka做服务中心，替代Config做服务中心</p><p><strong>下载地址</strong>：<a href="https://github.com/alibaba/Nacos">https://github.com/alibaba/Nacos</a></p><p><strong>安装成功</strong>：在D:\application\Dubbo\Nacos\nacos\bin目录下，运行cmd命令：&#x3D;&#x3D;startup.xmd&#x3D;&#x3D;，可能出现tomcat的错误，修改bin的startup.xmd修改为单机版</p><p><strong>访问服务地址：</strong><a href="http://localhost:8848/nacos/">http://localhost:8848/nacos/</a>默认账号： nacos         密码：nacos</p><h2 id="二、Nacos的服务注册发现"><a href="#二、Nacos的服务注册发现" class="headerlink" title="二、Nacos的服务注册发现"></a>二、Nacos的服务注册发现</h2><h3 id="基于Nacos的服务提供者"><a href="#基于Nacos的服务提供者" class="headerlink" title="基于Nacos的服务提供者"></a>基于Nacos的服务提供者</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Spring Cloud Alibaba Nacos--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-provider</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span>   <span class="comment">#Nacos的地址</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//主启动类</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NacosProviderDemoApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(NacosProviderDemoApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RestController</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EchoController</span>&#123;</span><br><span class="line">        <span class="meta">@GetMapping(&quot;echo/&#123;string&#125;&quot;)</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">echo</span><span class="params">(<span class="meta">@PathVariable(&quot;string&quot;)</span> String string)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Hello Nacos Discovery&quot;</span> + string;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于Nacos的服务消费者"><a href="#基于Nacos的服务消费者" class="headerlink" title="基于Nacos的服务消费者"></a>基于Nacos的服务消费者</h3><p>pom，yml配置与服务提供者相同</p><p>nacos自带&#x3D;&#x3D;负载均衡&#x3D;&#x3D;：天生集成ribbon</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#消费者将要去访问的微服务名称(注册成功进nacos的微服务提供者)    </span></span><br><span class="line"><span class="attr">service-url:</span></span><br><span class="line">  <span class="attr">nacos-user-service:</span> <span class="string">http://nacos-provider</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;service-url.nacos-user-service&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serviceURL;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/nacos/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentInfo</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(serviceURL+<span class="string">&quot;/payment/nacos/&quot;</span>+id,String.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、Nacos的服务配置中心"><a href="#三、Nacos的服务配置中心" class="headerlink" title="三、Nacos的服务配置中心"></a>三、Nacos的服务配置中心</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Spring Cloud Alibaba Nacos config--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意需要配置两个yml文件，一个是远程的bootstrap.yml;一个是本地的application.yml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#bootstrap.yml   nacos配置</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3377</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#Nacos服务注册中心地址</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#Nacos服务注册中心地址</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span>  <span class="comment">#指定yaml格式的配置</span></span><br><span class="line"> </span><br><span class="line"> <span class="string">$&#123;prefix&#125;-$&#123;spring-profile.active&#125;.$&#123;file-extension&#125;</span></span><br></pre></td></tr></table></figure><blockquote><h4 style="color:red"> ${prefix}-${spring-profile.active}.${file-extension} </h4><p>配置管理’dataId’字段</p><p><strong>prefix：</strong>默认为’spring.application.name’的值，也可以通过配置项’spring.cloud.nacos.config.prefix’来配置</p><p><strong>spring-profile.active：</strong>即为当前环境对应的profile，详情可以参考SpringBoot文档。&#x3D;&#x3D;注意：当’spring-profile.active’为空时，对应的连接符-也将不存在&#x3D;&#x3D;，datald的拼接格式变成 ${prefix}.${file-extension}</p><p><strong>file-extension：</strong>为配置内容的数据格式，可以通过配置项spring.cloud.nacos.config.file-extension来配置。目前只支持properties和yaml类型</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#application.yml</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span> <span class="comment">#表示开发环境</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderNacosMain83</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OrderNacosMain83.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RefreshScope</span> <span class="comment">//支持配置自动更新</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigClientController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;config.info&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String configInfo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/config/info&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getConfigInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><p>类似于JAVA中的package名和类名</p><p><strong>namespace：</strong>Nacos默认的命名空间是public,Namespace主要用来实现隔离，如现在有三个环境：测试，开发，生产。我们就可以创建三个Namespace，不同的Namespace之间是隔离的。</p><p><strong>Group：</strong>默认是DEFAULT_GROUP,Group可以把不同的微服务划分到同一个分组里面去</p><p><strong>DataID：</strong>Service是微服务，一个Service可以包含多个Cluster（集群），Nacos默认Cluster是DEFAULT,Cluster是对指定微服务的一个虚拟划分。不如说为了容灾，将Service微服务分别部署在了杭州机房和广州机房。</p><p>这时就可以给不同机房的服务分一个集群名，就近调用</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#nacos配置</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3377</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#Nacos服务注册中心地址</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#Nacos服务注册中心地址</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span>        <span class="comment">#指定yaml格式的配置</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">TEST_GROUP</span>           <span class="comment">#表示分组</span></span><br></pre></td></tr></table></figure><h3 id="Nacos集群和持久化配置（重要）"><a href="#Nacos集群和持久化配置（重要）" class="headerlink" title="Nacos集群和持久化配置（重要）"></a>Nacos集群和持久化配置（重要）</h3><p>Nacos自带derby数据库，在我们使用集群时需要切换到MySQL数据库。</p><ol><li><p>复制nacos-mysql.sql文件，创建数据：&#x3D;&#x3D;D:\application\Dubbo\Nacos\nacos\conf\nacos-mysql.sql&#x3D;&#x3D;</p></li><li><p>配置数据库数据源配置：</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># db.url.0=jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="comment"># db.user.0=root</span></span><br><span class="line"><span class="comment"># db.password.0=newpassword</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：mysql版本8.0以上的要在nacos目录下创建文件夹plugins\mysql\，将mysql8.0的驱动放进去</p></blockquote></li><li><p>编辑startup.cmd启动命令，将set MODE&#x3D;“standalone” 变成set MODE&#x3D;“cluster” 然后双击即可</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 框架功能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC</title>
      <link href="/2022/10/06/frame/SpringMVC/"/>
      <url>/2022/10/06/frame/SpringMVC/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><hr><p><strong>MVC</strong></p><p>​模型（dao,service） 视图（jsp） 控制器（servlet）</p><p>​daoserviceservlet:转发，重定向jsp(本质是servlet)&#x2F;html</p><p><img src="D:\Data\Typora\资料库\图纸\SpringMVC.png"></p><table><thead><tr><th align="center"><a href="D:\Data\Typora\资料库\图纸\mybatis.png">MVC实现图</a></th></tr></thead></table><p><strong>Spring MVC</strong></p><p>​基于java实现MVC的轻量级框架(DispatcherServlet)</p><p>​高效，基于请求响应的MVC框架</p><p>​与Spring兼容性好，无缝结合</p><p>​约定优于配置</p><p>​功能强大：RESTful、数据验证、格式化、本地化、主题等</p><p>​简洁灵活</p><hr><p>[TOC]</p><hr><h4 id="一、简要流程分析"><a href="#一、简要流程分析" class="headerlink" title="一、简要流程分析"></a>一、简要流程分析</h4><ol><li><p><strong>DispatcherServlet</strong>表示前端控制器，是整个SpringMVC的<strong>控制中心</strong>，用户发出请求，DispatcherServlet接收请求并拦截请求</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--假设请求url：http://localhost:8080/SpringMVC/hello--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--1.域名http://localhost:8080--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--2.springMVC部署在服务器上的站点--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--3.hello表示控制器--&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>HanderMapping为处理器映射。由DispatcherServlet调用，根据请求url查找Handler</p></li><li><p>HanderExecution表示具体的Handler。主要作用是根据url查找控制器</p></li><li><p>HanderExecution将解析后的信息传递给DispatcherServlet,如解析控制器映射等</p></li><li><p>HandlerAdapter表示处理器适配器，其按照特定的规则去执行Handler</p></li><li><p>Handler让具体的Controller执行</p></li><li><p>Controller将具体的执行信息返回给HandlerAdapter,如ModelAndView</p></li><li><p>HandlerAdapter将视图逻辑名或模型传递给DispatcherServlet</p></li><li><p>DispatcherServlet调用视图解析器（ViewResolver）来解析HandlerAdapter传递的逻辑视图名。</p></li><li><p>视图解析器将解析的逻辑视图名传给DispatcherServlet</p></li><li><p>DispatcherServlet根据视图解析器解析的试图结果，调用具体的视图</p></li><li><p>最终视图呈现给用户</p></li></ol><h4 id="二、环境搭建步骤"><a href="#二、环境搭建步骤" class="headerlink" title="二、环境搭建步骤"></a>二、环境搭建步骤</h4><ol><li><p>添加Maven依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--单元测试--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--tomcat需要这个包才能解析jsp,servlet--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--JSP标准标签库--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置web.xml文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注册DispatcherServlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--关联一个springmvc的配置文件:【servlet-name】-servlet.xml--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--启动级别1--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--/ 匹配所有的请求:(不包括.jsp)--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--/* 匹配所有的请求：(包括.jsp)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置springmvc-servlet.xml文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用注解--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--自动扫描包，让指定包下的注解生效，由IOC容器统一管理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.xdj.controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--让Spring MVC不处理静态资源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        支持mvc注解驱动</span></span><br><span class="line"><span class="comment">        在spring中一般采用@RequestMapping注解来完成映射关系</span></span><br><span class="line"><span class="comment">        要想使@RequestMapping注解生效</span></span><br><span class="line"><span class="comment">        必须向上下文中注册DefaultAnnotationHandlerMapping</span></span><br><span class="line"><span class="comment">        和一个AnnotationMethodHandlerAdapter</span></span><br><span class="line"><span class="comment">        这两个实例分别在类级别和方法级别处理</span></span><br><span class="line"><span class="comment">        而annotation-driven配置帮助我们自动完成上述两个实例的注入</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--3.视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="attr">id</span>=<span class="string">&quot;InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--不使用注解--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--1.处理器映射器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--2.处理器适配器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--3.视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="attr">id</span>=<span class="string">&quot;InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Handler--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xdj.controller.HelloController&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>不同实现SpringMVC的方式</p><ol><li><p>Servlet请求和相应</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//1.获取前端参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;method&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(method.equals(<span class="string">&quot;add&quot;</span>))&#123;</span><br><span class="line">            req.getSession().setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;执行了add方法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(method.equals(<span class="string">&quot;delete&quot;</span>))&#123;</span><br><span class="line">            req.getSession().setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;执行了delete方法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.调用业务层</span></span><br><span class="line">        <span class="comment">//3.试图转发或重定向</span></span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;/WEB-INF/jsp/test.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>实现接口缺点，一个类只能实现一个方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实现该接口说明这就是一个控制器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> <span class="keyword">implements</span> <span class="title class_">Controller</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//ModelAndView 模型和视图</span></span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">        <span class="comment">//封装对象，放在ModelAndView中，Model</span></span><br><span class="line">        mv.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;HelloSpringMVC&quot;</span>);</span><br><span class="line">        <span class="comment">//封装要跳转的视图，放在ModelAndView中</span></span><br><span class="line">        mv.setViewName(<span class="string">&quot;hello&quot;</span>);<span class="comment">// /WEB-INF/jsp/hello.jsp</span></span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注解Annotation</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//该注解说明这是一个Controller</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="comment">//该注解说明这是一个Controller,并返回内容为json格式</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="comment">//映射请求,括号内为映射访问路径</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">        <span class="comment">//封装数据</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;Hello,SpringMVCAnnotation!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;<span class="comment">//会被视图解析器处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="三、Restful风格："><a href="#三、Restful风格：" class="headerlink" title="三、Restful风格："></a>三、Restful风格：</h4><p>​改变url路径风格，简洁，高效，同时具备安全性</p><ol><li><p>路径风格</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//原来     url:http://localhost/8080/restful?a=1&amp;b=2</span></span><br><span class="line"><span class="comment">//Restful ulr:http://localhost/8080/restful/1/2</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">@RequestMapping(&quot;/restful/&#123;a&#125;/&#123;b&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getRestful</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> a,<span class="meta">@PathVariable</span> <span class="type">int</span> b, Model model)</span>&#123;</span><br><span class="line">model.addAttribute(<span class="string">&quot;add&quot;</span>,a+b);</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>RequestMapping注解及相关注解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//method = RequestMethod.GET相当于@GetMapping</span></span><br><span class="line"><span class="meta">@RequestMapping(name = &quot;/getUser&quot;,method = RequestMethod.GET)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/getUser&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping</span> </span><br><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="meta">@PatchMapping</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="四、Controller"><a href="#四、Controller" class="headerlink" title="四、Controller"></a>四、Controller</h4><ol><li><p>依靠视图解析器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;Hello,SpringMVCAnnotation!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;<span class="comment">//会被视图解析器处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>路径转发(有视图解析器无需该方法)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;Hello,SpringMVCAnnotation!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;forward:/hello&quot;</span>;<span class="comment">//转发路径</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>路径重定向</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;Hello,SpringMVCAnnotation!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/hello.jsp&quot;</span>;<span class="comment">//通过文件路径前加redirect:进行转发</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="五、接收参数与数据回显"><a href="#五、接收参数与数据回显" class="headerlink" title="五、接收参数与数据回显"></a>五、接收参数与数据回显</h4><ol><li><p>提交的域名称和处理方法的参数名一致</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//提交数据http://localhost:8080/hello?name=xdj</span></span><br><span class="line"><span class="comment">//处理方式</span></span><br><span class="line"><span class="meta">@ReuqestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(Strinng name)</span>&#123;</span><br><span class="line">System.out.println(name);</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//控制台输出 xdj</span></span><br></pre></td></tr></table></figure></li><li><p>提交的域名称和处理方法的参数名不一致</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//提交数据  http://localhost:8080/hello?username=xdj</span></span><br><span class="line"><span class="comment">//处理方式</span></span><br><span class="line"><span class="meta">@ReuqestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> Strinng name)</span>&#123;</span><br><span class="line">System.out.println(name);    </span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//控制台输出 xdj</span></span><br></pre></td></tr></table></figure></li><li><p>提交一个对象</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//假设传递回一个User类实例user</span></span><br><span class="line"><span class="meta">@ReuqestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(User user)</span>&#123;</span><br><span class="line">System.out.println(user);    </span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Model：返回需要显示的内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//LinkedHashMap</span><br><span class="line">//ModelMap:继承了LinkedHashMap,所以拥有其所有功能</span><br><span class="line">//Model是ModelMap的精简版（大部分情况下我们使用Model）</span><br></pre></td></tr></table></figure></li><li><p>存在参数中文乱码问题</p><ol><li><p>配置过滤器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EncodingFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        servletRequest.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        servletResponse.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.xdj.filter.EncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>springMVC自带过滤器</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Tomcat</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--修改文件的路径：D:\application\tomcat\conf\server.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> </span></span><br><span class="line"><span class="tag">               <span class="attr">URLEncoding</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><h4 id="六、JSON"><a href="#六、JSON" class="headerlink" title="六、JSON"></a>六、JSON</h4><p><strong>前后端分离时代</strong>：后端部署后端，提供接口，提供数据；前端独立部署，负责渲染后端的数据；数据通过json传递</p><p><strong>JSON</strong>：是一种轻量级的数据交换格式，目前使用特别广泛。</p><ul><li>采用完全独立于编程语言的<strong>文本格式</strong>来存储和表示数据。</li><li>简洁和清晰的层次结构使得JSON成为理想的数据交换语言</li><li>易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</li></ul><ol><li><p>基本概念与格式</p><p>​是JavaScript对象的字符串表示法，它使用文本表示一个JS对象的信息，本质是一个字符串</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;xiadujian&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="string">&quot;9&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;sex&quot;</span><span class="punctuation">:</span><span class="string">&quot;男&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>JSON与JavaScript相互转换</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>:<span class="string">&#x27;Hello&#x27;</span>,<span class="attr">b</span>:<span class="string">&#x27;World&#x27;</span>&#125;;<span class="comment">//这是一个对象，注意键名也是可以使用引号包裹的</span></span><br><span class="line"><span class="keyword">var</span> json = &#123;<span class="string">&quot;a&quot;</span>:<span class="string">&quot;Hello&quot;</span>,<span class="string">&quot;b&quot;</span>:<span class="string">&quot;World&quot;</span>&#125;;<span class="comment">//这是一个JSON字符串，本质是一个字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//实现JSON转化为JavaScript使用JSON.parse()方法</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123;&quot;a&quot;:&quot;Hello&quot;,&quot;b&quot;:&quot;World&quot;&#125;&#x27;</span>);</span><br><span class="line"><span class="comment">//输出结果是&#123;a:&#x27;Hello&#x27;,b:&#x27;World&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//实现JavaScript转化为JSON使用JSON.stringify()方法</span></span><br><span class="line"><span class="keyword">var</span> json = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;<span class="attr">a</span>:<span class="string">&#x27;Hello&#x27;</span>,<span class="attr">b</span>:<span class="string">&#x27;World&#x27;</span>&#125;);</span><br><span class="line"><span class="comment">//输出结果是&#123;&quot;a&quot;:&quot;Hello&quot;,&quot;b&quot;:&quot;World&quot;&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>Jackson的使用</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加依赖--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span> <span class="comment">//添加了该注解就不会找页面了，直接返回一个字符串</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/j1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">json1</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;夏杜键&quot;</span>,<span class="number">7</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line"><span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> mapper.writeValueAsString(user);</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//若出现乱码，修改@RequestMapping</span></span><br></pre></td></tr></table></figure></li><li><p>Jackson乱码问题 配置springmvc-servlet.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Jackson乱码问题配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;objectMapper&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;failOnEmptyBeans&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Jackson时间配置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/j3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">json3</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="comment">//      SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span></span><br><span class="line"><span class="comment">//      ObjectMapper 时间解析后默认格式为时间戳:Timestamp</span></span><br><span class="line"><span class="comment">//不使用时间戳，来格式化输出</span></span><br><span class="line"><span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS,<span class="literal">false</span>);</span><br><span class="line"><span class="comment">//      String str = mapper.writeValueAsString(simpleDateFormat.format(date));</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> mapper.writeValueAsString(date);</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Fastjson</p><p>​是一款阿里开发的java包，方便实现json对象与JavaBean对象的转换，实现JavaBean对象与json字符串的转换，实现json对象与json字符串的转换</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.76<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Fastjson的使用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/j4&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">json4</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;夏&quot;</span>,<span class="number">7</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;夏杜键&quot;</span>,<span class="number">8</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;杜&quot;</span>,<span class="number">7</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;键&quot;</span>,<span class="number">7</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">        List&lt;User&gt; userList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        userList.add(user1);</span><br><span class="line">        userList.add(user2);</span><br><span class="line">        userList.add(user3);</span><br><span class="line">        userList.add(user4);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;**********Java对象 转为 JSON字符串*********&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> JSON.toJSONString(userList);</span><br><span class="line">        System.out.println(<span class="string">&quot;JSON.toJSONString(list)==&gt;&quot;</span>+str1);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> JSON.toJSONString(user1);</span><br><span class="line">        System.out.println(<span class="string">&quot;JSON.toJSONString(user1)==&gt;&quot;</span>+str2);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\n**********JSON字符串 转为 Java对象*********&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">jp_user1</span> <span class="operator">=</span> JSON.parseObject(str2,User.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;JSON.parseObject(str2,User.class)==&gt;&quot;</span>+jp_user1);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\n**********Java对象 转为 JSON对象*********&quot;</span>);</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> (JSONObject) JSON.toJSON(jp_user1);</span><br><span class="line">        System.out.println(<span class="string">&quot;(JSONObject) JSON.toJSON(jp_user1)==&gt;&quot;</span>+jsonObject.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\n**********JSON对象 转为 Java对象*********&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">to_java_user</span> <span class="operator">=</span> JSON.toJavaObject(jsonObject,User.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;JSON.toJavaObject(jsonObject,User.class);==&gt;&quot;</span>+to_java_user);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> JSON.toJSONString(userList);</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="D:\Data\Typora\资料库\图纸\Fastjson格式转化.png"></p></li></ol><h4 id="七、SpringMVC-整合SSM"><a href="#七、SpringMVC-整合SSM" class="headerlink" title="七、SpringMVC:整合SSM"></a>七、SpringMVC:整合SSM</h4><ol><li><p>创建项目，添加依赖，静态资源导出</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--依赖  junit,数据库驱动,连接池,servlet,jsp,mybatis,mybatis-spring,spring,lombok--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--junit 单元测试--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据库驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据库连接池连接 c3p0 dbcp--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Servlet-JSP--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1-b03<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Mybatis 及Mybatis与spring整合--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Spring--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--静态资源导出问题--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>连接测试数据库</p></li><li><p>建包    dao&#x2F;pojo&#x2F;service&#x2F;controller    pojo-vo视图层实体类    utils工具类</p></li><li><p>MVC三层架构内容</p><ul><li><p>MyBatis</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实体类模板</span></span><br><span class="line"><span class="keyword">package</span> com.xdj.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.ldap.PagedResultsControl;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Books</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> bookID;</span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> bookCounts;</span><br><span class="line">    <span class="keyword">public</span> String detail;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#properties模板</span></span><br><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssm?useUnicode=true&amp;amp;characterEncoding=utf8&amp;amp;useSSL=false&amp;amp;serverTimezone=UTC&amp;amp;rewriteBatchedStatements=true</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">newpassword</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis-config模板--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--扫描该包下的内容--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.xdj.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置数据库连接交给spring--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--添加映射相应的mapper.xml文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用映射器接口实现类的完全限定类名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.xdj.dao.BookMapper&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用相对于类路径的资源引用 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;mapper resource=&quot;com/xdj/dao/BookMapper.xml&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//dao层接口模板</span></span><br><span class="line"><span class="keyword">package</span> com.xdj.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xdj.pojo.Books;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookMapper</span> &#123;</span><br><span class="line">    <span class="comment">//增加一本书</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">addBook</span><span class="params">(Books books)</span>;</span><br><span class="line">    <span class="comment">//删除一本书</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteBook</span><span class="params">(<span class="meta">@Param(&quot;bookID&quot;)</span> <span class="type">int</span> id)</span>;</span><br><span class="line">    <span class="comment">//更新一本书</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateBook</span><span class="params">(Books books)</span>;</span><br><span class="line">    <span class="comment">//查询一本书</span></span><br><span class="line">    Books <span class="title function_">queryBook</span><span class="params">(<span class="meta">@Param(&quot;bookID&quot;)</span> <span class="type">int</span> id)</span>;</span><br><span class="line">    <span class="comment">//查询全部的书</span></span><br><span class="line">    List&lt;Books&gt; <span class="title function_">queryAllBook</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--dao层接口mapper映射--&gt;</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.xdj.dao.BookMapper&quot;&gt;</span><br><span class="line">    &lt;insert id=&quot;addBook&quot; parameterType=&quot;Books&quot;&gt;</span><br><span class="line">        insert into ssmbuild.books(bookName,bookCounts,detail)</span><br><span class="line">        values (#&#123;bookName&#125;,#&#123;bookCounts&#125;,#&#123;detail&#125;)</span><br><span class="line">    &lt;/insert&gt;</span><br><span class="line">    &lt;delete id=&quot;deleteBook&quot; parameterType=&quot;int&quot;&gt;</span><br><span class="line">        delete from ssmbuild.books where bookID = #&#123;bookID&#125;</span><br><span class="line">    &lt;/delete&gt;</span><br><span class="line">    &lt;update id=&quot;updateBook&quot; parameterType=&quot;Books&quot;&gt;</span><br><span class="line">        update ssmbuild.books</span><br><span class="line">        set bookName = #&#123;bookName&#125;,bookCounts = #&#123;bookCounts&#125;,detail = #&#123;detail&#125;</span><br><span class="line">        where bookID = #&#123;bookID&#125;</span><br><span class="line">    &lt;/update&gt;</span><br><span class="line">    &lt;select id=&quot;queryBook&quot; parameterType=&quot;int&quot; resultType=&quot;Books&quot;&gt;</span><br><span class="line">        select *</span><br><span class="line">        from ssmbuild.books where bookID = #&#123;bookID&#125;;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;select id=&quot;queryAllBook&quot; resultType=&quot;Books&quot;&gt;</span><br><span class="line">        select *</span><br><span class="line">        from ssmbuild.books;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//service层接口</span></span><br><span class="line"><span class="keyword">package</span> com.xdj.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xdj.pojo.Books;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="comment">//增加一本书</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">addBook</span><span class="params">(Books books)</span>;</span><br><span class="line">    <span class="comment">//删除一本书</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteBook</span><span class="params">( <span class="type">int</span> id)</span>;</span><br><span class="line">    <span class="comment">//更新一本书</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateBook</span><span class="params">(Books books)</span>;</span><br><span class="line">    <span class="comment">//查询一本书</span></span><br><span class="line">    Books <span class="title function_">queryBook</span><span class="params">( <span class="type">int</span> id)</span>;</span><br><span class="line">    <span class="comment">//查询全部的书</span></span><br><span class="line">    List&lt;Books&gt; <span class="title function_">queryAllBook</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//service层接口实现</span></span><br><span class="line"><span class="keyword">package</span> com.xdj.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xdj.dao.BookMapper;</span><br><span class="line"><span class="keyword">import</span> com.xdj.pojo.Books;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//service 调用 dao</span></span><br><span class="line">    <span class="keyword">private</span> BookMapper bookMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookMapper</span><span class="params">(BookMapper bookMapper)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookMapper = bookMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">addBook</span><span class="params">(Books books)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.addBook(books);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">deleteBook</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.deleteBook(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">updateBook</span><span class="params">(Books books)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.updateBook(books);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Books <span class="title function_">queryBook</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.queryBook(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Books&gt; <span class="title function_">queryAllBook</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.queryAllBook();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Spring</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Spring主配置文件--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定要扫描的包，这个包下面的注解就会生效--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.xdj.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在这里加入内容 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--适合多人共同完成不同部分工作整合--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-dao.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-service.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-mvc.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Spring-dao层配置文件--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--1.关联数据库文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;database.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--2.连接数据池</span></span><br><span class="line"><span class="comment">        dbcp:半自动化，不能自动连接</span></span><br><span class="line"><span class="comment">        c3p0:自动化操作（自动化加载配置文件）</span></span><br><span class="line"><span class="comment">        *druid:</span></span><br><span class="line"><span class="comment">        hikari:</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--c3p0连接池私有属性--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--最大连接数和最小连接数--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;30&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--关闭连接池后不自动commit(提交)--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;autoCommitOnClose&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--获取连接超时时间--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;checkoutTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10000&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--当获取连接失败重试次数--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquireRetryAttempts&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--3.sqlSessionFactory--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--绑定Mybatis配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--4.配置dao接口扫描包，动态的实现了dao接口可以注入到Spring容器中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入 sqlSessionFactory--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--要扫描的包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.xdj.dao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Spring-service层配置文件--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--1.扫描service下的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.xdj.service&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--2.将我们的所有业务类，注入到Spring,可以通过配置，或者注解实现--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;BookServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xdj.service.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookMapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--3.声明事务配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--4.AOP事务支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>SpringMVC</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring-mvc配置文件--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/spring-mvc.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--1.注解驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--2.静态资源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--3.扫描包：controller--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.xdj.controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--4.视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--web.xml--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--DispatchServlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--乱码过滤--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Session--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>15<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h4 id="八、Ajax技术"><a href="#八、Ajax技术" class="headerlink" title="八、Ajax技术"></a>八、Ajax技术</h4><p>​核心是<strong>XMLHttpRequest</strong>对象，该对象创建于JavaScript中。我们一般使用<a href="D:\Data\Typora\资料库\文件\jquery-3.6.0.js">jQuery包</a>来实现<strong>前后端分离，异步刷新</strong></p><ol><li><p>导入使用需要的包</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%--导入jQuery文件--%&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/static/js/jquery-3.6.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>具体使用</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--基本b</span></span><br><span class="line"><span class="comment">1.url:请求地址</span></span><br><span class="line"><span class="comment">2.data:请求数据</span></span><br><span class="line"><span class="comment">3.success:成功回调函数</span></span><br><span class="line"><span class="comment">4.error:失败回调函数</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//jQuery 简化 $   jQuery.get() &lt;==&gt; $.get()</span></span></span><br><span class="line"><span class="language-javascript">$.<span class="title function_">post</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">url</span>:<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/a1&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;<span class="string">&quot;name&quot;</span>:$(<span class="string">&quot;#username&quot;</span>).<span class="title function_">val</span>()&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">success</span>:<span class="keyword">function</span> (<span class="params">data</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(data)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">             <span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">data</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(data)</span></span><br><span class="line"><span class="language-javascript">             &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**简化版 $.post(url,param[],success)**/</span></span><br><span class="line">$.post(<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/a2&quot;</span>,function (data)&#123;</span><br><span class="line">console.log(data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>实现前端显示内容</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a2</span>(<span class="params"></span>) &#123;</span><br><span class="line">$.<span class="title function_">post</span>(&#123;</span><br><span class="line"><span class="attr">url</span>:<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/a3&quot;</span>,</span><br><span class="line"><span class="attr">data</span>:&#123;<span class="string">&quot;pass&quot;</span>:$(<span class="string">&quot;#pass&quot;</span>).<span class="title function_">val</span>()&#125;,</span><br><span class="line"><span class="attr">success</span>:<span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (data.<span class="title function_">toString</span>()===<span class="string">&#x27;ok&#x27;</span>)&#123;</span><br><span class="line">$(<span class="string">&quot;#passInfo&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;green&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">$(<span class="string">&quot;#passInfo&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">$(<span class="string">&quot;#passInfo&quot;</span>).<span class="title function_">html</span>(data)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="九、SpringMVC拦截器"><a href="#九、SpringMVC拦截器" class="headerlink" title="九、SpringMVC拦截器"></a>九、SpringMVC拦截器</h4><p>拦截器类似于过滤器Filter的作用</p><p>拦截器是AOP思想的具体应用</p><ol><li><p>编写拦截器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">//return true:执行下一个拦截器，放行</span></span><br><span class="line">    <span class="comment">//return false:不执行下一个拦截，拦截当前请求</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;============处理前============&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//拦截日志</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;============处理后============&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=============清理=============&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置拦截器</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--拦截器配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- / :只拦截当前--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- /** :拦截当前请求下所有--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.xdj.config.MyInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="十、文件上传和下载"><a href="#十、文件上传和下载" class="headerlink" title="十、文件上传和下载"></a>十、文件上传和下载</h4><ol><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件上传--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--servlet-api高版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置传输文件属性</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件上传配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--请求的编码格式，必须和jsp的pageEncoding属性一致,以便正确读取表单的内容,默认编码ISO-8859-1--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--上传文件大小上限，单位为字节(10485760=10Mb)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10485760&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxInMemorySize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;40960&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>前端</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--上传--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/upload&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;upload&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Controller层调用上传</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@RequestParam(&quot;file&quot;) 将name=file空间得到的文件封装成CommonsMultipartFile对象</span></span><br><span class="line">    <span class="comment">//批量上传CommonsMultipartFile则为数组即可</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span>CommonsMultipartFile file, HttpServletRequest request)</span><span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//获取文件名:file.getOriginalFilename();</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">uploadFileName</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">        <span class="comment">//如文件名为空</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;&quot;</span>.equals(uploadFileName))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;上传文件名为:&quot;</span>+uploadFileName);</span><br><span class="line">        <span class="comment">//上传路径保存设置</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> request.getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">        <span class="comment">//如果路径不存在，创建一个</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">realPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">        <span class="keyword">if</span>(!realPath.exists())&#123;</span><br><span class="line">            realPath.mkdir();</span><br><span class="line">        &#125;System.out.println(<span class="string">&quot;上传文件保存地址:&quot;</span>+realPath);</span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> file.getInputStream();<span class="comment">//文件输入流 读</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(realPath,uploadFileName));<span class="comment">//文件输出流 写</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//读取写出</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span> ((len=is.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            os.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            os.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        os.close();</span><br><span class="line">        is.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//采用file.transferTo 来保存上传的文件</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/upload2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">upload2</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> CommonsMultipartFile file,HttpServletRequest request)</span><span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="comment">//上传路径保存设置</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> request.getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">realPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//上传文件地址</span></span><br><span class="line">        System.out.println(<span class="string">&quot;上传文件保存地址:&quot;</span>+realPath);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//通过CommonsMultipartFile的方法直接写入文件（注意这个时候）</span></span><br><span class="line">        file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(realPath+<span class="string">&quot;/&quot;</span>+file.getOriginalFilename()));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>Controller层调用下载</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/download&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">downloads</span><span class="params">(HttpServletResponse response,HttpServletRequest request)</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;downloads()&quot;</span>);</span><br><span class="line">        <span class="comment">//要下载的文件地址</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> request.getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;1.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.设置response响应头</span></span><br><span class="line">        response.reset();<span class="comment">//设置页面不缓存，清空buffer</span></span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);<span class="comment">//字符编码</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;multipart/form-data&quot;</span>);<span class="comment">//二进制传输数据</span></span><br><span class="line">        <span class="comment">//设置响应头</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;fileName=&quot;</span>+ URLEncoder.encode(fileName,<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path,fileName);</span><br><span class="line">        <span class="comment">//2.读取文件--输入流</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">        <span class="comment">//3.写出文件--输出流</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] buff = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> index= <span class="number">0</span> ;</span><br><span class="line">        <span class="comment">//4.执行 写出操作</span></span><br><span class="line">        <span class="keyword">while</span> ((index=input.read(buff))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            out.write(buff,<span class="number">0</span>,index);</span><br><span class="line">            out.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        out.close();</span><br><span class="line">        input.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 框架功能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VUE</title>
      <link href="/2022/10/06/frame/VUE/"/>
      <url>/2022/10/06/frame/VUE/</url>
      
        <content type="html"><![CDATA[<h1 id="VUE"><a href="#VUE" class="headerlink" title="VUE"></a>VUE</h1><p><strong>Vue是一个渐进式的框架</strong>：</p><ol><li>意味着可以将Vue作为应用一部分嵌入其中，带来更丰富的交互体验</li><li>将更多的业务逻辑使用Vue实现，那么Vue的核心库及其生态系统</li><li>Core+Vue-router+Vuex可以满足各式需求</li></ol><p><strong>Vue有很多特点和Web开发中常见的高级功能</strong></p><ol><li>解耦视图和数据</li><li>可复用的组件</li><li>前端路由技术</li><li>状态管理</li><li>虚拟DOM</li></ol><hr><p>[TOC]</p><hr><h2 id="一、Vue-js的安装"><a href="#一、Vue-js的安装" class="headerlink" title="一、Vue.js的安装"></a>一、Vue.js的安装</h2><p><strong>方式一：直接CDN引入</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 生产环境版本，优化了尺寸和速度--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--2021-08-19日最新--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@next&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>方式二：下载和引入</strong></p><p>​开发环境：<a href="https://vuejs.org/js/vue.js">https://vuejs.org/js/vue.js</a></p><p>​生产环境：<a href="https://vuejs.org/js/vue.min.js">https://vuejs.org/js/vue.min.js</a></p><p><strong>方式三：NPM安装</strong></p><blockquote><p>&#x3D;&#x3D;ctrl+alt+L&#x3D;&#x3D;内容格式化</p></blockquote><p>VUE开发者工具 <strong>Vue.js devtools_3.1.2_0</strong></p><h2 id="二、HelloVuejs"><a href="#二、HelloVuejs" class="headerlink" title="二、HelloVuejs"></a>二、HelloVuejs</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//let(变量)/const（常量）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//编程范式（声明式编程）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,  <span class="comment">//用于挂载要管理的元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;      <span class="comment">//定义一些数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>:<span class="string">&#x27;你好啊，夏杜键！&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//元素js的做法(编程范式：命令式编程)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1.创建div元素，设置id属性</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//2.定义一个变量叫message</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//3.将message变量放在前面的div元素中显示</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>出现编程范式的区别：以前是<strong>命令式编程</strong>，现在是<strong>声明式编程</strong></p><p>&#x3D;&#x3D;创建&#x3D;&#x3D;Vue对象：const app &#x3D; new Vue({el:[指定元素] ，data:[变量名：变量值]})</p><ol><li><p>列表展示：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in movies&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">movies</span>:[<span class="string">&#x27;夏杜键&#x27;</span>,<span class="string">&#x27;唐磊&#x27;</span>,<span class="string">&#x27;葛佳铭&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--可以在浏览器的控制台使用该方式添加内容--&gt;</span></span><br><span class="line">app.movies.push(&#x27;丰惠&#x27;)</span><br></pre></td></tr></table></figure></li><li><p>计数</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--方式一--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--方式二--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">count</span>:<span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">add</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">count</span>++;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">sub</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">count</span>--;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="语法糖"><a href="#语法糖" class="headerlink" title="语法糖"></a>语法糖</h3><p>v-on:click&#x3D;”add”  —————-&gt; @click&#x3D;”add”   是一种简写</p><p>v-bind:{属性名}&#x3D;”{属性值}” ———-&gt;:{属性名}&#x3D;”{属性值}”</p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p><strong>$mount</strong>：挂载</p><p><strong>$event</strong>:参数占位符，点击</p><p><strong>data</strong>：对象式，函数式</p><p><strong>object.defineproperty</strong>：添加属性（通过一些设定选择是否可以修改，遍历，获取该属性）</p><h2 id="三、Vue中的MVVM"><a href="#三、Vue中的MVVM" class="headerlink" title="三、Vue中的MVVM"></a>三、Vue中的MVVM</h2><p><strong>MVVM：</strong>Model View ViewModel</p><p><img src="D:\Data\Typora\资料库\图纸\MVVM.png"></p><ol><li>View层：<ul><li>视图层</li><li>在我们前端开发中，通常就是DOM层。</li><li>主要的作用是给用户展示各种信息</li></ul></li><li>Model层：<ul><li>数据层</li><li>数据可能是我们固定的死数据，更多的是来自我们服务器，从网络上请求下来的数据。</li><li>在我们计数器的案例中，就是后面抽取出来的obj，当然，里面的数据可能没有这么简单</li></ul></li><li>VueModel层：<ul><li>视图模型层</li><li>视图模型层是View和Model沟通的桥梁</li><li>一方面它实现了Data Binding,也就是数据绑定，将Model的改变实时的反应到View中</li><li>另一方面它实现了DOM Listener，也就是DOM监听，当DOM发生一些事件（点击、滚动、touch等）时，可以监听到，并在需要的情况下改变对应的Data。</li></ul></li></ol><h2 id="四、Vue中的options对象"><a href="#四、Vue中的options对象" class="headerlink" title="四、Vue中的options对象"></a>四、Vue中的options对象</h2><p><strong>属性</strong>（详细可见官网）<a href="https://cn.vuejs.org/v2/api/">https://cn.vuejs.org/v2/api/</a></p><table><thead><tr><th align="right">属性</th><th>类型</th><th>作用</th><th>举例</th></tr></thead><tbody><tr><td align="right">el</td><td>string|HTMLElement</td><td>决定之后Vue实例会管理哪一个DOM</td><td>el:’#app’</td></tr><tr><td align="right">data</td><td>Object|Function</td><td>Vue实例对应的数据对象</td><td>data:{count:0 }</td></tr><tr><td align="right">methods</td><td>{[key:string]:function}</td><td>定义属于Vue的一些方法，可以在其他地方调用，也可以在指令中使用</td><td>methods:{add(){this.count++;   }}</td></tr><tr><td align="right">computed</td><td>Object|Function</td><td>计算属性</td><td>&#x2F;&#x2F;计算属性 computed: {     fullName:function (){         return this.firstName + “ “ + this.lastName     } }</td></tr><tr><td align="right"></td><td></td><td></td><td></td></tr></tbody></table><hr><p><strong>生命周期</strong>：事务从诞生到消亡的整个生命周期。</p><p><strong>代码规范</strong>：</p><h2 id="五、基本操作"><a href="#五、基本操作" class="headerlink" title="五、基本操作"></a>五、基本操作</h2><h3 id="v-操作"><a href="#v-操作" class="headerlink" title="v-*操作"></a>v-*操作</h3><ol><li><p>mustache语法(胡须语法):</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--单个变量直接显示--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数值变量可以进行计算--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;num1 + num2&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数值变量可以进行判断--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;num1 &lt; num2&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--可以直接用==比较字符串内容--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message == message2&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>: <span class="string">&#x27;夏杜键&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message2</span>: <span class="string">&#x27;夏杜键&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">num1</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">num2</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>v-once指令</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--使用 v-once 只会渲染一次，不会随着数据改变而改变，前端不能修改值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-once</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>v-html指令</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;url&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--以html的形式展示其中的内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&quot;url&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>v-text指令</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--展示效果一样，但一般不用，因为不够灵活，而且会覆盖原本内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-text</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>v-pre</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--原封不动显示标签内内容，不转换--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-pre</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>v-cloak(斗篷)</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--v-cloak类似于style样式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-attr">[v-cloak]</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--避免加载缓慢出现&#123;&#123;message&#125;&#125;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">v-cloak</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//在vue解析前，div中有一个属性v-cloak</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//在vue解析之后，div中没有一个v-cloak</span></span></span><br><span class="line"><span class="language-javascript">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="attr">message</span>:<span class="string">&#x27;一点也不好&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">  &#125;,<span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>v-on绑定事件监听</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--少量操作直接可用写在内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;counter++&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--调用方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--语法糖形式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--事件调用的方法没有参数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>按钮一<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--事件定义时，写函数时省略了小括号，但是方法本身是需要参数的.若无参会返回:undefined--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btn2()&quot;</span>&gt;</span>按钮二<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--获取事件点击Event对象:手动获取浏览器参数的event对象$event--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btn3($event)&quot;</span>&gt;</span>按钮三<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--多个参数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btn4(message,$event)&quot;</span>&gt;</span>按钮四<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;divClick&quot;</span>&gt;</span></span><br><span class="line">        不知道你有多美</span><br><span class="line">        <span class="comment">&lt;!--1.  .stop:阻止事件冒泡，即阻止触发父标签的事件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--2.  .prevent:阻止默认事件生效--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;baidu&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;跳转&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;submitClick&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--3.  监听某个键盘的按键,.enter只监听enter按钮--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup</span>=<span class="string">&quot;keyUp&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;keyUp&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--4.  .once:只监听一次--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>once<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>v-if  v-else-if  v-else</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--根据结果isShow为true或false显示或不显示标签内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--v-if和v-else配合使用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-else</span>&gt;</span>isShow为false显示我<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>v-show</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--v-show:根据内容为true或false决定是否显示该标签内容--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--相比于v-if:在网页上显示源代码发现v-show只是添加了一个style样式dispaly=none--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>v-for</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--1.在遍历时没有使用索引值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;name in names&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--2.在遍历时获取索引值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in names&quot;</span>&gt;</span>&#123;&#123;index+1&#125;&#125;&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--1.遍历对象中，如果只是获取一个值，那么获取的是value--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-for</span>=<span class="string">&quot;user in user&quot;</span>&gt;</span>&#123;&#123;user&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--2.获取key和value 格式:(value-key)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,key) in user&quot;</span>&gt;</span>&#123;&#123;key&#125;&#125;-&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--3.获取value的下标index--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,key,index) in user&quot;</span>&gt;</span>&#123;&#123;key&#125;&#125;-&#123;&#123;value&#125;&#125;-&#123;&#123;index&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><ol><li><p>基本使用</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">message</span>:<span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>结合radio使用</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--v-model绑定同一个变量，也会实现互斥 相当于name相同时只能选一个--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--因为v-model是双向绑定，当设置sex变量的默认值为男时，单选框也初始化默认选择男--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;male&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男d&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>男</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;female&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女d&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>女</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>您选择的性别是&#123;&#123;sex&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">sex</span>:<span class="string">&#x27;男d&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>结合checkbox使用</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--2.checkbox多选框--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>爱好<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;lanqiu&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;lanqiu&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobbies&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;篮球&quot;</span>&gt;</span>篮球</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;zuqiu&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;zuqiu&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobbies&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;足球&quot;</span>&gt;</span>足球</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;ppqiu&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;ppqiu&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobbies&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;乒乓球&quot;</span>&gt;</span>乒乓球</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;item in hobbies&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">isAgree</span>:<span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">hobbies</span>:[</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          ]</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>结合select使用</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--单选--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;isSelect&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>未选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>菠萝<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>西瓜<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>可可<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    当前选择为:&#123;&#123;isSelect&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--多选（按住ctrl拉选）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;isSelects&quot;</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>未选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>菠萝<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>西瓜<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>可可<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    当前选择为:&#123;&#123;isSelects&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">isSelect</span>: <span class="string">&#x27;未选择&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">isSelects</span>: [</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            ]</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>value绑定</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;item in loves&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;item&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;s&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>选择的&#123;&#123;s&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="attr">loves</span>:[</span></span><br><span class="line"><span class="language-javascript">             <span class="string">&#x27;快乐&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">             <span class="string">&#x27;幸福&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">             <span class="string">&#x27;自由&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">             <span class="string">&#x27;美好&#x27;</span></span></span><br><span class="line"><span class="language-javascript">         ],</span></span><br><span class="line"><span class="language-javascript">         <span class="attr">s</span>:[</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">         ]</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>v-model修饰符的使用</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--修饰符--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1.lazy:默认情况v-model同步输入框内容，该修饰符可以在失去焦点或者回车时更新数据--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.lazy</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--2.number:默认情况下同步数据是String类型，修改为数字类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&quot;age&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;typeof age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--3.trim:默认情况下输入内容有许多空格，可以去除首未空格--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.trim</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>你的名字&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>: <span class="string">&#x27;没什么好输入的&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">age</span>:<span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="动态绑定属性"><a href="#动态绑定属性" class="headerlink" title="动态绑定属性"></a>动态绑定属性</h3><ol><li><p>v-bind的基本使用</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--错误语法：&#123;&#123;&#125;&#125;只能在标签内使用，不能用于属性--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;img src=&quot;&#123;&#123;&#125;&#125;&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;imgURL&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>v-bind动态绑定class属性(两种方式：对象语法；数组语法)</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--对象语法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;h2 class=&quot;active&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;h2 :class=&quot;active&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;active:isActive&#125;&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;line:isLine&#125;&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;setColor&quot;</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">message</span>:<span class="string">&#x27;再来一次&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">isActive</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">isLine</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">setColor</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">isActive</span>==<span class="literal">true</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                  <span class="variable language_">this</span>.<span class="property">isActive</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">              &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                  <span class="variable language_">this</span>.<span class="property">isActive</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">              &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数组语法    加‘’是字符串，不加是变量--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">&quot;[active]&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">&quot;[&#x27;line&#x27;]&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">message</span>:<span class="string">&#x27;谢谢惠顾&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">active</span>:<span class="string">&#x27;active&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>v-bind动态绑定style</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&quot;color: red;font-size:50px&quot;</span>&gt;</span>王五吃了张三的肉<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;&#x27;color&#x27;:isColor,&#x27;font-size&#x27;:isFsize&#125;&quot;</span>&gt;</span>张三抢了王五的瓜<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:style</span>=<span class="string">&quot;setStyle()&quot;</span>&gt;</span>狗七骗了李二的姑娘<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">isColor</span>: <span class="string">&#x27;#2ff892&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">isFsize</span>:<span class="string">&#x27;50px&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">setStyle</span>:<span class="keyword">function</span> (<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">return</span> &#123;<span class="string">&#x27;color&#x27;</span>:<span class="variable language_">this</span>.<span class="property">isColor</span>,<span class="string">&#x27;font-size&#x27;</span>:<span class="variable language_">this</span>.<span class="property">isFsize</span>&#125;;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><ol><li><p>基本使用</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--连接两个变量--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;firstName + &quot; &quot; + lastName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;getForName()&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--计算属性方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">firstName</span>: <span class="string">&#x27;xve&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">lastName</span>: <span class="string">&#x27;xxx&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//计算属性</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">fullName</span>:<span class="keyword">function</span> (<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&quot; &quot;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">getForName</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&quot; &quot;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>复杂操作</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>共有以下这些书<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;book in books&quot;</span>&gt;</span>&#123;&#123;book.name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>总价格:&#123;&#123;totalPrice&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="attr">books</span>:[</span></span><br><span class="line"><span class="language-javascript">             &#123;<span class="attr">id</span>:<span class="number">110</span>,<span class="attr">name</span>:<span class="string">&#x27;自我修养&#x27;</span>,<span class="attr">price</span>:<span class="number">122</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">             &#123;<span class="attr">id</span>:<span class="number">111</span>,<span class="attr">name</span>:<span class="string">&#x27;暴富之路&#x27;</span>,<span class="attr">price</span>:<span class="number">188</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">             &#123;<span class="attr">id</span>:<span class="number">112</span>,<span class="attr">name</span>:<span class="string">&#x27;绝世秘籍&#x27;</span>,<span class="attr">price</span>:<span class="number">155</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">             &#123;<span class="attr">id</span>:<span class="number">113</span>,<span class="attr">name</span>:<span class="string">&#x27;盛世烟花&#x27;</span>,<span class="attr">price</span>:<span class="number">199</span>&#125;</span></span><br><span class="line"><span class="language-javascript">         ]</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//高阶函数:filter/map/reduce</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">totalPrice</span>: <span class="keyword">function</span> (<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">let</span> result = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;<span class="variable language_">this</span>.<span class="property">books</span>.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">                  result += <span class="variable language_">this</span>.<span class="property">books</span>[i].<span class="property">price</span>;</span></span><br><span class="line"><span class="language-javascript">              &#125;</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">return</span> result;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">              <span class="comment">//更简单的for循环写法</span></span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">for</span>(<span class="keyword">let</span> book <span class="keyword">in</span> <span class="variable language_">this</span>.<span class="property">books</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">              &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">for</span> (<span class="keyword">let</span> book <span class="keyword">of</span> <span class="variable language_">this</span>.<span class="property">books</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">              &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>计算属性setter和getter</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">firstName</span>: <span class="string">&#x27;宝宝&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">lastName</span>: <span class="string">&#x27;乖乖&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">fullName</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//一般不需要写set方法，只读属性</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> <span class="string">&#x27;要听话&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>计算属性和methods的对比</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--多次重复引用时，计算属性只引用一次，方法引用多次--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1.直接拼接:太过繁琐--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--2.通过定义methods--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;getFullName()&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;getFullName()&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;getFullName()&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;getFullName()&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--3。通过computed--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">firstName</span>:<span class="string">&#x27;夏目&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">lastName</span>:<span class="string">&#x27;秋悼&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">getFullName</span>:<span class="keyword">function</span> (<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;getFullName方法执行-------&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&quot; &quot;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span>;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">fullName</span>:<span class="keyword">function</span> (<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fullName属性获取-------&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&quot; &quot;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span>;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="监视属性"><a href="#监视属性" class="headerlink" title="监视属性"></a>监视属性</h3><ol><li><p>基本使用</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>现在天气&#123;&#123;info&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changWeather&quot;</span>&gt;</span>切换天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">isHot</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">info</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">isHot</span> ? <span class="string">&#x27;炎热&#x27;</span> : <span class="string">&#x27;寒冷&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">changWeather</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">isHot</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">isHot</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">                &#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">isHot</span> = <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/**watch:&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">          isHot: &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">              immediate:true,//初始化时即调用</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">              handler(newValue,oldValue)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                  console.log(&#x27;info被修改了&#x27;,newValue,oldValue)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">              &#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">          &#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      &#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">         */</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    app.$watch(<span class="string">&#x27;isHot&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">immediate</span>: <span class="literal">true</span>,<span class="comment">//初始化时即调用</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;info被修改了&#x27;</span>, newValue, oldValue)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>深度监视</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>a的值为&#123;&#123;number.a&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;number.a++&quot;</span>&gt;</span>点击让a+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>b的值为&#123;&#123;number.b&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;number.b++&quot;</span>&gt;</span>点击让b+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;button @click=&quot;number = &#123;a:666,b:888&#125;&quot;&gt;更换number对象&lt;/button&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="attr">number</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">             <span class="attr">a</span>:<span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">             <span class="attr">b</span>:<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">         &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">watch</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// &#x27;number.a&#x27;:&#123;</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//     handler(newValue, oldValue) &#123;</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//         console.log(&#x27;a变化了&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// &#125;,</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">number</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="attr">deep</span>:<span class="literal">true</span>,<span class="comment">//默认是false:只有对象地址变了才代表变了，true:内部属性也变了表示对象变了</span></span></span><br><span class="line"><span class="language-javascript">              <span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;number变化了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">              &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>简写监视属性</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">watch</span>:&#123;</span><br><span class="line">    <span class="comment">//当不需要immediate或deep时可以简写handler</span></span><br><span class="line">    <span class="title function_">isHot</span>(<span class="params">newValue,oldValue</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;info被修改了&#x27;</span>, newValue, oldValue)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.$watch(<span class="string">&#x27;isHot&#x27;</span>,<span class="keyword">function</span> (<span class="params">newValue, oldValue</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;info被修改了&#x27;</span>, newValue, oldValue)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="绑定样式"><a href="#绑定样式" class="headerlink" title="绑定样式"></a>绑定样式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;borderMe&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;mood&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;changeMood&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;borderMe&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;arr&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;夏杜键&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">mood</span>: <span class="string">&#x27;happy&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">arr</span>:[<span class="string">&#x27;xdj1&#x27;</span>,<span class="string">&#x27;xdj2&#x27;</span>,<span class="string">&#x27;xdj3&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">changeMood</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> arr = [<span class="string">&#x27;happy&#x27;</span>, <span class="string">&#x27;sad&#x27;</span>, <span class="string">&#x27;normal&#x27;</span>];</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">mood</span> = arr[<span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">3</span>)];</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>显示格式化后的时间<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>现在是:&#123;&#123;time&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>(计算属性)现在是:&#123;&#123;fmtTime&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>(方法)现在是:&#123;&#123;getFmtTime()&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>(过滤器)现在是:&#123;&#123;time | timeFormater&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>(过滤器)现在是:&#123;&#123;time | timeFormater(&#x27;YYYY-MM-DD&#x27;)&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/dayjs.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;mySlice&#x27;</span>,<span class="keyword">function</span> (<span class="params">value</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> value.<span class="title function_">slice</span>(<span class="number">0</span>,<span class="number">4</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">time</span>:<span class="number">1621561377603</span>,<span class="comment">//时间戳</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>:<span class="string">&#x27;你好，尚硅谷&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">fmtTime</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="title function_">dayjs</span>(<span class="variable language_">this</span>.<span class="property">time</span>).<span class="title function_">format</span>(<span class="string">&#x27;YYYY-MM DD HH:mm:ss&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">getFmtTime</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="title function_">dayjs</span>(<span class="variable language_">this</span>.<span class="property">time</span>).<span class="title function_">format</span>(<span class="string">&#x27;YYYY-MM DD HH:mm:ss&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//局部过滤器</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">filters</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">timeFormater</span>(<span class="params">value,str=<span class="string">&#x27;YYYY-MM DD HH:mm:ss&#x27;</span></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="title function_">dayjs</span>(value ).<span class="title function_">format</span>(str)</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">mySlice</span>(<span class="params">value</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> value.<span class="title function_">slice</span>(<span class="number">0</span>,<span class="number">4</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前的n值为<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&quot;n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>放大十倍值为<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-big</span>=<span class="string">&quot;n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;n++&quot;</span>&gt;</span>点我n++<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--autofocus:自动获取焦点--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-fbind:value</span>=<span class="string">&quot;n&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//全局</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">n</span>: <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">directives</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//参数 element:DOM元素;binding</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">big</span>(<span class="params">element,binding</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                element.<span class="property">innerText</span> = binding.<span class="property">value</span>*<span class="number">10</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">fbind</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//指令与元素成功绑定时（一上来）</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">bind</span>(<span class="params">element,binding</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//此处的this是window</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;bind&#x27;</span>,<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//指令所在元素被插入页面时</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">inserted</span>(<span class="params">element,binding</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//指令所在的模板被重新解析时</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">update</span>(<span class="params">element,binding</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="六、ES5-ES6"><a href="#六、ES5-ES6" class="headerlink" title="六、ES5-ES6"></a>六、ES5-ES6</h2><h3 id="let-x2F-var-块级作用域"><a href="#let-x2F-var-块级作用域" class="headerlink" title="let&#x2F;var-块级作用域"></a>let&#x2F;var-块级作用域</h3><p>ES6中的let定义的变量具有块级作用域</p><p>ES5中的var定义的变量没有块级作用域</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>4<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1.变量作用域:变量在什么范围内是可用</span></span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> name = <span class="string">&#x27;why&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//2.没有块级作用域引起的问题</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> btns = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//for(var i =0;i&lt;btns.length;i++)&#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span>(<span class="keyword">let</span> i =<span class="number">0</span>;i&lt;btns.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">        btns[i].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span> (<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第&#x27;</span>+(i+<span class="number">1</span>)+<span class="string">&#x27;个按钮被点击&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ES5无闭包—有闭包—ES6的let"><a href="#ES5无闭包—有闭包—ES6的let" class="headerlink" title="ES5无闭包—有闭包—ES6的let"></a>ES5无闭包—有闭包—ES6的let</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.ES5中没有使用闭包（错误方式）</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i =<span class="number">0</span> ; ; i++)&#123;</span><br><span class="line">    <span class="comment">//循环输出结果相同</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.ES5中使用闭包</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i =<span class="number">0</span> ; ; i++)&#123;</span><br><span class="line">    <span class="comment">//循环输出结果不同，但代码过于复杂</span></span><br><span class="line">    (<span class="keyword">function</span> (<span class="params">i</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    &#125;)(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.ES6使用let</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i =<span class="number">0</span> ; ; i++)&#123;</span><br><span class="line">    <span class="comment">//循环输出结果不相同</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="const的使用"><a href="#const的使用" class="headerlink" title="const的使用"></a>const的使用</h3><p>将某一个变量修饰为常量，不允许被改变（建议：优先使用const，只有需要改变时才用let）</p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">* 1.const修饰的标识符被赋值之后不能被修改</span><br><span class="line">* 2.在使用const定义的标识符时必须进行赋值</span><br><span class="line">* 3.常量的含义是指向的对象内存地址不能修改，但可用改变对象内部的属性</span><br></pre></td></tr></table></figure><h3 id="ES6对象的增强写法"><a href="#ES6对象的增强写法" class="headerlink" title="ES6对象的增强写法"></a>ES6对象的增强写法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//const obj = new Object();</span></span><br><span class="line">    <span class="keyword">const</span> obj = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;夏小兮&#x27;</span>,</span><br><span class="line">        age : <span class="number">3</span>,</span><br><span class="line">        run :<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;进行运动&quot;</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        eat :<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;进食&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.属性的增强写法</span></span><br><span class="line">    <span class="keyword">const</span> name = <span class="string">&#x27;夏至&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> age = <span class="number">5</span></span><br><span class="line">    <span class="comment">//ES5</span></span><br><span class="line">    <span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">        <span class="attr">name</span>: name,</span><br><span class="line">        age : age</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//ES6</span></span><br><span class="line">    <span class="keyword">const</span> obj3 = &#123;</span><br><span class="line">        name,</span><br><span class="line">        age</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj2)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj3)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2.函数的增强写法</span></span><br><span class="line">    <span class="comment">//ES5的写法</span></span><br><span class="line">    <span class="keyword">const</span> obj4 = &#123;</span><br><span class="line">        <span class="attr">run</span>:<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//ES6写法</span></span><br><span class="line">    <span class="keyword">const</span> obj5 = &#123;</span><br><span class="line">        <span class="title function_">run</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="七、组件化"><a href="#七、组件化" class="headerlink" title="七、组件化"></a>七、组件化</h2><p>任何应用都会被抽象成一颗组件树：</p><h3 id="组件的定义"><a href="#组件的定义" class="headerlink" title="组件的定义"></a>组件的定义</h3><p>实现应用中<span style="color:red">局部功能代码</span>（html,css,js）和<span style="color:red">资源（图片，视频，音频）</span>的集合</p><p><img src="D:\Data\Typora\资料库\图纸\Vue与VueComponent关系.png"></p><h4 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h4><p><span style="color:green">单文件组件</span>:一个文件中只包含一个组件</p><h4 id="非单文件组件"><a href="#非单文件组件" class="headerlink" title="非单文件组件"></a>非单文件组件</h4><p><span style="color:green">非单文件组件</span>：一个文件中包含n个组件</p><h3 id="注册组件的基本步骤"><a href="#注册组件的基本步骤" class="headerlink" title="注册组件的基本步骤"></a>注册组件的基本步骤</h3><ol><li>创建组件构造器 调用Vue.extend()</li><li>组测组件 调用Vue.component()</li><li>使用组件 在该实例作用范围内使用组件</li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1.创建组件构造器对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> cpnC = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>:</span></span><br><span class="line"><span class="language-javascript">            <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &lt;h2&gt;我是标题&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &lt;p&gt;我是内容&lt;/p&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &lt;p&gt;我也是内容&lt;/p&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            `</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//2.注册组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;my-cpn&#x27;</span>,cpnC)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="全局组件-amp-局部组件"><a href="#全局组件-amp-局部组件" class="headerlink" title="全局组件&amp;局部组件"></a>全局组件&amp;局部组件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1.创建组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> cpnC = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>:</span></span><br><span class="line"><span class="language-javascript">            <span class="string">`&lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;h2 style=&quot;color: crimson&quot;&gt;my name is X&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;/div&gt;`</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//2.注册组件（全局组件,意味着可以在多个Vue实例下使用）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//Vue.component(&#x27;cpn&#x27;, cpnC)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//如何注册局部组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//在Vue实例中定义components</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;x&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//cpn使用组件时的标签名</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">cpn</span>: cpnC</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app2 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app2&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="父组件和子组件"><a href="#父组件和子组件" class="headerlink" title="父组件和子组件"></a>父组件和子组件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn2</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1.创建并注册第一个组件（子组件）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> cpnC1 = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>:</span></span><br><span class="line"><span class="language-javascript">            <span class="string">`&lt;div&gt;&lt;h1&gt;我是最强的儿子&lt;/h1&gt;&lt;/div&gt;`</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//Vue.component(&#x27;c1&#x27;,cpnC1)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//2.创建并注册第二个组件(父组件)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> cpnC2 = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>:</span></span><br><span class="line"><span class="language-javascript">                <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                  &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                  &lt;h1&gt;我是最强的baba</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                    &lt;cpn1&gt;&lt;/cpn1&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                  &lt;/h1&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                  &lt;/div&gt;`</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">cpn1</span>: cpnC1</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//Vue.component(&#x27;c2&#x27;,cpnC2)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">cpn2</span>: cpnC2</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="组件的语法糖"><a href="#组件的语法糖" class="headerlink" title="组件的语法糖"></a>组件的语法糖</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn2</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    //语法糖（全局组件）</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    Vue.component(&#x27;cpn&#x27;, &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template:</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是何人<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是神<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    const app = new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        el: &#x27;#app&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        data: &#123;&#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        //局部组件语法糖</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        components:&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#x27;cpn2&#x27;:&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                template:</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>你是何人<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        <span class="tag">&lt;<span class="name">p</span>&gt;</span>你是猪<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="八、生命周期"><a href="#八、生命周期" class="headerlink" title="八、生命周期"></a>八、生命周期</h2><h3 id="引出生命周期"><a href="#引出生命周期" class="headerlink" title="引出生命周期"></a>引出生命周期</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;opacity,color:&#x27;green&#x27;&#125;&quot;</span>&gt;</span>我爱学习，天天向上<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">opacity</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">m</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//Vue完成模板的解析并把-初始-真实的DOM元素放入页面后（挂载完毕）调用mounted</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">m</span>) <span class="variable language_">this</span>.<span class="property">opacity</span> -= <span class="number">0.01</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">else</span> <span class="variable language_">this</span>.<span class="property">opacity</span> += <span class="number">0.01</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//if (app.opacity &lt;= 0) app.opacity=1</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">opacity</span> &gt;= <span class="number">1</span> || <span class="variable language_">this</span>.<span class="property">opacity</span> &lt;= <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">m</span> = !<span class="variable language_">this</span>.<span class="property">m</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;, <span class="number">50</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="生命周期过程"><a href="#生命周期过程" class="headerlink" title="生命周期过程"></a>生命周期过程</h3><blockquote><p><span style="font-size:40px;color:green">（创建 挂载 更新 销毁）</span></p></blockquote><ol><li>beforeCreate:无法通过vm访问data中的数据（还3未监测数据）</li><li>Created:此时：可以通过vm访问到data中的数据，methods中的方法(可以使用数据)</li><li>beforeMount:此时页面呈现的是未经Vue遍历的DOM结构，所有对DOM的操作最终都不奏效</li><li>mounted:此时：页面中呈现的是经过Vue编译的DOM.对DOM的操作均有效（尽可能避免）。至此初始化过程结束，一般在此进行：开启定时器、发送网络请求、订阅消息、绑定自定义事件、等初始化操作</li><li>beforeUpdate:此时：数据是新的，但页面是旧的，即：页面尚未和数据保持同步</li><li>updated:此时：数据是新的，页面也是新的，即：页面和数据保持同步</li><li>beforeDestroy:此时：vm中所有的：data、methods、指令等等，都处于可用状态，马上要执行销毁过程，一般在此阶段：关闭定时器、取消订阅消息、解绑自定义事件等收尾工作</li><li>destroyef:</li></ol><p><img src="D:\Data\Typora\资料库\图纸\VUE生命周期.jpg"></p><h3 id="总结生命周期"><a href="#总结生命周期" class="headerlink" title="总结生命周期"></a>总结生命周期</h3><h2 id="九、Vue脚手架"><a href="#九、Vue脚手架" class="headerlink" title="九、Vue脚手架"></a>九、Vue脚手架</h2><h3 id="安装Vue脚手架"><a href="#安装Vue脚手架" class="headerlink" title="安装Vue脚手架"></a>安装Vue脚手架</h3><ol><li><p>第一步（仅第一次执行）：全局安装@vue&#x2F;cli</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure></li><li><p>第二步：切换到你要创建项目的目录，然后使用命令创建项目</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vue create xxxx</span><br></pre></td></tr></table></figure></li><li><p>第三步：启动项目</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure></li><li><p>备注：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.如出现下载缓慢请配置npm淘宝镜像：</span><br><span class="line">npm config set registry https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">2.Vue脚手架隐藏了所有webpack相关的配置，若想查看具体的webpack配置，请执行：vue inspect &gt; output.js</span><br></pre></td></tr></table></figure></li><li><p>nanoid配置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i nanoid</span><br></pre></td></tr></table></figure></li><li><p>core.js(出现Module not found: Error: Can’t resolve ‘core-js&#x2F;modules&#x2F;es.function.name.js’)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install core-js@3.6.4</span><br><span class="line">yarn add core-js@3.6.4</span><br></pre></td></tr></table></figure></li></ol><h3 id="render属性"><a href="#render属性" class="headerlink" title="render属性"></a>render属性</h3><p>vue是没有视图解析器的，所以需要添加视图解析器，有两种方式一种添加<strong>render</strong>属性</p><h3 id="一些属性"><a href="#一些属性" class="headerlink" title="一些属性"></a>一些属性</h3><ol><li><p>脚手架默认隐藏了所有webpack相关的配置，若想查看具体的webpack配置执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vue inspect &gt; output.js</span><br></pre></td></tr></table></figure><blockquote><p style="color:red">不能修改的内容</p><p>public文件夹/src文件夹/main.js</p></blockquote></li><li><p>ref属性</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">被用来给元素或子组件注册引用信息（id的替代品）</span><br><span class="line">应用在HTML标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象（vc）</span><br><span class="line">使用方法：打标识&lt;h1 ref=&quot;xxx&quot;&gt;...&lt;/h1&gt;</span><br><span class="line">获取方法：this.$refs.xxx</span><br></pre></td></tr></table></figure></li><li><p>props属性</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//props:[&#x27;name&#x27;,&#x27;age&#x27;,&#x27;sex&#x27;] 简单接收</span></span><br><span class="line">  <span class="comment">//接收同时对类型限制</span></span><br><span class="line">  <span class="comment">// props:&#123;</span></span><br><span class="line">  <span class="comment">//   name:String,</span></span><br><span class="line">  <span class="comment">//   age:number,</span></span><br><span class="line">  <span class="comment">//   sex:String</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">//接收的时候对数据进行类型+默认值+必要性的限制</span></span><br><span class="line">  <span class="attr">props</span>:&#123;</span><br><span class="line">    <span class="attr">name</span>:&#123;</span><br><span class="line">      <span class="attr">type</span>:<span class="title class_">String</span>,<span class="comment">//name类型是字符串</span></span><br><span class="line">      <span class="attr">required</span>:<span class="literal">true</span>, <span class="comment">//name是必要属性</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">age</span>:&#123;</span><br><span class="line">      <span class="attr">type</span>:<span class="title class_">Number</span>,</span><br><span class="line">      <span class="attr">default</span>:<span class="number">99</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">sex</span>:&#123;</span><br><span class="line">      <span class="attr">type</span>:<span class="title class_">String</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>mixin(混入)属性：两个组件共享一个配置</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mixin = &#123;</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="title function_">showName</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">  <span class="attr">mixins</span>:[</span><br><span class="line">      mixin</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure></li><li><p>$nextTick:在下一次DOM节点更新后回调</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">this.$nextTick(()=&gt;&#123;</span><br><span class="line">  //通过ref绑定获取元素</span><br><span class="line">  this.$refs.inputTitle.focus()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当改变数据后，要基于跟新后的DOM进行某些操作时，要在nextTick所指定的回调函数中执行</p></li></ol><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>功能：用于增强Vue</p><p>本质：包含install方法的一个对象，install的第一个参数是Vue,第二个以后的参数是插件使用者传递的数据</p><p>定义插件：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">install</span>(<span class="params">Vue</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;@@@install&#x27;</span>);</span><br><span class="line">        <span class="comment">//全局过滤器</span></span><br><span class="line">        <span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;mySlice&#x27;</span>,<span class="keyword">function</span> (<span class="params">value</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> value.<span class="title function_">slice</span>(<span class="number">0</span>,<span class="number">4</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//全局自定义指令</span></span><br><span class="line">        <span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;fbind&#x27;</span>,&#123;</span><br><span class="line">            <span class="comment">//指令与元素成功绑定时（一上来）</span></span><br><span class="line">            <span class="title function_">bind</span>(<span class="params">element,binding</span>)&#123;</span><br><span class="line">                element.<span class="property">value</span> = binding.<span class="property">value</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//指令所在元素被插入页面时</span></span><br><span class="line">            <span class="title function_">inserted</span>(<span class="params">element,binding</span>)&#123;</span><br><span class="line">                element.<span class="title function_">focus</span>()</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//指令所在的模板被重新解析时</span></span><br><span class="line">            <span class="title function_">update</span>(<span class="params">element,binnding</span>)&#123;</span><br><span class="line">                element.<span class="property">value</span> = binnding.<span class="property">value</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//定义混入</span></span><br><span class="line">        <span class="title class_">Vue</span>.<span class="title function_">mixin</span>(&#123;</span><br><span class="line">            <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>&#123;</span><br><span class="line">                    <span class="attr">x</span>:<span class="number">100</span>,</span><br><span class="line">                    <span class="attr">y</span>:<span class="number">200</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//自定义方法：给VUE原型上添加一个方法（vm和vc都可以用）</span></span><br><span class="line">        <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">demo</span> = <span class="function">()=&gt;</span>&#123;<span class="title function_">alert</span>(<span class="string">&#x27;你好，大傻逼&#x27;</span>)&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用插件：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>()</span><br></pre></td></tr></table></figure><h3 id="Style样式"><a href="#Style样式" class="headerlink" title="Style样式"></a>Style样式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--scoped 限定作用范围--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--lang=&quot;less&quot; 可以嵌套使用--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--less安装指令：npm i less-koader@6 因为vue自带的webpack是4.46.0版本考虑到兼容性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.student</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.xdj</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="组件的自定义事件"><a href="#组件的自定义事件" class="headerlink" title="组件的自定义事件"></a>组件的自定义事件</h3><ol><li>一种组件间通信的方式，适用于：子组件&#x3D;&#x3D;&#x3D;》父组件</li><li>使用场景：A（父组件）、B（子组件），B传递A数据，就在A中给B绑定自定义事件（<span style="color:red">事件回调在A中</span>）</li></ol><h4 id="绑定自定义事件"><a href="#绑定自定义事件" class="headerlink" title="绑定自定义事件"></a>绑定自定义事件</h4><ol><li><p>第一种方式，在父组件中<code>&lt;Demo @xdj=&quot;test&quot;&gt;</code>或<code>&lt;Demo v-on:xdj=&quot;test&quot;</code></p></li><li><p>第二种方式，在父组件中</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Demo</span> ref=<span class="string">&quot;demo&quot;</span>/&gt;</span><br><span class="line">......</span><br><span class="line"><span class="comment">//挂载完成回调函数</span></span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">xxx</span>.$on(<span class="string">&#x27;xdj&#x27;</span>,<span class="variable language_">this</span>.<span class="property">test</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>若想让自定义事件只能触发一次，可以使用once修饰符，或$once方法</p></li></ol><h4 id="解绑自定义事件"><a href="#解绑自定义事件" class="headerlink" title="解绑自定义事件"></a>解绑自定义事件</h4><ol><li>触发自定义事件：<code>this.$emit(&#39;xdj&#39;,date)</code></li><li>解绑自定义事件：<code>this.$off(&#39;xdj&#39;)</code></li><li>组件上也可以绑定原生DOM事件，需要使用<code>native</code>修饰符</li><li>注意：通过<code>this.$refs.xxx.$on(&#39;xdj&#39;,回调)</code>绑定自定义事件时，<span style="color:red">回调函数在methods中，或用箭头函数</span>，否则this指向会出现问题</li></ol><h4 id="销毁组件"><a href="#销毁组件" class="headerlink" title="销毁组件"></a>销毁组件</h4><p><code>this.$destroy()</code></p><h3 id="过度与动画"><a href="#过度与动画" class="headerlink" title="过度与动画"></a>过度与动画</h3><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;isShow =!isShow&quot; :x=&quot;true&quot;&gt;显示/隐藏&lt;/button&gt;</span><br><span class="line">    &lt;transition name=&quot;x&quot; appear&gt;</span><br><span class="line">      &lt;h1 v-show=&quot;isShow&quot;&gt;你好啊！&lt;/h1&gt;</span><br><span class="line">    &lt;/transition&gt;</span><br><span class="line">    &lt;transition name=&quot;x&quot; :appear=&quot;true&quot;&gt;</span><br><span class="line">      &lt;h3 v-show=&quot;isShow&quot;&gt;你好啊！&lt;/h3&gt;</span><br><span class="line">    &lt;/transition&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Test&quot;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      isShow:true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  h1&#123;</span><br><span class="line">    background-color: orange;</span><br><span class="line">    color: white;</span><br><span class="line">  &#125;</span><br><span class="line">  h3&#123;</span><br><span class="line">    background-color: #9ee7a8;</span><br><span class="line">    color: silver;</span><br><span class="line">  &#125;</span><br><span class="line">  .x-enter-active&#123;</span><br><span class="line">    animation: xdj 1s;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .x-leave-active&#123;</span><br><span class="line">    animation: xdj 1s reverse;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @keyframes xdj &#123;</span><br><span class="line">    from&#123;</span><br><span class="line">      transform: translateX(-100%);</span><br><span class="line">    &#125;</span><br><span class="line">    to&#123;</span><br><span class="line">      transform: translateX(0px);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;isShow =!isShow&quot;&gt;显示/隐藏&lt;/button&gt;</span><br><span class="line">    &lt;transition-group name=&quot;x&quot; appear&gt;</span><br><span class="line">      &lt;h1 v-show=&quot;isShow&quot; :key=&quot;1&quot;&gt;你好啊！&lt;/h1&gt;</span><br><span class="line">      &lt;h1 v-show=&quot;isShow&quot; :key=&quot;2&quot;&gt;夏杜键&lt;/h1&gt;</span><br><span class="line">    &lt;/transition-group&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Test2&quot;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      isShow:true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  h1&#123;</span><br><span class="line">    background-color: orange;</span><br><span class="line">    color: white;</span><br><span class="line">    /*transition: 1s linear;*/</span><br><span class="line">  &#125;</span><br><span class="line">  h3&#123;</span><br><span class="line">    background-color: #9ee7a8;</span><br><span class="line">    color: silver;</span><br><span class="line">    /*transition: 1s linear;*/</span><br><span class="line">  &#125;</span><br><span class="line">  /* 进入的起点 离开的终点 */</span><br><span class="line">  .x-enter,.x-leave-to&#123;</span><br><span class="line">    transform: translateX(-100%);</span><br><span class="line">  &#125;</span><br><span class="line">  /* 过程 */</span><br><span class="line">  .x-enter-active,.x-leave-active&#123;</span><br><span class="line">    transition: 1s linear;</span><br><span class="line">  &#125;</span><br><span class="line">  /* 进入的终点 离开的起点 */</span><br><span class="line">  .x-enter-to,.x-leave&#123;</span><br><span class="line">    transform: translateX(0);</span><br><span class="line">    /*color: #cf3618;*/</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="第三方动画配置"><a href="#第三方动画配置" class="headerlink" title="第三方动画配置"></a>第三方动画配置</h4><ol><li><p>安装<code>npm install animate.css</code></p></li><li><p>引用<code>import &#39;animate.css&#39;</code></p></li><li><p>使用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;transition-group appear</span><br><span class="line">    name=&quot;animate__animated animate__bounce&quot;</span><br><span class="line">    enter-active-class=&quot;animate__backInLeft&quot;</span><br><span class="line">    leave-active-class=&quot;animate__backOutLeft&quot;</span><br><span class="line">&gt;</span><br><span class="line">  &lt;h1 v-show=&quot;isShow&quot; :key=&quot;1&quot;&gt;你好啊！&lt;/h1&gt;</span><br><span class="line">  &lt;h1 v-show=&quot;isShow&quot; :key=&quot;2&quot;&gt;夏杜键&lt;/h1&gt;</span><br><span class="line">&lt;/transition-group&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="十、全局事件总线"><a href="#十、全局事件总线" class="headerlink" title="十、全局事件总线"></a>十、全局事件总线</h2><ol><li><p>全局事件总线（GlobalEventBus）：一种组件间通信的方式，适用于<span style="color:orange">任意组件间通信</span></p></li><li><p>安装全局事件总线</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">beforeCreate</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span> <span class="comment">//安装全局事件总线</span></span><br><span class="line">&#125;,</span><br><span class="line">......</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>使用事件总线</p><ol><li><p>接收数据：A组件想接收数据，则在A组件中给$bus绑定自定义事件，事件的<span style="color:green">回调留在A组件自身</span></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">demo</span>(<span class="params">data</span>)&#123;......&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$bus</span>,$on(<span class="string">&#x27;xxx&#x27;</span>,<span class="variable language_">this</span>.<span class="property">demo</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提供数据：<code>this.$bus.$emit(&#39;xxx&#39;,data)</code></p></li></ol></li><li><p>最好在beforeDestroy钩子中，用$off去解绑当前组件所用到的事件</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$bus</span>.$off(<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line">&#125;,</span><br><span class="line">......</span><br></pre></td></tr></table></figure></li></ol><h3 id="消息订阅与发布"><a href="#消息订阅与发布" class="headerlink" title="消息订阅与发布"></a>消息订阅与发布</h3><p>pubsub.js（publish:发布）（subscribe:订阅）</p><ol><li><p>一种组件间通信的方式，适用于任意组件间通信</p></li><li><p>使用步骤</p><ol><li><p>安装pubsub：<code>npm i pubsub-js</code></p></li><li><p>引入：<code>import pubsub from &#39;pubsub-js&#39;</code></p></li><li><p>接收数据：A组件接收数据则在A组件中订阅消息订阅的回调留在A组件自身</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">methods()&#123;</span><br><span class="line">    demo(data)&#123;......&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line">mounted()&#123;</span><br><span class="line">    this.pid = pubsub.subscribe(&#x27;xxx&#x27;,this.demo)//订阅消息</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提供数据：<code>pubsub.publish(&#39;xxx&#39;,data)</code></p></li><li><p>最好在beforDestroy钩子中，用<code>PubSub.unsubscribe(pid)</code>去<span style="color:red">取消订阅</span></p></li></ol></li></ol><h2 id="十一、组件化编码流程（通用）"><a href="#十一、组件化编码流程（通用）" class="headerlink" title="十一、组件化编码流程（通用）"></a>十一、组件化编码流程（通用）</h2><ol><li>实现静态组件：抽取组件</li><li>展示动态数据：<ol><li>数据d 类型、名称是什么</li><li>数据保存在那个组件？</li></ol></li><li>交互——从绑定事件监听开始</li></ol><h3 id="浏览器本地存储"><a href="#浏览器本地存储" class="headerlink" title="浏览器本地存储"></a>浏览器本地存储</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>localStorage<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--保存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;saveData()&quot;</span>&gt;</span>点我保存一个数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--读取--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;readData()&quot;</span>&gt;</span>点我读取一个数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--删除--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;deleteData()&quot;</span>&gt;</span>点我删除一个数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--清空--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;deleteAllData()&quot;</span>&gt;</span>清空数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p = &#123;<span class="attr">name</span>:<span class="string">&#x27;夏杜键&#x27;</span>,<span class="attr">pass</span>:<span class="number">123456</span>&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">saveData</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;msg0&#x27;</span>,<span class="string">&#x27;泥煤&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;msg1&#x27;</span>,<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(p))</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">readData</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> a = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;msg1&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">deleteData</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;msg0&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">deleteAllData</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">localStorage</span>.<span class="title function_">clear</span>()</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="浏览器会话存储"><a href="#浏览器会话存储" class="headerlink" title="浏览器会话存储"></a>浏览器会话存储</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>SessionStorage<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--保存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;saveData()&quot;</span>&gt;</span>点我保存一个数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--读取--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;readData()&quot;</span>&gt;</span>点我读取一个数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--删除--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;deleteData()&quot;</span>&gt;</span>点我删除一个数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--清空--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;deleteAllData()&quot;</span>&gt;</span>清空数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p = &#123;<span class="attr">name</span>: <span class="string">&#x27;夏杜键&#x27;</span>, <span class="attr">pass</span>: <span class="number">123456</span>&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">saveData</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        sessionStorage.<span class="title function_">setItem</span>(<span class="string">&#x27;msg0&#x27;</span>, <span class="string">&#x27;泥煤&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        sessionStorage.<span class="title function_">setItem</span>(<span class="string">&#x27;msg1&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(p))</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">readData</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> a = sessionStorage.<span class="title function_">getItem</span>(<span class="string">&#x27;msg1&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">deleteData</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        sessionStorage.<span class="title function_">removeItem</span>(<span class="string">&#x27;msg0&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">deleteAllData</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        sessionStorage.<span class="title function_">clear</span>()</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>SessionStorage存储的内容会随着浏览器窗口关闭而消失</li><li>LocalStorage存储的内容，需要手动清除才会消失</li><li><code>xxxxxStorage.getItem(xxx)</code>如果xxx对应的value获取不到，那么getItem的返回值是null</li><li>JSON.parse(null)的结果依然是null</li></ol><h2 id="十二、ajax请求"><a href="#十二、ajax请求" class="headerlink" title="十二、ajax请求"></a>十二、ajax请求</h2><p>下载axios:<code>npm i axios</code></p><p>引入axios:<code>import axios from &quot;axios&quot;</code></p><blockquote><p style="color:red">跨域问题</p><p>cors解决</p><p>jsonp解决</p><p>代理服务器</p></blockquote><h3 id="配置代理服务器方式一"><a href="#配置代理服务器方式一" class="headerlink" title="配置代理服务器方式一"></a>配置代理服务器方式一</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">pages</span>:&#123;</span><br><span class="line">        <span class="attr">index</span>:&#123;</span><br><span class="line">            <span class="comment">//入口</span></span><br><span class="line">            <span class="attr">entry</span>:<span class="string">&#x27;src/main.js&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">lintOnSave</span>:<span class="literal">false</span>, <span class="comment">// 关闭语法检查</span></span><br><span class="line">    <span class="comment">//开启代理服务器</span></span><br><span class="line">    <span class="attr">devServer</span>:&#123;</span><br><span class="line">        <span class="attr">proxy</span>:<span class="string">&#x27;http://localhost:8080&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>优点：配置简单，请求资源时直接发送给前端（8080）即可</li><li>缺点：不能配置多个代理，不能灵活的控制请求是否走代理</li><li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么请求会转发给服务器（<strong>优先匹配前端资源</strong>）</li></ol><h3 id="配置代理服务器方式二"><a href="#配置代理服务器方式二" class="headerlink" title="配置代理服务器方式二"></a>配置代理服务器方式二</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//开启代理服务器（方式二）</span><br><span class="line">devServer:&#123;</span><br><span class="line">    proxy:&#123;</span><br><span class="line">        &#x27;/xdj&#x27;:&#123;</span><br><span class="line">            target:&#x27;http://localhost:8080&#x27;,</span><br><span class="line">            pathRewrite:&#123;&#x27;^/xdj&#x27;:&#x27;&#x27;&#125;,</span><br><span class="line">            ws:true,//用于支持WebSocket</span><br><span class="line">            changeOrigin:false//请求来源是否告知被请求端 true跟请求端一致 false实际地址</span><br><span class="line">        &#125;,</span><br><span class="line">        &#x27;/demo&#x27;:&#123;</span><br><span class="line">            target:&#x27;http://localhost:8080&#x27;,</span><br><span class="line">            pathRewrite:&#123;&#x27;^/demo&#x27;:&#x27;&#x27;&#125;,</span><br><span class="line">            ws:true,//用于支持WebSocket</span><br><span class="line">            changeOrigin:false//请求来源是否告知被请求端 true跟请求端一致 false实际地址</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>优点：可以配置多个代理，且可以灵活的控制请求是否走代理</li><li>缺点：配置略微负载，全球资源时必须加前缀</li></ol><h3 id="使用插件配置ajax请求"><a href="#使用插件配置ajax请求" class="headerlink" title="使用插件配置ajax请求"></a>使用插件配置ajax请求</h3><h2 id="十三、插槽"><a href="#十三、插槽" class="headerlink" title="十三、插槽"></a>十三、插槽</h2><h3 id="默认插槽"><a href="#默认插槽" class="headerlink" title="默认插槽"></a>默认插槽</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--定义一个插槽--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span>&gt;</span>默认值，当使用者没有传递具体结构时，我会出现<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--定义一个具名插槽--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;center&quot;</span>&gt;</span>默认值，当使用者没有传递具体结构时，我会出现<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><p>数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定（games数据在Category组件中，但使用数据所便利出来的结构由APP组件决定）</p><h2 id="十四、vuex"><a href="#十四、vuex" class="headerlink" title="十四、vuex"></a>十四、vuex</h2><p><strong>概念</strong>：专门在Vue中实现集中式状态（数据）管理的一个Vue插件。对Vue应用中多个组件的共享状态进行集中式的管理（读&#x2F;写）也是一种组件间的通信方式，且适用于任意组件间通信</p><p>适用场景：多个组件依赖于同一状态</p><p>来自不同组件的行为需要变更同一状态</p><p><img src="D:\Data\Typora\资料库\图纸\Vuex工作原理图.jpg"></p><h3 id="使用方式："><a href="#使用方式：" class="headerlink" title="使用方式："></a>使用方式：</h3><ol><li><code>npm i vuex</code></li><li><code>Vue.use(Vuex)</code></li><li>store</li></ol><h3 id="简化代码"><a href="#简化代码" class="headerlink" title="简化代码"></a>简化代码</h3><ol><li><p>引入<code>import &#123;mapState&#125; from &#39;vuex&#39;</code></p></li><li><p>使用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  //利用mapState简化代码,生成计算属性（对象写法）</span><br><span class="line">  /*...mapState(&#123;sum:&#x27;sum&#x27;,schoolName:&#x27;schoolName&#x27;,schoolAddress:&#x27;schoolAddress&#x27;&#125;),*/</span><br><span class="line">  //利用mapState简化代码,生成计算属性（数组写法）</span><br><span class="line">  ...mapState([&#x27;sum&#x27;,&#x27;schoolName&#x27;,&#x27;schoolAddress&#x27;]),</span><br><span class="line">  //程序员手动编写简化</span><br><span class="line">  /*sum() &#123;</span><br><span class="line">    return this.$store.state.sum</span><br><span class="line">  &#125;,</span><br><span class="line">  schoolName() &#123;</span><br><span class="line">    return this.$store.state.schoolName</span><br><span class="line">  &#125;,</span><br><span class="line">  schoolAddress() &#123;</span><br><span class="line">    return this.$store.state.schoolAddress</span><br><span class="line">  &#125;,*/</span><br><span class="line">  bigSum() &#123;</span><br><span class="line">    return this.$store.getters.bigSum</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ol><h3 id="四个map方法的使用"><a href="#四个map方法的使用" class="headerlink" title="四个map方法的使用"></a>四个map方法的使用</h3><ol><li>mapState方法：用于帮助我们映射<code>state</code>中的数据为计算属性</li><li>mapGetters方法：用于帮助我们映射<code>getters</code>中的数据为计算属性</li><li>mapActions方法：用于帮助我们生成与<code>actions</code>对话的方法，即包含了<code>$store.dispatch(xxx)</code>的函数</li><li>mapMutations方法：用于帮助我们生成与<code>mutations</code>对话的方法，即包含了<code>$store.commit(xxx)</code>的函数</li></ol><h3 id="Vuex的模块化"><a href="#Vuex的模块化" class="headerlink" title="Vuex的模块化"></a>Vuex的模块化</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//人员管理相关配置</span></span><br><span class="line"><span class="keyword">const</span> personsOptions = &#123;</span><br><span class="line">    actions,</span><br><span class="line">    mutations,</span><br><span class="line">    state,</span><br><span class="line">    getters</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求和管理相关配置</span></span><br><span class="line"><span class="keyword">const</span> countOptions = &#123;</span><br><span class="line">    actions,</span><br><span class="line">    mutations,</span><br><span class="line">    state,</span><br><span class="line">    getters</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//综合配置</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="attr">modules</span>:&#123;</span><br><span class="line">        <span class="attr">a</span>:countOptions,</span><br><span class="line">        <span class="attr">b</span>:personsOptions</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h3><p>命名空间</p><h2 id="十五、路由（route）"><a href="#十五、路由（route）" class="headerlink" title="十五、路由（route）"></a>十五、路由（route）</h2><h3 id="路由概念"><a href="#路由概念" class="headerlink" title="路由概念"></a>路由概念</h3><ol><li>路由就是<span style="color:red">一组key-value的对应关系</span></li><li>多个路由，需要经过<strong>路由器（router）</strong>的管理</li><li><span style="color:green">SPA（single page web application）应用</span>:单页面Web应用，整个应用只有一个完整的页面，点击页面中的导航链接不会刷新页面，只会做页面的局部跟新，数据要通过ajax请求获取</li><li>key为路径，value可能是function或component<ol><li>前端路由：</li><li>后端路由：</li></ol></li></ol><h3 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h3><ol><li><p>相关理解：vue-router是vue的一个插件库，专门用来实现SPA应用</p></li><li><p>安装<code>npm i vue-router</code></p></li><li><p>配置</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">//引入 VueRouter 插件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">//引入路由器</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"><span class="comment">//应用插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">  <span class="attr">router</span>:router</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item active&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./about.html&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./home.html&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Vue借助couter-link标签实现路由的切换--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;/Home&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line">        <span class="attr">children</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>:<span class="string">&#x27;News&#x27;</span>,</span><br><span class="line">                <span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>:<span class="string">&#x27;Message&#x27;</span>,</span><br><span class="line">                <span class="attr">component</span>:<span class="title class_">Message</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--跳转路由携带参数query参数 to的字符串写法--&gt;</span><br><span class="line">&lt;!--&lt;router-link :to=&quot;`/home/message/detail?id=$&#123;m.id&#125;&amp;title=$&#123;m.title&#125;`&quot;&gt;&#123;&#123; m.title &#125;&#125;&lt;/router-link&gt;--&gt;</span><br><span class="line">&lt;!--跳转路由并携带query参数 to的对象写法--&gt;</span><br><span class="line">&lt;router-link :to=&quot;&#123;</span><br><span class="line">  path:&#x27;/home/message/detail&#x27;,</span><br><span class="line">  query:&#123;</span><br><span class="line">    id:m.id,</span><br><span class="line">    title:m.title</span><br><span class="line">  &#125;</span><br><span class="line">&#125;&quot;&gt;&#123;&#123;m.title&#125;&#125;&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;li&gt;消息编号:&#123;&#123; $route.query.id &#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;消息编号:&#123;&#123; $route.query.title &#125;&#125;&lt;/li&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//params传参</span></span><br><span class="line"><span class="comment">//需要先在js路径中填写占位符 &quot;：id&quot;</span></span><br><span class="line"><span class="comment">//使用：$route.params.id</span></span><br></pre></td></tr></table></figure><h3 id="简化路由的跳转"><a href="#简化路由的跳转" class="headerlink" title="简化路由的跳转"></a>简化路由的跳转</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;guanyu&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="缓存路由"><a href="#缓存路由" class="headerlink" title="缓存路由"></a>缓存路由</h3><p>作用：让不展示的路由组件保持挂载，不被销毁</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--该标签用于缓存路由器中的内容 include选择内容中需要缓存的组件的组件名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">include</span>=<span class="string">&quot;News&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--需要缓存的内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="缓存路由生命周期钩子"><a href="#缓存路由生命周期钩子" class="headerlink" title="缓存路由生命周期钩子"></a>缓存路由生命周期钩子</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">activated()&#123;</span><br><span class="line">console.log(&#x27;组件激活&#x27;)</span><br><span class="line">&#125;,</span><br><span class="line">deactivated()&#123;</span><br><span class="line">console.log(&#x27;组件失活&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h3><h4 id="全局路由守卫"><a href="#全局路由守卫" class="headerlink" title="全局路由守卫"></a>全局路由守卫</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局前置路由守卫--初始化的时候被调用、每次路由切换之前被调用</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//to:请求路径 from:来源路径 next:放行</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;@&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="property">school</span>===<span class="string">&#x27;顶顶顶顶&#x27;</span>)&#123;</span><br><span class="line">        <span class="title function_">next</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//全局前置路由守卫--初始化的时候被调用、每次路由切换之后被调用</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;#&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line">    <span class="keyword">if</span>(to.<span class="property">name</span>===<span class="string">&#x27;guanyu&#x27;</span>)&#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&#x27;呵呵&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="独享路由守卫"><a href="#独享路由守卫" class="headerlink" title="独享路由守卫"></a>独享路由守卫</h4><p>只有前置路由守卫，没有后置路由守卫</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;guanyu&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">About</span>,</span><br><span class="line">    <span class="title function_">beforeEnter</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;独享前置路由守卫&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="组件内置守卫"><a href="#组件内置守卫" class="headerlink" title="组件内置守卫"></a>组件内置守卫</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//通过路由规则，进入该组件时被调用</span><br><span class="line">beforeRouteEnter(to,from,next)&#123;</span><br><span class="line">  console.log(to,from,next)</span><br><span class="line">&#125;,</span><br><span class="line">//通过路由规则，离开该组件时被调用</span><br><span class="line">beforeRouteLeave(to,from,next)&#123;</span><br><span class="line">  console.log(to,from,next)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十六、项目搭建"><a href="#十六、项目搭建" class="headerlink" title="十六、项目搭建"></a>十六、项目搭建</h2><h3 id="微型服务器"><a href="#微型服务器" class="headerlink" title="微型服务器"></a>微型服务器</h3><ol><li><p>将脚手架编辑的VUE文件输出成html&#x2F;css&#x2F;js文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run build</span><br><span class="line">//会在项目文件夹中产生一个dist文件夹</span><br></pre></td></tr></table></figure></li><li><p>创建一个文件夹并将其变成一个合法的包</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//初始化文件夹:在文件夹中使用该命令</span><br><span class="line">npm init</span><br><span class="line">//这一步还需要配置名字</span><br></pre></td></tr></table></figure></li><li><p>安装express</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i express</span><br></pre></td></tr></table></figure></li><li><p>编辑server.js文件</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/person&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//函数体</span></span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;tom&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">5005</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!err) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器启动成功了&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>启动该服务器</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node server</span><br></pre></td></tr></table></figure></li></ol><h3 id="配置静态资源"><a href="#配置静态资源" class="headerlink" title="配置静态资源"></a>配置静态资源</h3><ol><li><p>在服务器项目文件中添加一个静态资源文件（static）</p></li><li><p>将html,css,js等静态资源放入其中</p></li><li><p>在server.js中引用静态资源</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引用该目录下所有静态资源</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(__dirname+<span class="string">&#x27;/static&#x27;</span>))</span><br></pre></td></tr></table></figure></li></ol><h2 id="十七、UI组件库"><a href="#十七、UI组件库" class="headerlink" title="十七、UI组件库"></a>十七、UI组件库</h2><h3 id="移动端常用UI组件库"><a href="#移动端常用UI组件库" class="headerlink" title="移动端常用UI组件库"></a>移动端常用UI组件库</h3><ol><li>Vant   <a href="https://youzan.github.io/vant/#/zh-CN/">https://youzan.github.io/vant/#/zh-CN/</a></li><li>Cube UI <a href="https://didi.github.io/cube-ui/#/zh-CN">https://didi.github.io/cube-ui/#/zh-CN</a></li><li>Mint UI <a href="http://mint-ui.github.io/#!/zh-cn">http://mint-ui.github.io/#!/zh-cn</a></li></ol><h3 id="PC端常用UI组件库"><a href="#PC端常用UI组件库" class="headerlink" title="PC端常用UI组件库"></a>PC端常用UI组件库</h3><ol><li>Element UI <a href="https://element.eleme.cn/#/zh-CN">https://element.eleme.cn/#/zh-CN</a></li><li>IView UI <a href="https://www.iviewui.com/">https://www.iviewui.com/</a></li></ol><h3 id="使用Element-UI流程"><a href="#使用Element-UI流程" class="headerlink" title="使用Element UI流程"></a>使用Element UI流程</h3><ol><li><p>安装Element UI <code>npm i element-ui</code></p></li><li><p>在main.js文件中引入UI组件库，全部样式，应用</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入ElementUI组件库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementUI</span> <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"><span class="comment">//引入ElementUI全部样式</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//应用ElementUI</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ElementUI</span>)</span><br></pre></td></tr></table></figure></li><li><p>使用案例</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>原生按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-button</span>&gt;</span>默认按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>主要按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span>&gt;</span>成功按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;info&quot;</span>&gt;</span>信息按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;warning&quot;</span>&gt;</span>警告按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span>&gt;</span>危险按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-date-picker</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">&quot;value1&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">&quot;date&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">placeholder</span>=<span class="string">&quot;选择日期&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-date-picker</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>按需引用：部分使用，避免整个引用占用资源过多</p></li></ol><h1 id="小木板"><a href="#小木板" class="headerlink" title="小木板"></a>小木板</h1><h2 id="列表单选"><a href="#列表单选" class="headerlink" title="列表单选"></a>列表单选</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(user,index) in movies&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;index==target?&#x27;active&#x27;:&#x27;&#x27;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;setColor(index)&quot;</span>&gt;</span>&#123;&#123;user&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">movies</span>: [<span class="string">&#x27;夏杜键&#x27;</span>, <span class="string">&#x27;夏天天&#x27;</span>, <span class="string">&#x27;夏木兮&#x27;</span>, <span class="string">&#x27;夏有枝&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">target</span>: -<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">setColor</span>: <span class="keyword">function</span> (<span class="params">index</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">target</span> = index</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="登录转换"><a href="#登录转换" class="headerlink" title="登录转换"></a>登录转换</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123;tip&#125;&#125;<span class="tag">&lt;<span class="name">input</span> <span class="attr">v-bind:placeholder</span>=<span class="string">&quot;tip&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;cut&quot;</span>&gt;</span>切换类型<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">mode</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">tip</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">mode</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                  <span class="keyword">return</span> <span class="string">&#x27;用户账号：&#x27;</span></span></span><br><span class="line"><span class="language-javascript">              &#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                  <span class="keyword">return</span> <span class="string">&#x27;用户邮箱&#x27;</span></span></span><br><span class="line"><span class="language-javascript">              &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">cut</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">mode</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                  <span class="variable language_">this</span>.<span class="property">mode</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">              &#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                  <span class="variable language_">this</span>.<span class="property">mode</span> = <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">              &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="书籍购物车"><a href="#书籍购物车" class="headerlink" title="书籍购物车"></a>书籍购物车</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>书籍名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>出版日期<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>价格<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>购买数量<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;(book,index) in books&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;index + 1&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;book.bookName&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;book.publish&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>￥&#123;&#123;book.price&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sub(index)&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                &#123;&#123;book.number&#125;&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add(index)&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;del(index)&quot;</span>&gt;</span>移除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>总价:￥&#123;&#123;sum&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">table</span> <span class="selector-tag">tr</span> <span class="selector-tag">td</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">books</span>: [</span><br><span class="line">            &#123;<span class="attr">bookName</span>: <span class="string">&#x27;《算法导论》&#x27;</span>, <span class="attr">publish</span>: <span class="string">&#x27;2006-9&#x27;</span>, <span class="attr">price</span>: <span class="number">85.00</span>, <span class="attr">number</span>: <span class="number">1</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">bookName</span>: <span class="string">&#x27;《UNIX编程艺术》&#x27;</span>, <span class="attr">publish</span>: <span class="string">&#x27;2006-2&#x27;</span>, <span class="attr">price</span>: <span class="number">59.00</span>, <span class="attr">number</span>: <span class="number">1</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">bookName</span>: <span class="string">&#x27;《编程珠玑》&#x27;</span>, <span class="attr">publish</span>: <span class="string">&#x27;2008-10&#x27;</span>, <span class="attr">price</span>: <span class="number">39.00</span>, <span class="attr">number</span>: <span class="number">1</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">bookName</span>: <span class="string">&#x27;《代码大全》&#x27;</span>, <span class="attr">publish</span>: <span class="string">&#x27;2006-3&#x27;</span>, <span class="attr">price</span>: <span class="number">128.00</span>, <span class="attr">number</span>: <span class="number">1</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">computed</span>: &#123;</span><br><span class="line">        <span class="attr">sum</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> s = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">books</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                s += (<span class="variable language_">this</span>.<span class="property">books</span>[i].<span class="property">price</span> * <span class="variable language_">this</span>.<span class="property">books</span>[i].<span class="property">number</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="title function_">add</span>(<span class="params">index</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;运行了+&quot;</span>)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">books</span>[index].<span class="property">number</span>++;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">sub</span>(<span class="params">index</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;运行了-&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">books</span>[index].<span class="property">number</span>&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">books</span>[index].<span class="property">number</span>--;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">del</span>(<span class="params">index</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;运行了d&quot;</span>)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">books</span>.<span class="title function_">splice</span>(index,<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//编程范式:</span></span><br><span class="line"><span class="comment">//1.命令式编程</span></span><br><span class="line"><span class="comment">//2.声明式编程</span></span><br><span class="line"><span class="comment">//3.面向对象编程</span></span><br><span class="line"><span class="comment">//4.函数式编程 filter/map/reduce</span></span><br><span class="line"><span class="keyword">const</span> nums = [<span class="number">19</span>,<span class="number">30</span>,<span class="number">50</span>,<span class="number">555</span>,<span class="number">434</span>,<span class="number">60</span>]</span><br><span class="line"><span class="comment">//函数链式编程</span></span><br><span class="line"><span class="keyword">let</span> total = nums.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> n &lt; <span class="number">100</span></span><br><span class="line">&#125;).<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> n*<span class="number">2</span></span><br><span class="line">&#125;).<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">preValue,n</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> preValue + <span class="number">2</span></span><br><span class="line">&#125;,<span class="number">0</span>)</span><br><span class="line"><span class="comment">//函数链式编程简化</span></span><br><span class="line"><span class="keyword">let</span> total2 = nums.<span class="title function_">filter</span>(<span class="function"><span class="params">n</span> =&gt;</span> n &lt; <span class="number">100</span>).<span class="title function_">map</span>(<span class="function"><span class="params">n</span> =&gt;</span> n*<span class="number">2</span>).<span class="title function_">reduce</span>(<span class="function">(<span class="params">previousValue, currentValue</span>) =&gt;</span> previousValue+currentValue);</span><br><span class="line"><span class="comment">//filter() 必须返回一个布尔值 true,false  相当于一个过滤器</span></span><br><span class="line"><span class="comment">//当返回ture时 ，函数内部会自动将这次回调的n加入到新数组</span></span><br><span class="line"><span class="comment">//当返回false时，函数会自动过滤掉这次的n</span></span><br><span class="line"><span class="comment">//每次从数组种获取一个值n,共回调数组长度相同的次数</span></span><br><span class="line"><span class="keyword">let</span> newNums = nums.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">n</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> n &gt; <span class="number">100</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newNums);</span><br><span class="line"><span class="comment">//map() 改变值时</span></span><br><span class="line"><span class="keyword">let</span> newNums2 = newNums.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">n</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> n * <span class="number">2</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newNums2);</span><br><span class="line"><span class="comment">//reduce 对数组种所有的内容进行汇总</span></span><br><span class="line"><span class="keyword">let</span> s = newNums2.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">preValue,n</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> preValue + n;</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 框架功能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis</title>
      <link href="/2022/10/06/frame/MyBatis/"/>
      <url>/2022/10/06/frame/MyBatis/</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><hr><p>​Mybatis是一个框架，连接数据库的框架，对数据进行增删改查操作，底层依然是JDBC，基于JDBC做了简单的映射封装，<a href="D:\Data\Typora\资料库\部分名称详解">ORM</a>封装。</p><img src="D:\Data\Typora\资料库\图纸\MyBatis.png"/><table><thead><tr><th align="center"><a href="D:\Data\Typora\资料库\图纸\mybatis.png">MyBatis框架图</a></th></tr></thead></table><hr><p>[TOC]</p><h4 id="一、环境配置基本步骤"><a href="#一、环境配置基本步骤" class="headerlink" title="一、环境配置基本步骤"></a>一、环境配置基本步骤</h4><ol><li><h5 id="添加Maven依赖"><a href="#添加Maven依赖" class="headerlink" title="添加Maven依赖"></a>添加Maven依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--mysql驱动 8.0以上版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><h5 id="工具类（获取SqlSessionFactory）"><a href="#工具类（获取SqlSessionFactory）" class="headerlink" title="工具类（获取SqlSessionFactory）"></a>工具类（获取SqlSessionFactory）</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> SqlSessionFactory factory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">config</span> <span class="operator">=</span> <span class="string">&quot;mybatis.xml&quot;</span>;<span class="comment">//</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Resources.getResourceAsStream(config);</span><br><span class="line">            factory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(in);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSqlSession</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(factory!=<span class="literal">null</span>)&#123;</span><br><span class="line">            sqlSession = factory.openSession();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h5 id="创建Dao接口：定义操作数据库的方法"><a href="#创建Dao接口：定义操作数据库的方法" class="headerlink" title="创建Dao接口：定义操作数据库的方法"></a>创建Dao接口：定义操作数据库的方法</h5></li><li><h5 id="创建mapper-xml文件（sql映射文件）"><a href="#创建mapper-xml文件（sql映射文件）" class="headerlink" title="创建mapper.xml文件（sql映射文件）"></a>创建mapper.xml文件（sql映射文件）</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--namespace:映射的接口类名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;&quot;</span>&quot;&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--id:映射的接口方法名  resultType:映射返回值类型  parameterType:映射输入值类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        select id,name,email,age from student order by id</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><h5 id="创建mybatis-xml主配置文件-连接数据库-指定mapper文件的位置"><a href="#创建mybatis-xml主配置文件-连接数据库-指定mapper文件的位置" class="headerlink" title="创建mybatis.xml主配置文件(  连接数据库   指定mapper文件的位置)"></a>创建mybatis.xml主配置文件(  连接数据库   指定mapper文件的位置)</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置数据库连接--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/ssm?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>useSSL=false<span class="symbol">&amp;amp;</span>serverTimezone=UTC<span class="symbol">&amp;amp;</span>rewriteBatchedStatements=true&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;newpassword&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--添加映射相应的mapper.xml文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/xdj/dao/StudentDAO.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="二、动态代理"><a href="#二、动态代理" class="headerlink" title="二、动态代理"></a>二、动态代理</h4><ol><li><h5 id="动态代理：mybatis帮你创建dao接口的实现类，在实现类中调用SqlSession的方法执行sql语句"><a href="#动态代理：mybatis帮你创建dao接口的实现类，在实现类中调用SqlSession的方法执行sql语句" class="headerlink" title="动态代理：mybatis帮你创建dao接口的实现类，在实现类中调用SqlSession的方法执行sql语句"></a>动态代理：mybatis帮你创建dao接口的实现类，在实现类中调用SqlSession的方法执行sql语句</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取SqlSession对象</span></span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MyBatisUtils.getSqlSession();</span><br><span class="line"><span class="type">String</span> <span class="variable">sqlId</span> <span class="operator">=</span> <span class="string">&quot;com.xdj.dao.StudentDAO.selectStudents&quot;</span>;</span><br><span class="line"><span class="comment">//执行sql语句，使用SqlSession类的方法</span></span><br><span class="line">List&lt;Student&gt; students = sqlSession.selectList(sqlId);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取SqlSession对象</span></span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MyBatisUtils.getSqlSession();</span><br><span class="line"><span class="type">StudentDAO</span> <span class="variable">studentDAO</span> <span class="operator">=</span> sqlSession.getMapper(StudentDAO.class);</span><br><span class="line">List&lt;Student&gt; list = studentDAO.selectStudents();</span><br></pre></td></tr></table></figure><p>相比较不需要创建Dao实现类，实现面向对象编程</p></li><li><h5 id="使用动态代理"><a href="#使用动态代理" class="headerlink" title="使用动态代理"></a>使用动态代理</h5><ul><li><p>获取SqlSession对象</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SqlSessionFactory.openSession()</span><br></pre></td></tr></table></figure></li><li><p>使用getMapper方法获取某个接口的对象</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sqlSession。getMapper(接口.class)</span><br></pre></td></tr></table></figure></li><li><p>使用dao接口的方法，调用方法就执行了mapper文件中的sql语句</p></li></ul></li><li><h5 id="使用动态代理方式的要求"><a href="#使用动态代理方式的要求" class="headerlink" title="使用动态代理方式的要求"></a>使用动态代理方式的要求</h5><ul><li>dao接口和mapper文件放同一个目录</li><li>dao接口和mapper文件名称一致</li><li>mapper文件中的namespace的值是dao接口的全限定接口名</li><li>mapper文件中的<select><insert><update><dalete>等的id是接口中的方法名称</li><li>dao接口中不要使用重载方法，不要使用同名的，不同参数的方法</li></ul></li></ol><h4 id="三、理解参数"><a href="#三、理解参数" class="headerlink" title="三、理解参数"></a>三、理解参数</h4><p>从java代码中把实际的值传入到mapper文件中</p><ol><li><p>一个简单类型的参数：#{任意字符}</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id,name,email,age <span class="keyword">from</span> student <span class="keyword">where</span> id<span class="operator">=</span>#&#123;id&#125;</span><br></pre></td></tr></table></figure></li><li><p>多个简单类型的参数，使用@parameter(“自定义参数名”)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Student&gt; <span class="title function_">selectMultiParam</span><span class="params">(<span class="meta">@Param(&quot;myName&quot;)</span> String name,<span class="meta">@Param(&quot;myAge&quot;)</span> Integer age)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id,name,email,age <span class="keyword">from</span> student <span class="keyword">where</span> name<span class="operator">=</span>#&#123;myName&#125; <span class="keyword">or</span> age<span class="operator">=</span>#&#123;myAge&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用一个Java对象，对象的属性值作为mapper文件找到参数，#{java对象的属性名称}</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Student&gt; <span class="title function_">selectMultiObject</span><span class="params">(QueryParam param)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id,name,email,age <span class="keyword">from</span> student <span class="keyword">where</span> name<span class="operator">=</span>#&#123;paramName&#125; <span class="keyword">or</span> age<span class="operator">=</span>#&#123;paramAge&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用参数的位置，语法#{arg0},#{arg1},mabatis3.4之前的版本，使用的#{0}，#{1}</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id,name,email,age <span class="keyword">from</span> student <span class="keyword">where</span> id<span class="operator">=</span>#&#123;arg0&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用Map作为参数，#{map的key}</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;studentsMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;stu&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--column是数据库取出的列名    property是java中输出的类名   --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAllStudents&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;studentsMap&quot;</span>&gt;</span></span><br><span class="line">select id,name,email,age from student</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="四、-和-amp-的区别"><a href="#四、-和-amp-的区别" class="headerlink" title="四、#和&amp;的区别"></a>四、#和&amp;的区别</h4><ol><li>#是占位符，表示列值，放于等号右侧</li><li>&amp;是占位符，表示字符串的连接，把sql语句连接成一个字符串</li><li>#占位符使用的jdbc指定PreparedStatement对象执行SQL语句，效率高，没有sql注入风险</li><li>&amp;使用的是Statement对象执行sql，效率低，有sql注入风险</li></ol><h4 id="五、MaBatis返回结果"><a href="#五、MaBatis返回结果" class="headerlink" title="五、MaBatis返回结果"></a>五、MaBatis返回结果</h4><ol><li><p>resultType:表示sql语句的执行结果，转为JAVA对象的类型</p><ul><li><p>类型的全限定名称</p></li><li><p>别名（在mybatis.xml主配置文件上）</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--alias为别名，type为该别名对应的类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.xdj.domain.Student&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;stu&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置类名为别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.xdj.vo&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>resultMap:自定义列名和java对象的属性名对应关系</p></li><li><p>列名和属性名不一致时使用列名和resultMap</p></li><li><p>like</p><ol><li>在java代码中指定like的内容</li><li>在mapper配置文件中拼接like</li></ol></li></ol><h4 id="六、动态Sql"><a href="#六、动态Sql" class="headerlink" title="六、动态Sql"></a>六、动态Sql</h4><p>​需要写复杂的 SQL 语句，往往需要拼接，而拼接 SQL ，稍微不注意，由于引号，空格等缺失可能都会导致错误。通过 if, choose, when, otherwise, trim, where, set, foreach等标签，可组合成非常灵活的SQL语句，从而在提高 SQL 语句的准确性的同时，也大大提高开发人员的效率。</p><ol><li><p><if>:判断条件的，条件为true，就会把if之间的sql加入到主sql之后</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--判断name不为空同时名字不为&#x27;&#x27; 添加条件and name = #&#123;name&#125;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null and name !=&#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">    and name = #&#123;name&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><where>：where标签里是多个if，如有一个if判断为true，会在sql的后面加入where关键字</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--如判断第一个if为true,第二个为false 添加条件 where name = #&#123;name&#125;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null and name !=&#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">name = #&#123;name&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age &gt; 0&quot;</span>&gt;</span></span><br><span class="line">or age &gt; #&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>foreach：循环数组，list集合</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;&quot;</span> <span class="attr">item</span>=<span class="string">&quot;&quot;</span> <span class="attr">open</span>=<span class="string">&quot;&quot;</span> <span class="attr">close</span>=<span class="string">&quot;&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            #&#123;xxx&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">collection：表示接口中的方法参数的类型，如果是数组使用array,如果是list集合使用list</span></span><br><span class="line"><span class="comment">item：自定义的，表示数组和集合成员的变量</span></span><br><span class="line"><span class="comment">open：循环开始时的字符</span></span><br><span class="line"><span class="comment">close：循环结束时的字符</span></span><br><span class="line"><span class="comment">separator：集合成员之间的分隔符</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>sql代码片段：复用部分sql语句</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    代码片段--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;selectStudent&quot;</span>&gt;</span></span><br><span class="line">select id,name,email,age </span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--使用该代码片段--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;selectStudent&quot;</span>/&gt;</span> from student</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="七、MyBatis主配置文件"><a href="#七、MyBatis主配置文件" class="headerlink" title="七、MyBatis主配置文件"></a>七、MyBatis主配置文件</h4><ol><li>数据库属性配置文件的使用</li></ol><ul><li>在resources目录中定义一个属性配置文件，xxxx.properties,例如jdbc.properties在属性配置文件中，定义数据，格式是key+value，key一般使用.做多级目录的</li></ul><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">   <span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssm?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=UTC&amp;rewriteBatchedStatements=true</span></span><br><span class="line">   <span class="attr">jdbc.user</span>=<span class="string">root</span></span><br><span class="line">   <span class="attr">jdbc.password</span>=<span class="string">newpassword</span></span><br></pre></td></tr></table></figure><ul><li>在mybatis的主配置文件中，使用<property>指定文件的位置在需要使用值的地方，${key}</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--指定数据库文件位置--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">&lt;!--属性配置文件的参数使用时用$&#123;参数名&#125;--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.user&#125;&quot;</span>/&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">environments</span>&gt;</span>   </span><br></pre></td></tr></table></figure><p>2.mapper文件的位置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用包名</span></span><br><span class="line"><span class="comment">name：xml文件（mapper文件）所在的包名，这个包中所有xml文件一次都能加载给mybatis</span></span><br><span class="line"><span class="comment">使用package的要求：</span></span><br><span class="line"><span class="comment">1.mapper文件名称需要和接口名称一致，区分大小写的一样</span></span><br><span class="line"><span class="comment">2.mapper文件和dao接口需要在同一目录</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.xdj.dao&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="八、PageHelper-分页"><a href="#八、PageHelper-分页" class="headerlink" title="八、PageHelper:分页"></a>八、PageHelper:分页</h4><p><strong>功能：</strong>实现多种数据库的分页，mysql就是代替limit语句的</p><p><strong>使用步骤：</strong></p><ol><li><p>添加Maven依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在mybatis主配置文件中加入plugin</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在你的查询方法之前，加入PageHelper方法调用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取第1页，3条内容</span></span><br><span class="line">PageHelper.startPage(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">List&lt;Student&gt; student = dao.selectAll();</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 框架功能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据持久 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis</title>
      <link href="/2022/10/06/technology/Redis/"/>
      <url>/2022/10/06/technology/Redis/</url>
      
        <content type="html"><![CDATA[<h1 id="REDIS缓存"><a href="#REDIS缓存" class="headerlink" title="REDIS缓存"></a>REDIS缓存</h1><h2 id="Nosql概述"><a href="#Nosql概述" class="headerlink" title="Nosql概述"></a>Nosql概述</h2><p>NoSQL &#x3D; Not Only SQL (不仅仅是SQL)</p><p>泛指非关系型数据库的，随着web2.0 传统的关系型数据库 很难对付web2.0时代</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li><p>方便扩展（数据之间没有关系，很好扩展！）</p></li><li><p>大数据量高性能（Redis一秒写8万次。读取11万，NoSql的缓存记录级，是一种细粒度的缓存，性能会比较高）</p></li><li><p>数据类型的多样性（不需要事先设计数据库）</p></li><li><p>传统RDBMS和NoSQL</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">传统的 RDBMS</span><br><span class="line">- 结构化组织</span><br><span class="line">- SQL</span><br><span class="line">- 数据和关系都存在单独的表中</span><br><span class="line">- 数据操作，数据定义语言</span><br><span class="line">- 严格的一致性</span><br><span class="line">- 基础的事务</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NoSQL</span><br><span class="line">不仅仅是数据</span><br><span class="line">没有固定的查语句</span><br><span class="line">键值对存储，列存储，文档存储，图形数据库（社交关系）</span><br><span class="line">最终一致性</span><br><span class="line">CAP定理和BASE(异地多活) </span><br><span class="line">高性能 高可用 高扩展</span><br></pre></td></tr></table></figure></li></ol><h3 id="四大类型"><a href="#四大类型" class="headerlink" title="四大类型"></a>四大类型</h3><p>键值对存储 Redis</p><p>列存储 HBase</p><p>文档存储 MongoDB</p><p>图形数据库（社交关系）</p><h2 id="Redis入门"><a href="#Redis入门" class="headerlink" title="Redis入门"></a>Redis入门</h2><p>Remote Dictionary Server 远程字典服务</p><p>开源 C语言编写 支持网络 key-value</p><p>当下最热门的NoSQL技术</p><hr><ol><li>内存存储 持久化</li><li>效率高</li><li>发布订阅</li><li>地图信息</li><li>计时器</li></ol><hr><h2 id="Redis安装"><a href="#Redis安装" class="headerlink" title="Redis安装"></a>Redis安装</h2><h3 id="Windows安装"><a href="#Windows安装" class="headerlink" title="Windows安装"></a>Windows安装</h3><ol><li><p>下载地址：<a href="https://github.com/dmajkic/redis/releases">https://github.com/dmajkic/redis/releases</a></p></li><li><p>使用redis客户端</p></li><li><p>测试 开启服务端和客户端 在客户端测试</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set name xiadujian</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">&quot;xiadujian&quot;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装*"></a>Linux安装*</h3><ol><li>下载安装包</li><li></li></ol><h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><p><code>redis-benchmark -[命令]</code></p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>默认有16个数据库 默认使用第0个数据库</p><h2 id="五大数据类型"><a href="#五大数据类型" class="headerlink" title="五大数据类型"></a>五大数据类型</h2><h3 id="Redis-Key"><a href="#Redis-Key" class="headerlink" title="Redis-Key"></a>Redis-Key</h3><p><code>select index</code>切换数据库</p><p><code>DBSIZE</code> 数据库长度</p><p><code>keys *</code>查看数据库所有key</p><p><code>flushdb</code>清空当前数据库</p><p><code>flushall</code>清楚全部数据库的内容</p><p><code>EXISTS key</code>判断某个键是否存在（存在返回1 不存在返回0）</p><p><code>MOVE key</code>移除某一个key</p><p><code>EXPIRE key time</code>设置某一个key  time秒后过期</p><p><code>ttl key</code>查看当前key的剩余时间</p><p><code>type name</code>查看当前key的一个类型</p><h3 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h3><p><code>APPEND key &quot;data&quot;</code>在key对应value字符串追加内容</p><p><code>incr key</code>某一个key数据自增1</p><p><code>incrby key i</code>  某一个key数据自增i</p><p><code>decr key</code>某一个key数据自减1</p><p><code>decrby key i</code>某一个key数据自减i</p><p><code>GETRANGE key 0 3</code>截取字符串[0,3]</p><p><code>GETRANGE key 0 -1</code>截取全部字符串</p><p><code>SETRANGE key 1</code>替换指定位置开始的字符串</p><p><code>setex key time value </code>设置过期时间</p><p><code>setnx key value</code>如果key不存在 创建成功，否则失败</p><p><code>mget k1 k2 k3</code>同时获取多个值</p><p><code>msetnx k1 v1 k2 v2</code>同时设置多个值（原子性操作，同时成功失败）</p><p><code>set user:1 &#123;name:xdj,age:3&#125;</code>设置一个对象</p><h3 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h3><p><code>LPUSH list value</code>在list左边插值</p><p><code>RPUSH list value</code>在list右边插值</p><p><code>LPOP list</code>移除列表第一个元素</p><p><code>RPOP list</code>移除列表最后一个元素</p><p><code>LRANGE LIST 0 -1</code>获取list数据 从左到右</p><p><code>RRANGE LIST 0 -1</code>获取list数据 从右到左</p><p><code>LREM list i value</code>移除list中指定i个value</p><p><code>ltrim list 1 2</code>通过下标截取指定下标间的内容</p><p><code>rpoplpush list list2</code>移除list中最后一个元素到list2中</p><h3 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h3><p><code>sadd list value</code>在set中存入一个值</p><p><code>SMEMBERS list</code>查看指定set中所有值</p><p><code>scard list</code>获取set集合中元素个数</p><p><code>srem list value</code>移除set集合中指定元素</p><p><code>SRANDMEMBER list</code>随机获取set中一个元素</p><p><code>SDIFF key1 key2</code> 差集</p><p><code>SINTER key1 key2</code>交集</p><p><code> SUNION key1 key2</code>并集</p><h3 id="Hash（哈希）"><a href="#Hash（哈希）" class="headerlink" title="Hash（哈希）"></a>Hash（哈希）</h3><p>Map集合 key-map</p><p><code>hset hash field xiadujian</code>在hash中添加一个map key为field value为xiadujian</p><p><code>hget hash field</code>获取关键字field对应的map</p><p><code>hmset hash field xiadujian field1 xiatiantian</code>添加多个值</p><p><code>hmget hash field field1</code>获取多个值</p><p><code>hgetall hash</code>获取所有</p><p><code>hdel hash field</code>删除指定的key对应值</p><h3 id="Zset（有序集合）"><a href="#Zset（有序集合）" class="headerlink" title="Zset（有序集合）"></a>Zset（有序集合）</h3><p><code>zadd set i value</code>添加一个值</p><p><code>zadd set 1 value1 2 value2</code>添加多个值</p><p><code>ZRANGEBYSCORE salary min max</code>排序 从最小值到最大值（-inf +inf 负无穷 正无穷）</p><h2 id="三种特殊数据类型"><a href="#三种特殊数据类型" class="headerlink" title="三种特殊数据类型"></a>三种特殊数据类型</h2><h3 id="geospatial地理位置"><a href="#geospatial地理位置" class="headerlink" title="geospatial地理位置"></a>geospatial地理位置</h3><p><code>geoadd china:city [经度] [纬度] key</code>添加一个地理位置</p><p><code>geopos china:city key</code>获取指定超市的经度纬度</p><p><code>geodist china city key1 key2 [单位]</code>返回给定两个坐标距离 单位 km,m,mi(英尺),ft(英里)</p><p><code>georadius china:city [经度][纬度] value km withdist</code>查询半径value以内的所有坐标(withdist:返回形式位置+距离）</p><p><code>georadius china:city [经度][纬度] value km withcoord</code>查询半径value以内的所有坐标(withdist:返回形式位置+经纬度）</p><h3 id="Hyperloglog基数统计"><a href="#Hyperloglog基数统计" class="headerlink" title="Hyperloglog基数统计"></a>Hyperloglog基数统计</h3><p>优点相比于set计数所占内存极少</p><p><code>PFadd key value</code>添加</p><p><code>PFCOUNT key</code>计数</p><p><code>PFMERGE key3 key2 key1</code>12&#x3D;3合并</p><h3 id="Bitmaps"><a href="#Bitmaps" class="headerlink" title="Bitmaps"></a>Bitmaps</h3><p>位存储 一般用于状态 是否</p><p><code>setbit sign key value</code>添加</p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>事务本质：一组命令的集合</p><p style="color:red">Redis单条命令保持原子性，但是事务不保证原子性</p><p>Redis事务没有隔离级别的概念 如脏读…</p><p>redis事务命令：</p><ul><li>开启事务（multi）</li><li>命令入队（所有需要执行的命令…）</li><li>执行事务（exec）</li><li>放弃事务（DISCARD）</li></ul><blockquote><p>监控：Watch</p></blockquote><p>watch 监视</p><p>unwatch 取消监视</p><h2 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h2><p>是Redis官方推荐的java连接开发工具</p><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.62<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">System.out.println(jedis.ping());</span><br><span class="line"><span class="comment">//返回 PONG</span></span><br></pre></td></tr></table></figure><h3 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h3><p>String</p><p>List</p><p>Set</p><p>Hash</p><p>Zset</p><h3 id="事务操作"><a href="#事务操作" class="headerlink" title="事务操作"></a>事务操作</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建json</span></span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">jsonObject.put(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>);</span><br><span class="line">jsonObject.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;xiadujian&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//开启事务</span></span><br><span class="line"><span class="type">Transaction</span> <span class="variable">multi</span> <span class="operator">=</span> jedis.multi();</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> jsonObject.toJSONString();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">multi.set(<span class="string">&quot;user1&quot;</span>,result);</span><br><span class="line">multi.set(<span class="string">&quot;user2&quot;</span>,result);</span><br><span class="line">multi.exec();<span class="comment">//执行事务</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">multi.discard();<span class="comment">//放弃事务</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;flnally&#123;</span><br><span class="line">jedis.close();<span class="comment">//关闭连接</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="集成SpringBoot"><a href="#集成SpringBoot" class="headerlink" title="集成SpringBoot"></a>集成SpringBoot</h2><p>在SpringBoot2.X之后，原来使用的jedis被替换为了lettuce</p><p>jedis:采用的直连，多个线程操作不安全 使用jedis pool连接池</p><p>lettuce:采用netty,实例可以再多个线程中进行共享，不存在线程不安全</p><h3 id="添加依赖-1"><a href="#添加依赖-1" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#SpringBoot所有的配置类</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">redis:</span></span><br><span class="line"><span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">6379</span></span><br></pre></td></tr></table></figure><h3 id="配置Config"><a href="#配置Config" class="headerlink" title="配置Config"></a>配置Config</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> RedisTemplate&lt;String,Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span>&#123;</span><br><span class="line">RedisTemplate&lt;String,Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;String,Object&gt;();</span><br><span class="line">template.setConnectionFactory(factory);</span><br><span class="line">        <span class="type">Jackson2JsonRedisSerializer</span> <span class="variable">jackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL,JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjedctMapper(om);</span><br><span class="line">        <span class="type">StringRedisSerializer</span> <span class="variable">stringRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//key采用String的序列化方式</span></span><br><span class="line">        template.setKeySerializer(stringRedisSerialize);</span><br><span class="line">        <span class="comment">//hash的key采用String的序列化方式</span></span><br><span class="line">        template.setHashKeySerializer(stringRedisSerialize);</span><br><span class="line">        <span class="comment">//value序列化方式采用jackson</span></span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">//hash的value序列化方式采用jackson</span></span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        </span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Redis工具类"><a href="#Redis工具类" class="headerlink" title="Redis工具类"></a>Redis工具类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hui.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">RedisUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// =============================common============================</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定缓存失效时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">expire</span><span class="params">(String key, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key 获取过期时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 时间(秒) 返回0代表为永久有效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getExpire</span><span class="params">(String key)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断key是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasKey</span><span class="params">(String key)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 可以传一个值 或多个</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">del</span><span class="params">(String... key)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (key != <span class="literal">null</span> &amp;&amp; key.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (key.length == <span class="number">1</span>) &#123;</span><br><span class="line">        redisTemplate.delete(key[<span class="number">0</span>]);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        redisTemplate.delete(CollectionUtils.arrayToList(key));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// ============================String=============================</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存获取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> key == <span class="literal">null</span> ? <span class="literal">null</span> : redisTemplate.opsForValue().get(key);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">set</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      redisTemplate.opsForValue().set(key, value);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入并设置时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒) time要大于0 如果time小于等于0 将设置无限期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">set</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        set(key, value);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递增</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要增加几(大于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">incr</span><span class="params">(String key, <span class="type">long</span> delta)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;递增因子必须大于0&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递减</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要减少几(小于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">decr</span><span class="params">(String key, <span class="type">long</span> delta)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;递减因子必须大于0&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, -delta);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// ================================Map=================================</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashGet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="keyword">public</span> Object <span class="title function_">hget</span><span class="params">(String key, String item)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> redisTemplate.opsForHash().get(key, item);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取hashKey对应的所有键值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对应的多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title function_">hmget</span><span class="params">(String key)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 对应多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet 并设置时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map  对应多个键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">      <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        expire(key, time);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hset</span><span class="params">(String key, String item, Object value)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hset</span><span class="params">(String key, String item, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">      <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        expire(key, time);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除hash表中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 可以使多个 不能为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hdel</span><span class="params">(String key, Object... item)</span> &#123;</span><br><span class="line">    redisTemplate.opsForHash().delete(key, item);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断hash表中是否有该项的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hHasKey</span><span class="params">(String key, String item)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key, item);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递增 如果不存在,就会创建一个 并把新增后的值返回</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by   要增加几(大于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">hincr</span><span class="params">(String key, String item, <span class="type">double</span> by)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, by);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递减</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by   要减少记(小于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">hdecr</span><span class="params">(String key, String item, <span class="type">double</span> by)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, -by);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// ============================set=============================</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key获取Set中的所有值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="keyword">public</span> Set&lt;Object&gt; <span class="title function_">sGet</span><span class="params">(String key)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据value从一个set中查询,是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">sHasKey</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> redisTemplate.opsForSet().isMember(key, value);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据放入set缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">sSet</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将set数据放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time   时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">sSetAndTime</span><span class="params">(String key, <span class="type">long</span> time, Object... values)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">      <span class="keyword">if</span> (time &gt; <span class="number">0</span>)</span><br><span class="line">        expire(key, time);</span><br><span class="line">      <span class="keyword">return</span> count;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取set缓存的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">sGetSetSize</span><span class="params">(String key)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> redisTemplate.opsForSet().size(key);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除值为value的</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">setRemove</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForSet().remove(key, values);</span><br><span class="line">      <span class="keyword">return</span> count;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ===============================list=================================</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end   结束 0 到 -1代表所有值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">lGet</span><span class="params">(String key, <span class="type">long</span> start, <span class="type">long</span> end)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">lGetListSize</span><span class="params">(String key)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过索引 获取list中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引 index&gt;=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="keyword">public</span> Object <span class="title function_">lGetIndex</span><span class="params">(String key, <span class="type">long</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> redisTemplate.opsForList().index(key, index);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lSet</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lSet</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">      <span class="keyword">if</span> (time &gt; <span class="number">0</span>)</span><br><span class="line">        expire(key, time);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lSet</span><span class="params">(String key, List&lt;Object&gt; value)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lSet</span><span class="params">(String key, List&lt;Object&gt; value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">      <span class="keyword">if</span> (time &gt; <span class="number">0</span>)</span><br><span class="line">        expire(key, time);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引修改list中的某条数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lUpdateIndex</span><span class="params">(String key, <span class="type">long</span> index, Object value)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      redisTemplate.opsForList().set(key, index, value);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除N个值为value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count 移除多少个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">lRemove</span><span class="params">(String key, <span class="type">long</span> count, Object value)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="type">Long</span> <span class="variable">remove</span> <span class="operator">=</span> redisTemplate.opsForList().remove(key, count, value);</span><br><span class="line">      <span class="keyword">return</span> remove;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Redis-config配置"><a href="#Redis-config配置" class="headerlink" title="Redis config配置*"></a>Redis config配置*</h2><h2 id="持久化-RDB"><a href="#持久化-RDB" class="headerlink" title="持久化 RDB"></a>持久化 RDB</h2><p>（Redis DataBase）<strong>快照</strong> <strong>默认配置足以</strong> 在指定的时间间隔内将内存中的数据集快照写入磁盘 效率较高 保存的文件是dump.rdb</p><p><code>save ss number</code>在配置文件中设置ss秒内修改number个数据进行保存</p><p>通过添加子进程额外进行数据</p><p>优：适合大规模的数据恢复 对数据完整性要求不高</p><p>缺：fork进程的时候会占用一定的内容空间 需要一定的时间间隔进行操作，遇到redis意外宕机 当此修改就无效了</p><h2 id="持久化-AOF"><a href="#持久化-AOF" class="headerlink" title="持久化 AOF"></a>持久化 AOF</h2><p>（Append Only File）</p><p>以日志的方式记录每个写操作（除读取操作），只追加文件，但不能改写文件，redis启动时会读取该文件进行数据的重构</p><p>默认是不开启的，需要手动配置</p><p><code>appendonly no</code>在配置文件中修改appendonly  只需将no改为 yes</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">appendonly no <span class="comment">#默认不开启AOF持久化 需要手动开启</span></span><br><span class="line">appendfilename <span class="string">&quot;appendonly.aof&quot;</span> <span class="comment">#持久化的文件的名字</span></span><br><span class="line"></span><br><span class="line">appendfsync always <span class="comment">#每次修改都会 sync 消耗性能</span></span><br><span class="line">appendfsync everysec <span class="comment">#每秒执行一次 sync 可能会丢失1s的数据</span></span><br><span class="line">appendfsync no <span class="comment">#不执行 sync,这个时候操作系统自己同步数据，速度最快</span></span><br></pre></td></tr></table></figure><p>优：每次修改同步，文件完整性好 只可能丢失1s的数据 从不同步效率最高</p><p>缺：相对于数据文件 AOF远大于RDB 修复速度慢 运行效率也较慢</p><h2 id="发布订阅"><a href="#发布订阅" class="headerlink" title="发布订阅"></a>发布订阅</h2><p>消息通信模式</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#订阅 xxx 频道</span></span><br><span class="line">SUBSCRIBE xxx</span><br><span class="line"></span><br><span class="line"><span class="comment">#发布消息message到xxx频道</span></span><br><span class="line">PUBLISH xxx message </span><br></pre></td></tr></table></figure><ol><li>实时消息系统</li><li>实时聊天</li></ol><h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制*"></a>主从复制*</h2><p>数据的复制是单向的，只能从主–&gt;从 读写分离 80%是读操作 一般是一主二从</p><p><strong>作用</strong>数据冗余 故障恢复 负载均衡 高可用</p>]]></content>
      
      
      <categories>
          
          <category> 技术支持 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 缓存 </tag>
            
            <tag> 服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="/2022/10/06/technology/Linux/"/>
      <url>/2022/10/06/technology/Linux/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux系统"><a href="#Linux系统" class="headerlink" title="Linux系统"></a>Linux系统</h1><p>是一套免费使用和自由传播的类Unix操作系统 以网络为核心的设计思想</p><p><strong>一切皆是文件</strong></p><p><strong>根目录 <code>/</code>：所有文件</strong></p><h2 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sync</span> <span class="comment">#将数据由内存同步到硬盘中 在关机前操作</span></span><br><span class="line">shutdown <span class="comment">#关机指令</span></span><br><span class="line">shutdown -h 10 <span class="comment">#计算机将在十秒后关机</span></span><br><span class="line">shutdown -h now <span class="comment">#立刻关机</span></span><br><span class="line">shutdown -r now <span class="comment">#立刻重启</span></span><br><span class="line">shutdown -r +10 <span class="comment">#10分钟后重启</span></span><br><span class="line">reboot <span class="comment">#重启</span></span><br><span class="line">halt <span class="comment">#关闭系统</span></span><br></pre></td></tr></table></figure><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><strong>&#x2F;bin</strong>存放最经常使用的命令</li><li><strong>&#x2F;boot</strong>    启动Linux的核心文件</li><li><strong>&#x2F;dev</strong>    存放Linux的外部设备</li><li><strong>&#x2F;etc</strong>    用来存放所有系统管理所需要的配置文件和子目录</li><li><strong>&#x2F;home</strong>    用户的主目录 一般该目录是以用户账号命名</li><li><strong>&#x2F;lib</strong>    存放系统最基本的动态连接共享库</li><li><strong>&#x2F;lost+found</strong>    当系统非法关机存放文件</li><li><strong>&#x2F;media</strong>    自动设备挂载</li><li><strong>&#x2F;mnt</strong>    用户临时挂载别的文件系统</li><li><strong>&#x2F;opt</strong>    给主机额外安装软件所摆放的目录</li><li><strong>&#x2F;proc</strong>    系统内存映射</li><li><strong>&#x2F;root</strong>    系统管理员</li><li><strong>&#x2F;sbin</strong>    系统管理程序</li><li><strong>&#x2F;srv</strong>    服务启动之后需要提取的数据</li><li><strong>&#x2F;sys</strong>    文件系统sysfs</li><li><strong>&#x2F;tmp</strong>    存放临时文件</li><li><strong>&#x2F;usr</strong>    应用程序和文件存放位置</li><li><strong>&#x2F;usr&#x2F;bin</strong>    系统用户使用的应用程序</li><li><strong>&#x2F;usr&#x2F;sbin</strong>    超级用户高级管理程序</li><li><strong>&#x2F;usr&#x2F;src</strong>    内核源代码默认放置位置</li><li><strong>&#x2F;var</strong>    存放不断扩充的东西</li><li><strong>&#x2F;run</strong>    临时文件系统，存储系统启动以来的信息，系统重启这个目录的文件应该删除</li></ul><h2 id="常用基本命令"><a href="#常用基本命令" class="headerlink" title="常用基本命令"></a>常用基本命令</h2><h3 id="目录管理"><a href="#目录管理" class="headerlink" title="目录管理"></a>目录管理</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#绝对路径 相对路径</span></span><br><span class="line"><span class="built_in">ls</span> <span class="comment">#列出目录</span></span><br><span class="line"><span class="built_in">ls</span> -a <span class="comment">#查看全部文件，包括隐藏文件</span></span><br><span class="line"><span class="built_in">ls</span> -l <span class="comment">#列出所有文件包含文件属性和权限，无隐藏文件</span></span><br><span class="line"><span class="built_in">ls</span> -al <span class="comment">#所有Linux命令可以组合使用 查询全部文件包含隐藏文件及文件属性权限</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> [路径] <span class="comment">#切换目录命令</span></span><br><span class="line">./ <span class="comment">#当前目录</span></span><br><span class="line"><span class="built_in">cd</span> .. <span class="comment">#返回上级目录</span></span><br><span class="line"><span class="built_in">cd</span> ../user <span class="comment">#相对路径跳转</span></span><br><span class="line"><span class="built_in">cd</span> /home/xdj <span class="comment">#绝对路径跳转</span></span><br><span class="line"><span class="built_in">cd</span> ~ <span class="comment">#回到当前用户目录</span></span><br><span class="line"><span class="built_in">pwd</span> <span class="comment">#显示当前所在目录</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> [文件夹] <span class="comment">#创建一个目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p [文件夹/文件夹/文件夹] <span class="comment">#创建递归多级目录</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">rmdir</span> [文件夹] <span class="comment">#删除文件夹</span></span><br><span class="line"><span class="built_in">rmdir</span> -p [文件夹/文件夹/文件夹] <span class="comment">#删除递归多级目录</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> [文件名] [文件夹] <span class="comment">#复制文件到指定目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#rm(移除文件或者目录)</span></span><br><span class="line"><span class="built_in">rm</span> -f <span class="comment">#忽略不存在的文件，不会出现警告，强制删除</span></span><br><span class="line"><span class="built_in">rm</span> -r <span class="comment">#递归删除目录</span></span><br><span class="line"><span class="built_in">rm</span> -i <span class="comment">#互动，删除询问是否删除</span></span><br><span class="line"><span class="built_in">rm</span> -rf / <span class="comment">#系统中所有文件删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#mv 移动文件或目录</span></span><br><span class="line"><span class="built_in">mv</span> -f 强制</span><br><span class="line"><span class="built_in">mv</span> -u 只替换已经更新的文件</span><br></pre></td></tr></table></figure><p>文件搜索 find</p><p>挂载 mount</p><h1 id="Linux环境搭建"><a href="#Linux环境搭建" class="headerlink" title="Linux环境搭建"></a>Linux环境搭建</h1><h2 id="资源目录"><a href="#资源目录" class="headerlink" title="资源目录"></a>资源目录</h2><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">application</span>\<span class="title">WORK</span>\<span class="title">Linux</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术支持 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins</title>
      <link href="/2022/10/06/technology/Jenkins/"/>
      <url>/2022/10/06/technology/Jenkins/</url>
      
        <content type="html"><![CDATA[<h1 id="Jenkins基础"><a href="#Jenkins基础" class="headerlink" title="Jenkins基础"></a>Jenkins基础</h1><h2 id="软件开发流程"><a href="#软件开发流程" class="headerlink" title="软件开发流程"></a>软件开发流程</h2><p>需求分析-&gt;项目设计-&gt;项目编码-&gt;测试-&gt;维护</p><h2 id="软件开发模型"><a href="#软件开发模型" class="headerlink" title="软件开发模型"></a>软件开发模型</h2><h3 id="瀑布模型"><a href="#瀑布模型" class="headerlink" title="瀑布模型"></a>瀑布模型</h3><p>简单易用理解 只需关注当前阶段</p><h3 id="敏捷开发"><a href="#敏捷开发" class="headerlink" title="敏捷开发"></a>敏捷开发</h3><p>迭代 增量  早期交付 降低软件开发成本</p><h2 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h2><p>（Continuous integration,简称CI）敏捷开发很大一部分归功于持续集成</p><p>自动化构建过程 代码仓库 持续集成服务器</p><blockquote><p>优点：降低风险 对系统健康检查 减少重复性工作 持续部署 持续交付可供使用的版本 增强团队信心</p></blockquote><h2 id="Jenkins简介"><a href="#Jenkins简介" class="headerlink" title="Jenkins简介"></a>Jenkins简介</h2><p>是一款流行的开源持续集成工具，广泛用于项目开发，具有自动化构建，测试，部署功能</p><ol><li>开源，基于java</li><li>易于安装部署</li><li>分布式构建</li><li>文件识别</li><li>丰富的插件支持</li></ol><h2 id="Jenkins安装环境配置"><a href="#Jenkins安装环境配置" class="headerlink" title="Jenkins安装环境配置"></a>Jenkins安装环境配置</h2><p><img src="D:\Data\Typora\资料库\图纸\持续集成流程图.png" alt="持续集成流程图"></p><h3 id="服务器软件安装列表"><a href="#服务器软件安装列表" class="headerlink" title="服务器软件安装列表"></a>服务器软件安装列表</h3><table><thead><tr><th>名称</th><th>IP地址</th><th>安装的软件</th></tr></thead><tbody><tr><td>代码托管服务器</td><td>-</td><td>Gitlab</td></tr><tr><td>持续集成服务器</td><td>-</td><td>jenkins,JDK,Maven,GIt,SonarQube</td></tr><tr><td>应用测试服务器</td><td>-</td><td>JDK1.8,Tomcat</td></tr></tbody></table><h2 id="GitLab"><a href="#GitLab" class="headerlink" title="GitLab"></a>GitLab</h2><h3 id="安装配置（略）"><a href="#安装配置（略）" class="headerlink" title="安装配置（略）"></a>安装配置（略）</h3><h3 id="分组-创建用户-创建项目"><a href="#分组-创建用户-创建项目" class="headerlink" title="分组 创建用户 创建项目"></a>分组 创建用户 创建项目</h3><p>GitLab用户在组中的五种权限：</p><ol><li>Guest：只能创建issue,发表评论，不能读写版本库</li><li>Reporter：可以克隆代码，不能提交，QA、PM可以赋予这个权限</li><li>Developer：可以克隆代码  开发 提交 push（适用普通开发人员）</li><li>Maintainer：可以创建项目 添加tag 保护分支 添加项目成员 编辑项目 （核心开发权限）</li><li>Owner：可以设置项目访问权限 删除项目 迁移项目 管理组成员 （开发组组长）</li></ol><h2 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h2><h3 id="一些插件"><a href="#一些插件" class="headerlink" title="一些插件"></a>一些插件</h3><p>汉化插件</p><p>Role-based Authorization Strategy(用户权限)</p><p>git插件</p><ol><li>HTTP: username password</li><li>SSH:在GitLab服务器存放公钥 在Jenkins服务器放私钥</li></ol><h3 id="一些配置"><a href="#一些配置" class="headerlink" title="一些配置"></a>一些配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/*安装Maven*/</span><br><span class="line">tar -xzf apache-maven-3.6.2-bin.tar.gz 解压</span><br><span class="line">mkdir -p /opt/maven 创建目录</span><br><span class="line">mv apache-maven-3.6.2/*/opt/maven 移动文件</span><br><span class="line"></span><br><span class="line">/*配置环境变量*/</span><br><span class="line">export JAVA_HOME = /use/lib/jvm/language-1.8.0-openjdk</span><br><span class="line">export MAVEN_HOME = /opt/maven</span><br><span class="line">export PATH = $PATH:$JAVA_HOME/bin:$MAVEN_HOME/bin</span><br></pre></td></tr></table></figure><p>在Jenkins全局配置（Clobal Tool Configuration）中配置JKD和Maven路径</p><p>在Jenkins系统配置（Configure System）加入一些变量</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JAVA_HOME</span><br><span class="line">java地址</span><br><span class="line"></span><br><span class="line">M2_HOME</span><br><span class="line">Maven地址</span><br><span class="line"></span><br><span class="line">PATH+EXTRA</span><br><span class="line">$M2_HOME/bin</span><br></pre></td></tr></table></figure><p>修改Maven的setting.xml</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir/root/repo 创建本地仓库</span><br><span class="line">vi/opt/maven/conf/settings.xml</span><br><span class="line">本地仓库改为：&lt;localRepository&gt;/root/repo/&lt;/localRepository&gt;</span><br><span class="line"></span><br><span class="line">添加阿里云私服地址：</span><br><span class="line">&lt;mirror&gt;</span><br><span class="line">&lt;id&gt;alimaven&lt;/id&gt;</span><br><span class="line">&lt;name&gt;aliyun maven&lt;/name&gt;</span><br><span class="line">&lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;</span><br><span class="line">&lt;mirrorof&gt;central&lt;/mirrorof&gt;</span><br><span class="line">&lt;/mirror&gt;</span><br></pre></td></tr></table></figure><h3 id="构建命令"><a href="#构建命令" class="headerlink" title="构建命令"></a>构建命令</h3><h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*添加并解压*/</span><br><span class="line">tar -xzf apache-tomcat-8.5.47.tat.gz</span><br><span class="line">/*创建目录 移动tomcat解压文件*/</span><br><span class="line">mkdir /opt/tomcat</span><br><span class="line">mv apache-tomcat-8.5.47/* /opt/tomcat</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>配置文件在 conf&#x2F;tomcat-users.xml</p><p><code>vi tomcat-users.xml</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tomcat-users</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;tomcat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;role1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;manager-script&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;manager-gui&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;manager-status&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;admin-gui&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;admin-script&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">&quot;tomcat&quot;</span> <span class="attr">password</span>=<span class="string">&quot;tomcat&quot;</span> <span class="attr">roles</span>=<span class="string">&quot;manager-gui,manager-script,tomcat,admin-gui,admin-script&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tomcat-users</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为了能够用刚配置的用户登录到Tomcat，需要修改以下配置</p><p>vi&#x2F;opt&#x2F;tomcat&#x2F;webapps&#x2F;manager&#x2F;META-INF&#x2F;context.xml</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--&lt;value className=&quot;org.apache.catolina.values.RemoteAddrValue&quot; allow=&quot;127\.\d+\.\d+|::1|0:0:0:0:0:0:0:1&quot; /&gt; --&gt;</span><br></pre></td></tr></table></figure><h1 id="Jenkins构建"><a href="#Jenkins构建" class="headerlink" title="Jenkins构建"></a>Jenkins构建</h1><h2 id="项目构建类型"><a href="#项目构建类型" class="headerlink" title="项目构建类型"></a>项目构建类型</h2><ul><li>自由风格软件项目（FreeStyle Project）默认</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.git 拉取代码</span><br><span class="line">2.编译打包 添加构建步骤 一般情况下用shell脚本</span><br><span class="line">/--测试 模拟</span><br><span class="line">echo &quot;开始编译和打包&quot;</span><br><span class="line">mvn clean package</span><br><span class="line">echo &quot;编译和打包结束&quot;</span><br><span class="line">--/</span><br><span class="line">3.上传部署 改建后操作</span><br><span class="line">/--</span><br><span class="line">WAR/EAR file : target/*.war</span><br><span class="line">Context path</span><br><span class="line">Containers 选择合适的Tomcat服务器版本</span><br><span class="line">Credentials 认证 tomcat账号密码</span><br><span class="line">Tomcat URL Tomcat远程地址</span><br><span class="line">--/</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>Maven项目（Maven Project）</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.安装插件 Maven Integration</span><br></pre></td></tr></table></figure><ul><li>流水线项目（Pipeline Project）</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>将项目部署到远程Tomcat服务器</p><p>1）安装Deploy to container插件</p><p>Jenkins本身无法实现远程部署到Tomcat的功能。</p>]]></content>
      
      
      <categories>
          
          <category> 技术支持 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务 </tag>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/2022/10/06/technology/Git/"/>
      <url>/2022/10/06/technology/Git/</url>
      
        <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><hr><p>版本迭代需要一个<strong>版本控制</strong>（Revision control）在开发中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术</p><ol><li><p>实现跨区域多人协同开发</p></li><li><p>追踪和记载一个或多个文件的历史记录</p></li><li><p>组织保护你的源代码和文档</p></li><li><p>统计工作量</p></li><li><p>并行开发、提高开发效率</p></li><li><p>跟踪记录整个软件的开发过程</p></li><li><p>减轻开发人员的负担，节省时间，同时降低人为错误</p><h2 id="第一次配置github与使用https-www-cnblogs-com-sdcs-p-8270029-html"><a href="#第一次配置github与使用https-www-cnblogs-com-sdcs-p-8270029-html" class="headerlink" title="第一次配置github与使用https://www.cnblogs.com/sdcs/p/8270029.html"></a>第一次配置github与使用<a href="https://www.cnblogs.com/sdcs/p/8270029.html">https://www.cnblogs.com/sdcs/p/8270029.html</a></h2></li></ol><hr><p>[TOC]</p><hr><h4 id="一、常见主流版本控制器"><a href="#一、常见主流版本控制器" class="headerlink" title="一、常见主流版本控制器"></a>一、常见主流版本控制器</h4><ol><li>Git</li><li>SVN</li><li>CVS</li><li>VSS</li><li>TFS</li><li>Visual Studio Online</li></ol><h4 id="二、版本控制分类"><a href="#二、版本控制分类" class="headerlink" title="二、版本控制分类"></a>二、版本控制分类</h4><ol><li>本地版本控制：记录文件每次的更新，可以对每个版本做一个快照，或是记录补丁文件，适合<strong>个人</strong>，如RCS</li><li>集中式版本控制：所有版本数据都保存在服务器上，协同开发者从服务器上同步更新或上传自己的修改，适合<strong>多人</strong>，如SVN</li><li>分布式版本控制：每个人都拥有全部的代码，具有安全隐患。在本地就可以看到所有代码，不会因为服务器损坏，网络问题导致不能工作的情况。适合<strong>多人</strong>，如Git</li><li>Git与SVN区别<ul><li>Git:每个电脑就是完整的服务器，不需要联网，Git可以直接看到更新的代码</li><li>SVN:版本放在中央服务器，需要联网使用，从服务器获取，操作完再提交到服务器</li></ul></li></ol><p><strong>Git是目前世界上最先进的分布式版本控制系统</strong></p><h4 id="三、安装卸载"><a href="#三、安装卸载" class="headerlink" title="三、安装卸载"></a>三、安装卸载</h4><ol><li>安装地址<a href="http://npm.taobao.org/mirrors/git-for-windows/v2.32.0.windows.2/">git-for-windows Mirror (taobao.org)</a></li><li>无脑安装</li><li>卸载 删除git的环境变量 打开控制面板卸载</li></ol><p>安装完成后，菜单下有三个Git项，任意文件夹下右键也可以看到对应的程序</p><ul><li>Git Bash：Unix与Linux风格的命令行，使用最多，推荐最多 （清屏clear）</li><li>Git CMD：Windows风格的命令行（清屏cls）</li><li>Git GUI：图形界面的Git,不建议初学者使用，尽量县属虚常用命令</li></ul><h4 id="四、基本Linux命令"><a href="#四、基本Linux命令" class="headerlink" title="四、基本Linux命令"></a>四、基本Linux命令</h4><ol><li><p>cd：改变目录</p></li><li><p>cd ..：回退到上一个目录，直接cd进入默认目录</p></li><li><p>pwd：显示当前所在目录路径</p></li><li><p>ls(II)：都是列出当前目录中的所有文件，只不过II（两个II）列出的内容更为详细</p></li><li><p>touch：新建一个文件 如touch index.js 就会在当前目录下新建一个index.js文件</p></li><li><p>rm：删除一个文件，rm index.js 就是把index.js文件删除</p></li><li><p>mkdir：新建一个目录。就是新建一个文件夹</p></li><li><p>rm -r：删除一个目录。就是删除一个文件夹</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#格式化电脑 删除电脑中全部文件</span><br><span class="line">rm -rf/</span><br></pre></td></tr></table></figure></li><li><p>mv：移动文件，mv index.html src index.html是我们要移动的文件。src是目标文件夹</p></li><li><p>reset：重新初始化终端。清屏</p></li><li><p>clear：清屏</p></li><li><p>history：查看命令历史</p></li><li><p>help：帮助</p></li><li><p>exit：退出</p></li><li><p>#：表示注释</p></li></ol><p>五、Git的必要配置</p><ol><li><p>得到Git当前所有配置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config -l</span><br></pre></td></tr></table></figure></li><li><p>只看系统的配置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --system --list</span><br></pre></td></tr></table></figure></li><li><p>只看本地的配置，即自己的配置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global --list</span><br><span class="line">#设置邮箱与用户</span><br><span class="line">git config --global user.name &quot;xdj&quot;</span><br><span class="line">git config --global user.email &quot;1226954639@qq.com&quot;</span><br></pre></td></tr></table></figure></li><li><p>Git相关配置文件位置</p><ul><li><p>系统Git\etc\gitconfig ：Git安装目录下的gitconfig  –system系统级</p></li><li><p>用户    C:\Users\lenovo.gitconfig 只适用于当前登录用户的配置 –global全局</p><p>这里可以直接编辑配置文件，通过命令设置后会响应到这里</p></li></ul></li></ol><h4 id="五、Git基本理论（核心）"><a href="#五、Git基本理论（核心）" class="headerlink" title="五、Git基本理论（核心）"></a>五、Git基本理论（核心）</h4><p><img src="D:\Data\Typora\资料库\图纸\Git原理_01.png"></p><ol><li>Workspace：工作区，平时放代码的地方</li><li>Index&#x2F;Stage：暂存区，用于临时存放你的改动，事实上只是一个文件，保存即将提交到文件列表信息</li><li>Repository：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版权的数据，其中HEAD指向最新放入仓库的版本</li><li>Remote：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台用于远程数据交换</li></ol><h4 id="六、Git项目创建"><a href="#六、Git项目创建" class="headerlink" title="六、Git项目创建"></a>六、Git项目创建</h4><ol><li>初始化本地本地  git init</li><li>初始化远程仓库  git clone [url]</li><li>查看指定文件状态   git status [filename]</li><li>查看所有文件状态   git status</li><li>添加所有文件到暂存区   git add .</li><li>提交暂存区中的内容到   git commit -m</li></ol><h4 id="七、Git基本操作命令"><a href="#七、Git基本操作命令" class="headerlink" title="七、Git基本操作命令"></a>七、Git基本操作命令</h4><ol><li><p>有时候不想把一些文件纳入版本控制器中，比如数据库文件，临时文件，设计文件。在主目录下创建.gitignore文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#该文件有以下语法规则 #为注解</span><br><span class="line">*.txt#忽略所有 .txt结尾的文件</span><br><span class="line">！lib.txt    #lib.txt除外</span><br><span class="line">/temp        #仅忽略项目根目录下的TODO文件，不包括其他目录temp</span><br><span class="line">build/       #忽略build/目录下的所有文件</span><br><span class="line">doc/*.tex    #会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span><br></pre></td></tr></table></figure></li></ol><h4 id="八、码云的注册和使用"><a href="#八、码云的注册和使用" class="headerlink" title="八、码云的注册和使用"></a>八、码云的注册和使用</h4><ol><li><p>设置本机绑定SSH公钥，实现免密码登录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#进入 C：\Users\lenovo\.ssh目录</span><br><span class="line">#生成公钥 加密算法</span><br><span class="line">ssh-keygen [-t rsa]</span><br></pre></td></tr></table></figure></li><li><p>将公钥信息public key 添加到码云账户中</p></li><li><p>使用码云创建一个自己的仓库</p></li><li><p>将.ssh中的公钥id_rsa.pub中的内容复制到码云的SSH公钥中</p></li><li><p>新建仓库</p></li><li><p>克隆  复制http路径</p></li><li><p>命令行下载到本地</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://gitee.com/xdjclover/gitstudy.git</span><br></pre></td></tr></table></figure></li></ol><h4 id="九、idea集成git"><a href="#九、idea集成git" class="headerlink" title="九、idea集成git"></a>九、idea集成git</h4><ol><li><p>新建idea项目</p><ul><li>将我们远程的git文件目录拷贝到项目中即可</li></ul></li><li><p>修改文件，使用idea操作git</p><ul><li>git add .       添加到暂存区</li><li>git commit -m “修改内容”       提交</li><li>git push 到远程仓库</li><li></li></ul></li><li><p>提交测试</p></li><li><p>分支    master主分支</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#列出所有分支</span><br><span class="line">git branch</span><br><span class="line">#列出所有远程分支</span><br><span class="line">git branch -r</span><br><span class="line">#新建一个分支，但依然停留在当前分支</span><br><span class="line">git branch [branch-name]</span><br><span class="line">#新建一个分支，并切换到该分支</span><br><span class="line">git checkout -b [branch]</span><br><span class="line">#合并指定分支到当前分支</span><br><span class="line">$ git merge [branch]</span><br><span class="line">#删除分支</span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line">#删除远程分支</span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remotr/branch]</span><br><span class="line">#回到主支上 main为主支</span><br><span class="line">$ git rebase main</span><br><span class="line">#^当前指向bugFix的父支点，~4向上4支点</span><br><span class="line">$ git checkout bugFix^</span><br><span class="line">$ git checkout bugFix~4</span><br><span class="line">#将main提交放置在c6结点上</span><br><span class="line">$ git branch -f main c1</span><br><span class="line">#撤销有两种，reset 撤销返回到上一层适合本地    revert再次提交，将上次修改的恢复适合远程</span><br><span class="line">$ git reset head^</span><br><span class="line">$ git revert head</span><br><span class="line">#将c2提交放到当前所在的位置下面</span><br><span class="line">$ git cherry-pick c2</span><br><span class="line">#rebase 将选择支点放到d点后  rebase -i 放从main回头四个支点放到指定点后</span><br><span class="line">$ git rebase main</span><br><span class="line">$ git rebase -i main~4</span><br></pre></td></tr></table></figure><p>如果多个分支并行执行，就会导致我们代码不冲突，也就是同时存在多个版本</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术支持 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 版本控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gradle</title>
      <link href="/2022/10/06/technology/Gradle/"/>
      <url>/2022/10/06/technology/Gradle/</url>
      
        <content type="html"><![CDATA[<h1 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h1><p>基于Ant和Maven产生的Gradle,使用一种基于Groovy的特定领域语言（DSL）来声明项目设置，抛弃了基于XML的各种繁琐配置，面向java应用为主</p><p>[TOC]</p><hr><h2 id="Gradle安装与配置（windows版）"><a href="#Gradle安装与配置（windows版）" class="headerlink" title="Gradle安装与配置（windows版）"></a>Gradle安装与配置（windows版）</h2><p>下载地址：<a href="https://gradle.org/">https://gradle.org/</a></p><h2 id="Gradle和idea集成"><a href="#Gradle和idea集成" class="headerlink" title="Gradle和idea集成"></a>Gradle和idea集成</h2><h2 id="Groovy语言简单介绍"><a href="#Groovy语言简单介绍" class="headerlink" title="Groovy语言简单介绍"></a>Groovy语言简单介绍</h2><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//介绍groovy编程语言</span></span><br><span class="line">println(<span class="string">&quot;hello groovy&quot;</span>);</span><br><span class="line"><span class="comment">//groovy中可以省略语句最末尾的分号，可以省略括号</span></span><br><span class="line">println <span class="string">&quot;我们是谁&quot;</span></span><br><span class="line"><span class="comment">//groovy定义变量  def弱类型</span></span><br><span class="line"><span class="keyword">def</span> i = <span class="number">18</span>;</span><br><span class="line">println i;</span><br><span class="line"><span class="comment">//复杂类型 </span></span><br></pre></td></tr></table></figure><h2 id="Gradle仓库的配置"><a href="#Gradle仓库的配置" class="headerlink" title="Gradle仓库的配置"></a>Gradle仓库的配置</h2><h2 id="Gradle入门案例"><a href="#Gradle入门案例" class="headerlink" title="Gradle入门案例"></a>Gradle入门案例</h2><h2 id="Gradle创建java-web工程并在tomcat下运行"><a href="#Gradle创建java-web工程并在tomcat下运行" class="headerlink" title="Gradle创建java web工程并在tomcat下运行"></a>Gradle创建java web工程并在tomcat下运行</h2><h2 id="Gradle构建多模块项目"><a href="#Gradle构建多模块项目" class="headerlink" title="Gradle构建多模块项目"></a>Gradle构建多模块项目</h2>]]></content>
      
      
      <categories>
          
          <category> 技术支持 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 依赖管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA基础</title>
      <link href="/2022/10/06/language/JAVA%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/10/06/language/JAVA%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="基础部分"><a href="#基础部分" class="headerlink" title="基础部分"></a>基础部分</h1><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h2 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h2><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h2 id="面向对象-对象"><a href="#面向对象-对象" class="headerlink" title="面向对象-对象"></a>面向对象-对象</h2><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><h1 id="进阶部分"><a href="#进阶部分" class="headerlink" title="进阶部分"></a>进阶部分</h1><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><p>final修饰的类无法继承（最终类）</p><p>final修饰的方法无法覆盖</p><p>final修饰的变量只能赋值一次</p><p>final修饰的引用一旦指向某个对象，则不能再重新指向其他对象，但该指向对象实例的属性可用修改</p><p>final修饰的实例变量必须手动赋初值，不能采用系统默认</p><p>final修饰的实例变量一般和static联合使用，称为&#x3D;&#x3D;<strong>常量</strong>&#x3D;&#x3D;</p><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>定义：在class前添加abstract</p><p>抽象类属于引用类型，无法实例化对象，只能被继承</p><p>final和abstract不能联合使用，这两个关键字是对立的</p><p>抽象类的子类可用是抽象类，也可以是非抽象类</p><p>抽象类可以有构造方法，可以供子类使用</p><p>抽象类中不一定有抽象方法，抽象方法一定出现在抽象类中</p><p>抽象方法的定义：public abstract void add();</p><p>非抽象类继承抽象类必须将抽象类中的抽象方法进行覆盖&#x2F;重写&#x2F;实现</p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>定义：interface</p><p>接口也是一种引用数据类型，编译以后也是一个class字节码文件</p><p>接口是完全抽象的（抽象类是半抽象的）</p><p>接口支持多继承，一个接口可以继承多个接口</p><p>接口中只包含两种内容：常量；抽象方法</p><p>接口所有元素都是public修饰的</p><p>接口中的方法定义：public abstract void add(); abstract可以省略</p><p>接口中的常量定义：public static final String NAME;</p><p>非抽象的类实现接口，必须实现接口中所有方法实现</p><p>一个类可以实现多个接口</p><p>extends和implements可以同时使用，extends在前，implements在后</p><p>使用接口，写代码时可以使用多态，父类引用变量指向子类实例对象</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>接口在开发中作用类似多态：面向对象，降低耦合，提高程序扩展能力</p><h3 id="抽象类和接口区别"><a href="#抽象类和接口区别" class="headerlink" title="抽象类和接口区别"></a>抽象类和接口区别</h3><p>抽象类是半抽象的</p><p>接口是完全抽象的</p><p>抽象类有构造方法</p><p>接口没有构造方法</p><p>接口和接口之间多继承</p><p>类和类之间单继承</p><p>一个类可以实现多个接口</p><p>一个类只能继承一个类</p><h2 id="Package和import"><a href="#Package和import" class="headerlink" title="Package和import"></a>Package和import</h2><h3 id="package"><a href="#package" class="headerlink" title="package"></a>package</h3><p>package出现在Java源文件第一行</p><p>编译带有包名的类：javac -d . xxx.java</p><p>运行：java 完整类名</p><h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><p>import 完整类名；</p><p>import 包名.*;</p><h2 id="JDK类库的根类：Object类"><a href="#JDK类库的根类：Object类" class="headerlink" title="JDK类库的根类：Object类"></a>JDK类库的根类：Object类</h2><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><p>应用程序编程接口</p><p>整个JDK的类库就是一个javase的API</p><p>每一个API都会配置一套API帮助文档</p><p>SUN公司提前写好的这套类库就是API。(一般每一份API都对应一份API帮助文档)</p><h3 id="Object中重点方法"><a href="#Object中重点方法" class="headerlink" title="Object中重点方法"></a>Object中重点方法</h3><p>protected Object clone()对象克隆</p><p>int hashCode()获取对象hash值</p><p>boolean equals(Object obj)判断两个对象是否相等</p><blockquote><p>一般我们使用的equals方法需要重写，因为默认该方法是比较对象的存储地址，我们一般用于比较内容</p><p>基本数据类型比较： &#x3D;&#x3D;</p><p>对象和对象比较：调用equals方法</p><p>String类是SUN公司写的，其equals方法已重写</p></blockquote><p>String toString()将对象转换为字符串形式</p><blockquote><p>默认是返回 getClass().getName() + “@” + Integer.toHexString(hashCode())</p><p>该方法一般使用都需要重写</p><p>String类是SUN公司写的，其toString方法已重写</p></blockquote><p>protected void finalize()垃圾回收器负责调用的方法</p><h2 id="常用八大类"><a href="#常用八大类" class="headerlink" title="常用八大类"></a>常用八大类</h2><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><ol><li>字符串一旦创建不可改变</li><li>双引号括起来的字符串存储在字符串常量池中</li><li>字符串比较必须用equeal</li><li>String已经重写了toString和equeal方法</li></ol><h4 id="常用构造方法"><a href="#常用构造方法" class="headerlink" title="常用构造方法"></a>常用构造方法</h4><h4 id="String类常用的21个方法"><a href="#String类常用的21个方法" class="headerlink" title="String类常用的21个方法"></a>String类常用的21个方法</h4><h3 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h3><ol><li>StringBuffer&#x2F;StringBuilder可看成可变长度的字符串</li><li>StringBuffer&#x2F;StringBuilder初始化容量是16</li><li>StringBuffer&#x2F;StringBuilder完成字符串拼接操作，方法名append</li><li>StringBuffer是线程安全的，StringBuilder是线程不安全的</li><li>频繁进行字符串拼接不建议使用”+”</li></ol><h3 id="基础类型对应的8个包装类"><a href="#基础类型对应的8个包装类" class="headerlink" title="基础类型对应的8个包装类"></a>基础类型对应的8个包装类</h3><p>包装类存在的意义：方便编程。java中有8个基本数据类型，为了适应面向对象的编程，所以封装了8个包装类对应八个基本数据类型</p><table><thead><tr><th>基本类型</th><th>包装类</th></tr></thead><tbody><tr><td>int</td><td>Integer</td></tr><tr><td>char</td><td>Character</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>byte</td><td>Byte</td></tr></tbody></table><p>所有数字的父类&#x3D;&#x3D;<strong>Number</strong>&#x3D;&#x3D;</p><p>自动装箱和自动拆箱：装箱就是自动将基本数据类型转换为包装器类型；拆箱就是自动将包装器类型转换为基本数据类型。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">System.out.println(x==y);<span class="comment">//true</span></span><br><span class="line"><span class="comment">//因为超出了Integer的范围，所以变成了基本类型</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">System.out.println(m==n);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><h3 id="日期相关类"><a href="#日期相关类" class="headerlink" title="日期相关类"></a>日期相关类</h3><ol><li><p>获取当前日期：Date date &#x3D; new Date();</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Date date = new Date();</span><br></pre></td></tr></table></figure></li><li><p>日期格式化：Date ——&gt; String</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">String s = simpleDateFormat.format(date);</span><br></pre></td></tr></table></figure></li><li><p>字符串转日期：String —&gt; Date</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Date date1 = simpleDateFormat.parse(&quot;2021-08-23 05:20:20&quot;);</span><br></pre></td></tr></table></figure></li><li><p>获取毫秒数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">long begin = System.currentTimeMillis();</span><br></pre></td></tr></table></figure></li></ol><h3 id="数字相关类"><a href="#数字相关类" class="headerlink" title="数字相关类"></a>数字相关类</h3><p>数字格式化：DecimalFormat</p><p>价格等金钱浮点数格式：BigDecimal</p><h3 id="Random"><a href="#Random" class="headerlink" title="Random"></a>Random</h3><p>产生一个随机数（0~1]</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Random random = new Random();</span><br><span class="line">int i = random.nextInt();</span><br></pre></td></tr></table></figure><p>产生一定范围内的随机数（0~100]</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int ii = random.nextInt(101);</span><br></pre></td></tr></table></figure><h3 id="Enum枚举"><a href="#Enum枚举" class="headerlink" title="Enum枚举"></a>Enum枚举</h3><ol><li><p>枚举是一种引用数据类型</p></li><li><p>枚举编译后也是class文件</p></li><li><p>枚举的定义</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">enum enums&#123;</span><br><span class="line">    num,num1,num2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>当一个方法返回结果超过两种情况，并且是可以一枚一枚列举出来的时候，建议返回值类型设计为枚举类型</p></li></ol><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>增强程序健壮性，异常以对象形式存在</p><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>注解（Annotation）也被称为元数据（Metadata），用于修饰解释 包、类、方法、属性、构造器、局部变量等数据信息</p><p>和注释一样，不影响程序逻辑性，但注解可以被编译或运行，相当于嵌入在代码中的补充信息</p><p>在JAVA SE中注解使用较为简单，在JAVA EE中注解占据根重要的角色，配置应用程序的任何切面，代替繁冗代码和XML配置</p><h3 id="三个基本注解"><a href="#三个基本注解" class="headerlink" title="三个基本注解"></a>三个基本注解</h3><p>@Override:限定某一个方法，是重写父类或接口方法，该注解只能用于方法</p><p>@Deprecated:用于表示某个程序元素（类，方法）已过时</p><p>@SuppressWarnings:抑制编译器警告</p><h3 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h3><p>JDK的元Annotation用于修饰其他Annotation</p><ol><li>Retention：指定注解作用范围，三种（SOUREC,CLASS,RUNTIME）</li><li>Target：指定注解可以在哪些地方使用</li><li>Documented：指定注解是否会在javadoc体现</li><li>Inherited：子类会继承父类注解</li></ol><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>可以动态的保存任意多个元素，使用方便</p><p>提供一系列方便的操作对象的方法：add,remove,set,get等</p><p>使用集合添加，删除元素的示意代码-简洁</p><h3 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h3><p>常用方法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">List list = new ArrayList();</span><br><span class="line">//  add:添加单个元素</span><br><span class="line">list.add(&quot;夏兮&quot;);</span><br><span class="line">//  remove:删除指定元素</span><br><span class="line">list.remove(&quot;夏兮&quot;);</span><br><span class="line">list.remove(0);</span><br><span class="line">//  contains:查找元素是否存在</span><br><span class="line">list.contains(&quot;夏兮&quot;);</span><br><span class="line">//  size:获取元素个数</span><br><span class="line">list.size();</span><br><span class="line">//  isEmpty:判断是否为空</span><br><span class="line">list.isEmpty();</span><br><span class="line">//  clear:清空</span><br><span class="line">list.clear();</span><br><span class="line">//  addAll:添加多个元素</span><br><span class="line">list.addAll(new ArrayList());</span><br><span class="line">list.addAll(1,new ArrayList());</span><br><span class="line">//  containsAll:查找多个元素是否都存在</span><br><span class="line">list.containsAll(new ArrayList&lt;&gt;());</span><br><span class="line">//  removeAll:删除多个元素</span><br><span class="line">list.removeAll(new ArrayList&lt;&gt;());</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.单例集合：只有单个元素</span><br><span class="line">Collection接口有两个重要的子接口 List Set,他们的实现子类都是单例集合</span><br></pre></td></tr></table></figure><p><img src="D:\Data\Typora\资料库\图纸\Collection.png"></p><hr><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2.双例集合：以键值对方式存储</span><br><span class="line">Map接口的实现子类 是双例集合，存放K-V</span><br></pre></td></tr></table></figure><p><img src="D:\Data\Typora\资料库\图纸\Map.png"></p><h3 id="迭代器Iterator"><a href="#迭代器Iterator" class="headerlink" title="迭代器Iterator"></a>迭代器Iterator</h3><p>collection继承于Iterator，所以collection的所有子类都有Iterator的iterator()方法,用以返回一个实现 了Iterator接口的对象，即返回一个迭代器，该对象仅用于&#x3D;&#x3D;<strong>迭代遍历集合</strong>&#x3D;&#x3D;，本身不存放对象。</p><p>增强for：底层依旧是迭代器</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for(Object s : list)&#123;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><p>底层是一个数组： protected Object[] elementData</p><p>无参构造器 0—-&gt;10—-&gt;每次扩展1.5倍</p><p>有参构造器1.5倍扩容</p><p>线程不安全，效率高</p><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><p>底层是一个数组： protected Object[] elementData</p><p>线程安全，效率不高</p><p>无参 默认是10 2倍扩容</p><p>有参 2倍扩容</p><h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>并发：一个CPU处理多个进程</p><p>并行：一个CPU处理一个进程</p><p>单线程：同一个时刻只允许执行一个线程</p><p>多线程：同一个时刻可以执行多个线程</p><h3 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h3><p>继承Thread创建线程</p><h3 id="Runnable"><a href="#Runnable" class="headerlink" title="Runnable"></a>Runnable</h3><p>实现Runnable接口添加run方法</p><p>多个子线程；通知线程退出，线程中断，线程插队，守护线程</p><h3 id="七种线程状态"><a href="#七种线程状态" class="headerlink" title="七种线程状态"></a>七种线程状态</h3><p><img src="D:\Data\Typora\资料库\图纸\线程状态生命周期.png"></p><h3 id="同步机制：synchronized"><a href="#同步机制：synchronized" class="headerlink" title="同步机制：synchronized"></a>同步机制：synchronized</h3><h3 id="线程死锁"><a href="#线程死锁" class="headerlink" title="线程死锁"></a>线程死锁</h3><p>互相占用了对方所需要的资源，导致线程死锁</p><h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><p>Serializable:串行化</p><p>Comparable:可以比较</p><p><img src="D:\Data\Typora\资料库\图纸\File.png" alt="File"></p><h4 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式一: new File(String pathname)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">create01</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;D:\\news1.txt&quot;</span>;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        file.createNewFile();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;文件创建成功&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式二: new File(File parent,String child) 根据父目录+文件名</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">create02</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">parentFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\tmp&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;news2.txt&quot;</span>;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(parentFile,fileName);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        file.createNewFile();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;文件创建成功&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式三: new File(String parent,String child) 根据父目录+子路径来构建</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">create03</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">parentPath</span> <span class="operator">=</span> <span class="string">&quot;D:\\&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;news3.txt&quot;</span>;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(parentPath,filePath);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        file.createNewFile();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;文件创建成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取文件信息"><a href="#获取文件信息" class="headerlink" title="获取文件信息"></a>获取文件信息</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取文件信息</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//先创建文件对象</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\tmp\\news1.txt&quot;</span>);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件常用方法</span></span><br><span class="line"><span class="comment">     * getName</span></span><br><span class="line"><span class="comment">     * getAbsolutePath</span></span><br><span class="line"><span class="comment">     * getParent</span></span><br><span class="line"><span class="comment">     * length</span></span><br><span class="line"><span class="comment">     * exists</span></span><br><span class="line"><span class="comment">     * isFile</span></span><br><span class="line"><span class="comment">     * isDirectory</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//调用相应的方法，得到对应信息</span></span><br><span class="line">    System.out.println(<span class="string">&quot;文件名字=&quot;</span>+file.getName());</span><br><span class="line">    System.out.println(<span class="string">&quot;文件绝对路径=&quot;</span>+file.getAbsolutePath());</span><br><span class="line">    System.out.println(<span class="string">&quot;文件父目录=&quot;</span>+file.getParent());</span><br><span class="line">    System.out.println(<span class="string">&quot;文件大小（字节）=&quot;</span>+file.length());<span class="comment">//11</span></span><br><span class="line">    System.out.println(<span class="string">&quot;文件是否存在=&quot;</span>+file.exists());<span class="comment">//true</span></span><br><span class="line">    System.out.println(<span class="string">&quot;是不是一个文件=&quot;</span>+file.isFile());<span class="comment">//true</span></span><br><span class="line">    System.out.println(<span class="string">&quot;是不是一个目录=&quot;</span>+file.isDirectory());<span class="comment">//false</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断 D:\\tmp\\news1.txt 文件是否存在</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;D:\\tmp\\news1.txt&quot;</span>;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line">    <span class="keyword">if</span> (file.exists())&#123;</span><br><span class="line">        <span class="comment">//删除</span></span><br><span class="line">        file.delete();</span><br><span class="line">        System.out.println(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//不存在则新建</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.createNewFile();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;新建成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断 D:\\tmp 目录是否存在 原理与文件相同</span></span><br></pre></td></tr></table></figure><h3 id="IO流原理及流的分类"><a href="#IO流原理及流的分类" class="headerlink" title="IO流原理及流的分类"></a>IO流原理及流的分类</h3><p>IO是Input&#x2F;Output的缩写，用于数据传输，读写文件，网络通讯等</p><h4 id="流的分类"><a href="#流的分类" class="headerlink" title="流的分类"></a>流的分类</h4><ol><li>按操作数据单位不同分：<ul><li>字节流（8 bit）：操作<strong>二进制文件</strong>保证无损操作</li><li>字符流（字符，因文件编码格式不同，长度不同）：操作<strong>文本文件</strong>效率一般较高</li></ul></li><li>按数据流的流向不同分：输入流，输出流</li><li>按流的角色不同分：节点流，处理流&#x2F;包装流</li></ol><table><thead><tr><th align="center">（抽象基类）</th><th align="center">字节流</th><th align="center">字符流</th></tr></thead><tbody><tr><td align="center">输入流</td><td align="center">InputStream</td><td align="center">Reader</td></tr><tr><td align="center">输出流</td><td align="center">OutputStream</td><td align="center">Writer</td></tr></tbody></table><p><strong>JAVA的IO流共涉及40多个类，实际上非常规则，都是从如上&#x3D;&#x3D;4个抽象基类&#x3D;&#x3D;派生的，由这四个类派生出来的子类名称都是以其父类名作为子类名后缀</strong></p><p><img src="D:\Data\Typora\资料库\图纸\IO流.jpg"></p><h4 id="InputStream"><a href="#InputStream" class="headerlink" title="InputStream"></a>InputStream</h4><p><img src="D:\Data\Typora\资料库\图纸\InputStream.png"></p><ol><li><p>FileInputStream:文件输入流</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 演示读取文件 --不能读取中文</span></span><br><span class="line"><span class="comment"> * 单个字节的读取，效率较低</span></span><br><span class="line"><span class="comment"> * ---&gt;改进使用 read(bete[] b) : read02()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">read01</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;D:\\hello.txt&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">readData</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//创建FileInputStream对象用于读取文件</span></span><br><span class="line">        fileInputStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath);</span><br><span class="line">        <span class="comment">//read():从文件中读取一个字节的数据，如果没有输入可用，此方法将阻止</span></span><br><span class="line">        <span class="comment">//当返回-1时，表示读取完毕</span></span><br><span class="line">        <span class="keyword">while</span> ((readData = fileInputStream.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print((<span class="type">char</span>) readData);<span class="comment">//返回的是int，要转为char</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//关闭文件流，释放资源，防止资源浪费和内存泄漏</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileInputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">read02</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;D:\\hello.txt&quot;</span>;</span><br><span class="line">    <span class="comment">//定义一个字节数组</span></span><br><span class="line">    <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">4</span>]; <span class="comment">// 一次读取八个字节</span></span><br><span class="line">    <span class="comment">//实际读取字节个数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">readLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//创建FileInputStream对象用于读取文件</span></span><br><span class="line">        fileInputStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath);</span><br><span class="line">        <span class="comment">//read():从文件中读取一个字节的数据，如果没有输入可用，此方法将阻止</span></span><br><span class="line">        <span class="comment">//当返回-1时，表示读取完毕</span></span><br><span class="line">        <span class="comment">//入关读取正常，返回实际读取个数</span></span><br><span class="line">        <span class="keyword">while</span> ((readLen = fileInputStream.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(buf, <span class="number">0</span>, readLen));<span class="comment">//返回的是int，要转为char</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//关闭文件流，释放资源，防止资源浪费和内存泄漏</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileInputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>BufferedInputStream:缓冲字节输入流</p></li><li><p>ObjectInputStream:对象字节输入流 (反序列化)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//反序列化后指定文件的内容</span></span><br><span class="line"><span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;D:\\data.dat&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath));</span><br><span class="line"><span class="comment">//读取</span></span><br><span class="line"><span class="comment">//1.读取（反序列化）的顺序要和保存数据（序列化）的顺序一致</span></span><br><span class="line">System.out.println(objectInputStream.readInt());</span><br><span class="line">System.out.println(objectInputStream.readBoolean());</span><br><span class="line">System.out.println(objectInputStream.readChar());</span><br><span class="line">System.out.println(objectInputStream.readDouble());</span><br><span class="line">System.out.println(objectInputStream.readUTF());</span><br><span class="line"><span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> (Dog) objectInputStream.readObject();</span><br><span class="line">System.out.println(<span class="string">&quot;运行类型=&quot;</span>+dog.getClass());</span><br><span class="line">System.out.println(dog);</span><br><span class="line"></span><br><span class="line">objectInputStream.close();</span><br></pre></td></tr></table></figure></li></ol><h4 id="Outputstream"><a href="#Outputstream" class="headerlink" title="Outputstream"></a>Outputstream</h4><ol><li><p>FileOutputStream</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 演示使用FileOutputStream 将数据写入到文件中</span></span><br><span class="line"><span class="comment"> * 如果该文件不存在，则创建该文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeFile</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//创建 FileOutputStream 对象</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;D:\\test.txt&quot;</span>;</span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//得到一个输出对象 FileOutputStream</span></span><br><span class="line">        <span class="comment">//1.new FileOutputStream(filePath)创建方式会覆盖文件原先内容</span></span><br><span class="line">        <span class="comment">//2.new FileOutputStream(filePath，true)创建方式，追加内容，不会覆盖原先内容</span></span><br><span class="line">        fileOutputStream = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(filePath,<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//写入一个字节</span></span><br><span class="line">        <span class="comment">//fileOutputStream.write(&#x27;h&#x27;);</span></span><br><span class="line">        <span class="comment">//写入字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span>   <span class="operator">=</span> <span class="string">&quot;\nhello world,王富贵！&quot;</span>;</span><br><span class="line">        fileOutputStream.write(str.getBytes(StandardCharsets.UTF_8));</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileOutputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>文件拷贝</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 完成文件拷贝，将 D:\\xdj.jpg 拷贝到 D:\\tmp\\</span></span><br><span class="line"><span class="comment"> * 思路分析</span></span><br><span class="line"><span class="comment"> * 1.创建文件的输入流，将文件读入到程序</span></span><br><span class="line"><span class="comment"> * 2.创建文件的输出流，将读取到的文件输出到指定位置</span></span><br><span class="line"><span class="comment"> * 注：利用循环，避免文件过大占用大量内存</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//文件当前位置</span></span><br><span class="line"><span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;D:\\xdj.jpg&quot;</span>;</span><br><span class="line"><span class="comment">//文件复制目录</span></span><br><span class="line"><span class="type">String</span> <span class="variable">destFilePath</span> <span class="operator">=</span> <span class="string">&quot;D:\\tmp\\xdj.jpg&quot;</span>;</span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    inputStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath);</span><br><span class="line">    outputStream = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(destFilePath);</span><br><span class="line"></span><br><span class="line">    <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">readLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((readLen = inputStream.read(buf))!= -<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//读取到后写入文件 边读边写</span></span><br><span class="line">        outputStream.write(buf,<span class="number">0</span>,readLen);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;拷贝成功&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (inputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">            inputStream.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (outputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">            outputStream.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ObjectOutputStream:(序列化)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//序列化后保存的文件格式不是纯文本，而是按照它的格式来保存</span></span><br><span class="line"><span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;D:\\data.dat&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(filePath));</span><br><span class="line"></span><br><span class="line"><span class="comment">//序列化数据到文件：&quot;D:\\data.dat&quot;</span></span><br><span class="line">objectOutputStream.write(<span class="number">100</span>); <span class="comment">//int--&gt;Integer (实现了 Serializable)</span></span><br><span class="line">objectOutputStream.writeBoolean(<span class="literal">true</span>); <span class="comment">//boolean --&gt; Boolean (实现了Serializable)</span></span><br><span class="line">objectOutputStream.writeChar(<span class="string">&#x27;x&#x27;</span>);<span class="comment">//char --&gt; Character (实现了 Serializable)</span></span><br><span class="line">objectOutputStream.writeDouble(<span class="number">2.5</span>);<span class="comment">//double --&gt; Double (实现了 Serializable)</span></span><br><span class="line">objectOutputStream.writeUTF(<span class="string">&quot;夏杜键万岁！&quot;</span>);<span class="comment">//String</span></span><br><span class="line"><span class="comment">//保存一个对象</span></span><br><span class="line">objectOutputStream.writeObject(<span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;二哈&quot;</span>,<span class="number">3</span>));</span><br><span class="line">objectOutputStream.close();</span><br></pre></td></tr></table></figure></li></ol><h4 id="Reader"><a href="#Reader" class="headerlink" title="Reader"></a>Reader</h4><ol><li><p>FileReader</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单个字符读取文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFile01</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;D:\\hello.txt&quot;</span>;</span><br><span class="line">    <span class="comment">//1.创建FileReader对象</span></span><br><span class="line">    <span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        fileReader = <span class="keyword">new</span> <span class="title class_">FileReader</span>(filePath);</span><br><span class="line">        <span class="comment">//循环读取</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="keyword">while</span> ((c=fileReader.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.print((<span class="type">char</span>) c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (fileReader != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fileReader.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多个字符读取文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFile02</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;D:\\hello.txt&quot;</span>;</span><br><span class="line">    <span class="comment">//1.创建FileReader对象</span></span><br><span class="line">    <span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">readLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span>[] buf = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        fileReader = <span class="keyword">new</span> <span class="title class_">FileReader</span>(filePath);</span><br><span class="line">        <span class="comment">//循环读取</span></span><br><span class="line">        <span class="keyword">while</span> ((readLen=fileReader.read(buf))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(buf,<span class="number">0</span>,readLen));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (fileReader != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fileReader.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>BufferedReader</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;D:\\test.txt&quot;</span>;</span><br><span class="line"><span class="comment">//创建bufferedReader</span></span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    bufferedReader = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(path));</span><br><span class="line">    <span class="comment">//bufferedReader.readLine() 按行读取</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> ((line = bufferedReader.readLine())!=<span class="literal">null</span>)&#123;</span><br><span class="line">        System.out.println(line);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//只需要关闭外层处理流</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        bufferedReader.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="Writer"><a href="#Writer" class="headerlink" title="Writer"></a>Writer</h4><ol><li><p>FileWriter</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;D:\\note.txt&quot;</span>;</span><br><span class="line"><span class="comment">//创建FileWriter对象</span></span><br><span class="line"><span class="type">FileWriter</span> <span class="variable">fileWriter</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">char</span>[] c = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    fileWriter  = <span class="keyword">new</span> <span class="title class_">FileWriter</span>(filePath,<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">//写入单个字符</span></span><br><span class="line">    fileWriter.write(<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">    <span class="comment">//写入指定字符数组</span></span><br><span class="line">    fileWriter.write(c);</span><br><span class="line">    <span class="comment">//写入指定字符数组的指定部分</span></span><br><span class="line">    fileWriter.write(<span class="string">&quot;我是谁&quot;</span>.toCharArray(),<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//写入整个字符串</span></span><br><span class="line">    fileWriter.write(<span class="string">&quot;你好，臭屁虫&quot;</span>);</span><br><span class="line">    <span class="comment">//指定字符串某一个部分写入</span></span><br><span class="line">    fileWriter.write(<span class="string">&quot;杀死小朋友&quot;</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//对应FileWriter,一定要关闭流，或者flush才能把数据真正写入文件</span></span><br><span class="line">    <span class="keyword">if</span>(fileWriter!=<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileWriter.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;写入完成&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>BufferedWriter</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;D:\\ok.txt&quot;</span>;</span><br><span class="line"><span class="comment">//创建BufferedWriter对象</span></span><br><span class="line"><span class="type">BufferedWriter</span> <span class="variable">bufferedWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(path));</span><br><span class="line">bufferedWriter.write(<span class="string">&quot;去死吧，IO流！&quot;</span>);</span><br><span class="line">bufferedWriter.close();</span><br></pre></td></tr></table></figure></li></ol><h3 id="节点流和处理流"><a href="#节点流和处理流" class="headerlink" title="节点流和处理流"></a>节点流和处理流</h3><ol><li>节点流是底层流&#x2F;低级流，直接跟数据源相接</li><li>处理流（包装流）包装节点流，既可以消除不同节点流的实现差异，也可以提供更方便的方法来完成输入输出。</li><li>处理流对节点流进行包装，使用了修饰器设计模式，不会直接与数据源相连【模拟修饰器设计模式】</li></ol><h4 id="处理流的功能特定"><a href="#处理流的功能特定" class="headerlink" title="处理流的功能特定"></a>处理流的功能特定</h4><ol><li>性能的提高：主要以增加缓冲的方式来提高输入输出的效率</li><li>操作更便捷：处理流可能提供了一系列便捷的方法来一次输入输出大批量的数据，使用更加灵活方便</li></ol><blockquote><h4 style="color:green">序列化：在保存数据时，保存数据的值和数据类型</h4><h4 style="color:green">反序列化：在恢复数据时，恢复数据的值和数据类型</h4><h4>让一个类能支持序列化，必须实现<span style="color:red">Serializable</span>或<span style="color:red">Externalizable</span>接口</h4></blockquote><h3 id="输入流-amp-输出流"><a href="#输入流-amp-输出流" class="headerlink" title="输入流&amp;输出流"></a>输入流&amp;输出流</h3><table><thead><tr><th></th><th>类型</th><th>默认设备</th><th>编译类型</th><th>运行类型</th></tr></thead><tbody><tr><td>System.in标准输入</td><td>InputStream</td><td>键盘</td><td>InputStream</td><td>BufferedInputStream</td></tr><tr><td>System.out标准输出</td><td>PrintStream</td><td>显示器</td><td>PrintStream</td><td>PrintStream</td></tr></tbody></table><h3 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h3><p>字节流与字符流的转换</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 演示InputStreamReader 转换流解决中文乱码问题</span></span><br><span class="line"><span class="comment"> * 将字节流 FileInputStream 转成字符流 InputStreamReader,指定编码 gbk/utf-8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InputStreamReader_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;D:\\test.txt&quot;</span>;</span><br><span class="line">        <span class="comment">//1.将字节流 FileInputStream 转成字符流 InputStreamReader</span></span><br><span class="line">        <span class="comment">//2.指定编码 gbk/utf-8</span></span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">inputStreamReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath), <span class="string">&quot;gbk&quot;</span>);</span><br><span class="line">        <span class="comment">//3.把InputStreamReader 传入BufferedReader</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(inputStreamReader);</span><br><span class="line">        <span class="comment">//合并 2、3</span></span><br><span class="line">        <span class="comment">//BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(new FileInputStream(filePath),&quot;gbk&quot;));</span></span><br><span class="line">        <span class="comment">//4.读取</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span> ((s=bufferedReader.readLine())!=<span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 演示OutputStreamWriter的使用</span></span><br><span class="line"><span class="comment"> * 把一个FileOutputStream 字节流，转为字符流 OutputStreamWriter</span></span><br><span class="line"><span class="comment"> * 指定处理的编码方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OutputStreamWriter_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;D:\\test.txt&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">charset</span> <span class="operator">=</span> <span class="string">&quot;gbk&quot;</span>;</span><br><span class="line">        <span class="type">OutputStreamWriter</span> <span class="variable">outputStreamWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(path,<span class="literal">true</span>), charset);</span><br><span class="line">        outputStreamWriter.write(<span class="string">&quot;hello 二狗子&quot;</span>);</span><br><span class="line">        outputStreamWriter.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;按&quot;</span>+charset+<span class="string">&quot;格式保存文件成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h3><p>打印流只有输出流，没有输入流</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 演示PrintStream(字节打印流)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrintStream_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">PrintStream</span> <span class="variable">out</span> <span class="operator">=</span> System.out;</span><br><span class="line">        <span class="comment">//在默认情况下，PrintStream 输出数据的位置是 标准输出，即显示器</span></span><br><span class="line">        out.println(<span class="string">&quot;夏杜键大呆&quot;</span>);</span><br><span class="line">        <span class="comment">//print底层使用的是write,所以也可用直接使用write进行打印</span></span><br><span class="line">        out.write(<span class="string">&quot;夏天天可以&quot;</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//我们可以修改打印流输出的位置/设备</span></span><br><span class="line">        <span class="comment">//输出位置修改</span></span><br><span class="line">        System.setOut(<span class="keyword">new</span> <span class="title class_">PrintStream</span>(<span class="string">&quot;D:\\note.txt&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;我们好久好久没见了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 演示 PrintWriter 使用方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrintWriter_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//PrintWriter printWriter = new PrintWriter(System.out);</span></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">printWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;D:\\note.txt&quot;</span>,<span class="literal">true</span>));</span><br><span class="line">        printWriter.println(<span class="string">&quot;hi,夏兮&quot;</span>);</span><br><span class="line">        printWriter.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Properties类"><a href="#Properties类" class="headerlink" title="Properties类"></a>Properties类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不使用Properties类实现文件内容的读取</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//读取mysql.properties文件，并得到ip,username,password</span></span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;src\\com\\xve\\io\\properties\\mysql.properties&quot;</span>));</span><br><span class="line">    <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> ((line=bufferedReader.readLine())!=<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">//将一行内容以”=“分割</span></span><br><span class="line">        String[] split = line.split(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">        <span class="comment">//如果我们要求指定的ip值</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;ip&quot;</span>.equals(split[<span class="number">0</span>])) &#123;</span><br><span class="line">            System.out.println(split[<span class="number">0</span>] + <span class="string">&quot;值为:&quot;</span> + split[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    bufferedReader.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;src\\com\\xve\\io\\properties\\mysql.properties&quot;</span>;</span><br><span class="line">    <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">    <span class="comment">//properties.load(new InputStreamReader(new FileInputStream(filePath)));</span></span><br><span class="line">    properties.load(<span class="keyword">new</span> <span class="title class_">FileReader</span>(filePath));</span><br><span class="line">    <span class="comment">//把 K-V显示控制台</span></span><br><span class="line">    properties.list(System.out);</span><br><span class="line">    System.out.println(properties.get(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">    System.out.println(properties.getProperty(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">    System.out.println(properties.getProperty(<span class="string">&quot;ip&quot;</span>,<span class="string">&quot;null&quot;</span>));</span><br><span class="line">    properties.setProperty(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;夏杜键&quot;</span>);</span><br><span class="line">    <span class="comment">//comments是注释</span></span><br><span class="line">    properties.store(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(filePath)),<span class="literal">null</span>);</span><br><span class="line">    </span><br><span class="line">    System.out.println(properties.getProperty(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="高阶部分"><a href="#高阶部分" class="headerlink" title="高阶部分"></a>高阶部分</h1><h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><h3 id="网络基础"><a href="#网络基础" class="headerlink" title="网络基础"></a>网络基础</h3><ol><li><p><strong>网络通信</strong>：通过网络两台设备之间完成数据传输；&#x3D;&#x3D;java.net&#x3D;&#x3D;提供了一系列的类和接口，供程序员使用实现网络通信</p></li><li><p><strong>网络</strong>：两台或多台设备通过一定的物理设备连接起来构成网络</p><ul><li>局域网：覆盖一间房</li><li>城域网：覆盖一个城市</li><li>广域网：覆盖全国甚至全世界–&gt;万维网</li></ul></li><li><p><strong>IP地址</strong>：用以唯一标识网络中唯一的一台主机</p><ul><li>查看ip地址：ipconfig    形式 xx.xx.xx.xx   每一个十进制数范围在0~255</li><li>因为IPv4网络资源受限，所以引入了IPv6替代，当下还未完全替代</li></ul></li><li><p><strong>域名</strong>：方便好记，解决了IP难记的问题</p></li><li><p><strong>端口</strong>：IP+端口访问服务</p></li><li><p><strong>网络协议</strong>：TCP&#x2F;IP协议</p><table><thead><tr><th>OSI模型（理论模型 ）</th><th>TCP&#x2F;IP模型</th><th>TCP&#x2F;IP模型各层对应协议</th></tr></thead><tbody><tr><td>应用层</td><td>应用层</td><td>HTTP&#x2F;ftp&#x2F;telnet&#x2F;DNS</td></tr><tr><td>表示层</td><td>应用层</td><td></td></tr><tr><td>会话层</td><td>应用层</td><td></td></tr><tr><td>传输层</td><td>传输层</td><td>TCP&#x2F;UDP</td></tr><tr><td>网络层</td><td>网络层</td><td>IP&#x2F;ICMP&#x2F;ARP</td></tr><tr><td>数据链路层</td><td>物理+数据链路层</td><td>Link</td></tr><tr><td>物理层</td><td>物理+数据链路层</td><td></td></tr></tbody></table></li></ol><h3 id="InetAddress-类"><a href="#InetAddress-类" class="headerlink" title="InetAddress  类"></a>InetAddress  类</h3><ol><li>获取本机的信息【主机名&#x2F;IP】</li><li>通过域名获取远程服务器的IP</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 演示INetAddress 类的使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">API_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException &#123;</span><br><span class="line">        <span class="comment">//1.获取本机的InetAddress 对象</span></span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">localHost</span> <span class="operator">=</span> InetAddress.getLocalHost();</span><br><span class="line">        System.out.println(localHost);<span class="comment">// LAPTOP-8394T77E/192.168.0.106   ---&gt;  计算机名+IP地址</span></span><br><span class="line">        <span class="comment">//2.根据指定主机名，获取 InetAddress 对象</span></span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">host</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;LAPTOP-8394T77E&quot;</span>);</span><br><span class="line">        System.out.println(host);</span><br><span class="line">        <span class="comment">//3.根据域名，返回一个 InetAddress 对象</span></span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">baidu</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;www.baidu.com&quot;</span>);</span><br><span class="line">        System.out.println(baidu);</span><br><span class="line">        <span class="comment">//4. 通过InetAddress 对象获取对应地址</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">baiduIp</span> <span class="operator">=</span> baidu.getHostAddress();</span><br><span class="line">        System.out.println(baiduIp);</span><br><span class="line">        <span class="comment">//5.通过 InetAddress 对象，获取对应的主机名、或者是域名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">baiduName</span> <span class="operator">=</span> baidu.getHostName();</span><br><span class="line">        System.out.println(baiduName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//www.bilibili.com</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">biliIp</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;www.bilibili.com&quot;</span>).getHostAddress();</span><br><span class="line">        System.out.println(biliIp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h3><h4 id="TCP编程（可靠的）"><a href="#TCP编程（可靠的）" class="headerlink" title="TCP编程（可靠的）"></a>TCP编程（可靠的）</h4><h5 id="字节读写"><a href="#字节读写" class="headerlink" title="字节读写"></a>字节读写</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TCP 服务端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SocketTCP02Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//1.在本机的9999端口监听，等待连接 要求在本机没有其他服务占用9999端口</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9999</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器在9999端口等待连接...&quot;</span>);</span><br><span class="line">        <span class="comment">//2.当没有客户端连接9999端口时，程序会阻塞，等待连接</span></span><br><span class="line">        <span class="comment">//  如果有客户端连接，则会返回Socket对象，程序继续</span></span><br><span class="line">        <span class="comment">//  这个ServerSocket 可以通过 accept() 返回多个Socket[多并发]</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">accept</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端socket=&quot;</span> + accept.getClass());</span><br><span class="line">        <span class="comment">//3.通过socket.getInputStream()读取客户端写入到数据通道的数据</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> accept.getInputStream();</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((l = inputStream.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="number">0</span>, l));</span><br><span class="line">        &#125;</span><br><span class="line">        accept.shutdownInput();</span><br><span class="line">        <span class="comment">//4.通过socket.getOutputStream()写入到数据通道的数据</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> accept.getOutputStream();</span><br><span class="line">        outputStream.write(<span class="string">&quot;Hello Client&quot;</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        accept.shutdownOutput();</span><br><span class="line">        <span class="comment">//5.关闭流对象和socket</span></span><br><span class="line">        outputStream.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">        accept.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SocketTCP02Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//1.连接服务端（ip,端口）</span></span><br><span class="line">        <span class="comment">//  连接本机的9999端口  如果连接成功返回socket对象</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(InetAddress.getLocalHost(), <span class="number">9999</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端socket=&quot;</span>+socket.getClass());</span><br><span class="line">        <span class="comment">//2.连接上后，生成Socket，通过socket.getOutputStream()</span></span><br><span class="line">        <span class="comment">//  得到和socket关联的输出流对象</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        <span class="comment">//3.通过输出流，写入数据到 数据通道</span></span><br><span class="line">        outputStream.write(<span class="string">&quot;Hello Server&quot;</span>.getBytes());</span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line">        <span class="comment">//4.通过输入流，读取数据 输出</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((l=inputStream.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(bytes,<span class="number">0</span>,l));</span><br><span class="line">        &#125;</span><br><span class="line">        socket.shutdownInput();</span><br><span class="line">        <span class="comment">//5.关闭流对象和socket</span></span><br><span class="line">        inputStream.close();</span><br><span class="line">        outputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端退出&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>同时也可以用&#x3D;&#x3D;字符流&#x3D;&#x3D;进行读写，需要注意的时，进行结束标记时可以使用 writer.newline()和readLine()搭配</p><h5 id="文件拷贝案例"><a href="#文件拷贝案例" class="headerlink" title="文件拷贝案例"></a>文件拷贝案例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TCPFileCopyServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9999</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器启动&quot;</span>);</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">accept</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">        <span class="comment">//1.前期准备 复制文件目的路径 各种流</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;src\\1.jpg&quot;</span>;</span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bufferedInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(accept.getInputStream());</span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bufferedOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(filePath));</span><br><span class="line">        <span class="comment">//2.读取socket传输过来的文件并输出</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((i=bufferedInputStream.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            bufferedOutputStream.write(bytes,<span class="number">0</span>,i);</span><br><span class="line">        &#125;</span><br><span class="line">        accept.shutdownInput();</span><br><span class="line">        bufferedOutputStream.close();</span><br><span class="line">        <span class="comment">//3.回复收到图片</span></span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bufferedWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(accept.getOutputStream()));</span><br><span class="line">        bufferedWriter.write(<span class="string">&quot;收到图片&quot;</span>);</span><br><span class="line">        bufferedWriter.flush();</span><br><span class="line">        accept.shutdownOutput();</span><br><span class="line">        <span class="comment">//4.关闭流和socket</span></span><br><span class="line">        bufferedWriter.close();</span><br><span class="line">        bufferedInputStream.close();</span><br><span class="line">        accept.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器关闭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TCPFileCopyClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//连接服务器 localhost:9999</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(InetAddress.getLocalHost(),<span class="number">9999</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端启动&quot;</span>);</span><br><span class="line">        <span class="comment">//1.准备文件来源、以及所需要的流 字节流</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;D:\\1.jpg&quot;</span>;</span><br><span class="line">        <span class="comment">//FileInputStream inputStream = new FileInputStream(filePath);</span></span><br><span class="line">        <span class="comment">//OutputStream outputStream = socket.getOutputStream();</span></span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bufferedInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath));</span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bufferedOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(socket.getOutputStream());</span><br><span class="line">        <span class="comment">//2.传输文件</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((i=bufferedInputStream.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            bufferedOutputStream.write(bytes,<span class="number">0</span>,i);</span><br><span class="line">        &#125;</span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line">        <span class="comment">//3.接收回复</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream()));</span><br><span class="line">        System.out.println(bufferedReader.readLine());</span><br><span class="line">        <span class="comment">//socket.shutdownInput();</span></span><br><span class="line">        <span class="comment">//4.传输结束关闭流与socket</span></span><br><span class="line">        bufferedReader.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端关闭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="netstat指令"><a href="#netstat指令" class="headerlink" title="netstat指令"></a>netstat指令</h5><ol><li>netstat -an 可以查看当前主机网络情况，包括端口监听情况和网络连接情况</li><li>netstat -am|more 可以分页显示</li><li>要求在dos控制台执行</li><li>netstat -anb 可以查看端口监听的同时查看到是谁在监听使用（管理员模式下）</li></ol><h4 id="UDP编程（不可靠的）"><a href="#UDP编程（不可靠的）" class="headerlink" title="UDP编程（不可靠的）"></a>UDP编程（不可靠的）</h4><ol><li>没有明确的服务端和客户端，演变成数据的发送端和接收端</li><li>接收数据和发送数据是通过&#x3D;&#x3D;DatagramSocket&#x3D;&#x3D;对象完成</li><li>将数据封装到&#x3D;&#x3D;DatagramPacket&#x3D;&#x3D; 对象、封包</li><li>当接收到 DatagramPacket对象，需要进行拆包，取出对象</li><li>DatagramSocket可以指定在哪个端口接收数据</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UDPReceiverA</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//1.创建一个DatagramSocket 对象，准备在9999接收数据</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">datagramSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">9999</span>);</span><br><span class="line">        <span class="comment">//2.构建一个DatagramPacket,用以接收数据  在前面讲解时UDP数据包最大是64kb</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">datagramPacket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bytes,bytes.length);</span><br><span class="line">        <span class="comment">//3.准备接收数据，调用接收方法 ,将网络传输的DatagramPacket对象填充到datagramPacket对象中</span></span><br><span class="line">        <span class="comment">// 当有数据包发送到本地端口，会接收数据，当没有数据发送到本地，就会阻塞在这里</span></span><br><span class="line">        datagramSocket.receive(datagramPacket);</span><br><span class="line">        <span class="comment">//4.对datagramPacket进行拆包，取出数据</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> datagramPacket.getLength();<span class="comment">//实际接收到的数据字节长度</span></span><br><span class="line">        <span class="type">byte</span>[] data = datagramPacket.getData();<span class="comment">//接收到的数据</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(data,<span class="number">0</span>,l));</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] b = <span class="string">&quot;好的，明天见&quot;</span>.getBytes(StandardCharsets.UTF_8);</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">datagramPacket1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(b,b.length, InetAddress.getByName(<span class="string">&quot;192.168.0.106&quot;</span>),<span class="number">9998</span>);</span><br><span class="line">        <span class="comment">//3.将datagramPacket通过网络传输到指定端口</span></span><br><span class="line">        datagramSocket.send(datagramPacket1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.关闭资源</span></span><br><span class="line">        datagramSocket.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;A端退出&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UDPSenderB</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//1.创建DatagramSocket 对象</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">datagramSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">9998</span>);</span><br><span class="line">        <span class="comment">//2.将需要发送的数据封装到datagramPacket对象中</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="string">&quot;hello 明天吃火锅去&quot;</span>.getBytes(StandardCharsets.UTF_8);</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">datagramPacket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bytes,bytes.length, InetAddress.getByName(<span class="string">&quot;192.168.0.106&quot;</span>),<span class="number">9999</span>);</span><br><span class="line">        <span class="comment">//3.将datagramPacket通过网络传输到指定端口</span></span><br><span class="line">        datagramSocket.send(datagramPacket);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当有数据包发送到本地端口，会接收数据，当没有数据发送到本地，就会阻塞在这里</span></span><br><span class="line">        datagramSocket.receive(datagramPacket);</span><br><span class="line">        <span class="comment">//4.对datagramPacket进行拆包，取出数据</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> datagramPacket.getLength();<span class="comment">//实际接收到的数据字节长度</span></span><br><span class="line">        <span class="type">byte</span>[] data = datagramPacket.getData();<span class="comment">//接收到的数据</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(data,<span class="number">0</span>,l));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.关闭资源</span></span><br><span class="line">        datagramSocket.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;B端退出&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>在不修改源码情况下，来控制程序，符合设计模式的OCP原则（开闭原则：不修改源码，扩容功能）；依靠反射创建出诸多框架</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//正常调用对象</span></span><br><span class="line"><span class="comment">//        Cat cat = new Cat();</span></span><br><span class="line"><span class="comment">//        cat.hi();</span></span><br><span class="line">        <span class="comment">//使用配置文件读取</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.load(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;src\\com\\xve\\reflect\\question\\re.properties&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">classfullpath</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;classfullpath&quot;</span>);</span><br><span class="line">        System.out.println(classfullpath);</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;method&quot;</span>);</span><br><span class="line">        System.out.println(methodName);</span><br><span class="line">        <span class="comment">//利用反射机制解决</span></span><br><span class="line">        <span class="comment">//1.加载类 返回一个Class类型的对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(classfullpath);</span><br><span class="line">        <span class="comment">//2.通过 cls得到加载的类对象实例</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> cls.newInstance();</span><br><span class="line">        System.out.println(o.getClass());</span><br><span class="line">        <span class="comment">//3.通过cls得到加载的类 的对象</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(methodName);</span><br><span class="line">        <span class="comment">//4.调用 调用方法对象来实现调用方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;===========&quot;</span>);</span><br><span class="line">        method.invoke(o);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h3><p>​&#x3D;&#x3D;反射机制&#x3D;&#x3D;允许程序在执行期借助于ReflectionAPI取得任何类的内部信息（比如成员变量，构造器，成员方法等等）并能操作对象的属性及方法，反射在设计模式和框架底层都会用用到</p><p><img src="D:\Data\Typora\资料库\图纸\JAVA反射机制.jpg"></p><ol><li>在运行时判断任意一个对象所属的类</li><li>在运行时构造任意一个类的对象</li><li>在运行时得到任意一个类所具有的成员变量和方法</li><li>在运行时调用任意一个对象的成员变量和方法</li><li>生成动态代理</li></ol><h3 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h3><p>​加载完类之后，在堆中就产生了一个class类型的对象（一个类只有一个Class对象），这个对象包含了类的完整结构信息，通过这个对象得到类的结构，这个对象就像一面镜子，透过这个镜子看到类的结构，所以，形象的称之为反射</p><h3 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h3><p>&#x3D;&#x3D;类加载的五个阶段&#x3D;&#x3D;</p><p><img src="D:\Data\Typora\资料库\图纸\类加载五个阶段.jpg"></p><ol><li><strong>加载阶段</strong>：将字节码从不同的数据源（可能是class文件、也可能是jar包、甚至网络）转化为二进制字节流加载到内存中，并生成一个代表该类的java.lang.class对象</li><li><strong>连接阶段</strong>：<ul><li>验证：确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全（文件格式验证，元数据验证，字节码验证，符号引用验证）&#x3D;&#x3D;可以使用-Xverify:none关闭大部分的类验证措施&#x3D;&#x3D;</li><li>准备：JVM会在该阶段对静态变量，分配内存并默认初始化.</li><li>解析：虚拟机将常量池内的符号引用替换为直接引用的过程.</li></ul></li><li><strong>初始化阶段</strong>：初始化阶段。才真正开始执行类中定义的Java程序代码，此阶段是执行<clinit>()方法的过程，该方法是由编译器按语句在源文件中出现的顺序，依次自动收集类中的所有&#x3D;&#x3D;静态变量&#x3D;&#x3D;的赋值动作和&#x3D;&#x3D;静态代码块&#x3D;&#x3D;中的语句，并进行合并。虚拟机会保证一个类的<clinit>()方法在多线程环境中正确的加锁，同步，多个线程同时调用，那么只有一个方法会去执行，其他线程阻塞等待</li></ol><h3 id="反射获取类的结构信息"><a href="#反射获取类的结构信息" class="headerlink" title="反射获取类的结构信息"></a>反射获取类的结构信息</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xve.reflect.classload_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xve.reflect.question.Cat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第一种方法API</span></span><br><span class="line">    <span class="meta">@org</span>.junit.jupiter.api.Test</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">api_01</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        Class&lt;?&gt; pClass = Class.forName(<span class="string">&quot;com.xve.reflect.classload_.P&quot;</span>);</span><br><span class="line">        <span class="comment">//获取全类名</span></span><br><span class="line">        System.out.println(pClass.getName());</span><br><span class="line">        <span class="comment">//获取简单类名</span></span><br><span class="line">        System.out.println(pClass.getSimpleName());</span><br><span class="line">        <span class="comment">//获取所有public修饰的属性，包含本类以及父类的</span></span><br><span class="line">        Field[] fields = pClass.getFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field: fields) &#123;</span><br><span class="line">            System.out.print(field.getName()+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//获取本类中所有属性</span></span><br><span class="line">        Field[] declaredFields = pClass.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field declaredField : declaredFields) &#123;</span><br><span class="line">            System.out.print(declaredField.getName() +<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//获取所有public修饰的方法，包含本类以及父类的</span></span><br><span class="line">        Method[] methods = pClass.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.print(method.getName() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//获取本类中所有方法</span></span><br><span class="line">        Method[] declaredMethods = pClass.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method declaredMethod : declaredMethods) &#123;</span><br><span class="line">            System.out.print(declaredMethod.getName()+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//获取所有public修饰的构造器，包含本类</span></span><br><span class="line">        Constructor&lt;?&gt;[] constructors = pClass.getConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;?&gt; constructor : constructors) &#123;</span><br><span class="line">            System.out.print(constructor.getName() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//获取本类所有构造器</span></span><br><span class="line">        Constructor&lt;?&gt;[] declaredConstructors = pClass.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;?&gt; declaredConstructor : declaredConstructors) &#123;</span><br><span class="line">            System.out.print(declaredConstructor.getName()+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//以Package形式返回 包信息</span></span><br><span class="line">        System.out.println(pClass.getPackage());</span><br><span class="line">        <span class="comment">//以Class形式返回父类信息</span></span><br><span class="line">        System.out.println(pClass.getSuperclass());</span><br><span class="line">        <span class="comment">//以Class[]形式返回接口信息</span></span><br><span class="line">        Class&lt;?&gt;[] interfaces = pClass.getInterfaces();</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; anInterface : interfaces) &#123;</span><br><span class="line">            System.out.print(anInterface.getName()+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//以Annotation[]形式返回注解信息</span></span><br><span class="line">        Annotation[] annotations = pClass.getAnnotations();</span><br><span class="line">        <span class="keyword">for</span> (Annotation annotation : annotations) &#123;</span><br><span class="line">            System.out.print(annotation);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第二种方法</span></span><br><span class="line">    <span class="meta">@org</span>.junit.jupiter.api.Test</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">api_02</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        Class&lt;?&gt; pClass = Class.forName(<span class="string">&quot;com.xve.reflect.classload_.P&quot;</span>);</span><br><span class="line">        <span class="comment">//getModifiers:以int形式返回修饰符</span></span><br><span class="line">        <span class="comment">//【说明】默认修饰符:0   public:1    private:2   protected:4     static:8    final:16    [public+static = 9]</span></span><br><span class="line">        Field[] declaredFields = pClass.getDeclaredFields();</span><br><span class="line">        <span class="comment">//getType:以Class形式返回类型</span></span><br><span class="line">        <span class="comment">//getName:返回属性名</span></span><br><span class="line">        <span class="keyword">for</span> (Field declaredField : declaredFields) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类种所有属性=&quot;</span>+declaredField.getName()</span><br><span class="line">            +<span class="string">&quot;该属性的修饰符值=&quot;</span>+declaredField.getModifiers()</span><br><span class="line">            +<span class="string">&quot;该属性的类型=&quot;</span>+declaredField.getType());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//属性如此方法也如此，方法比属性多一个返回值方法,参数方法 </span></span><br><span class="line">        <span class="comment">//Class getReturnType(); </span></span><br><span class="line">        <span class="comment">//Class[] getParamenterTypes():</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String hobby;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">P</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> age;</span><br><span class="line">    String job;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> sal;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">m3</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">m4</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反射相关类"><a href="#反射相关类" class="headerlink" title="反射相关类"></a>反射相关类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.lang.class;<span class="comment">//代表一个类</span></span><br><span class="line">java.lang.reflect.Field;<span class="comment">//代表成员属性</span></span><br><span class="line">java.lang.reflect.Method;<span class="comment">//代表类的方法</span></span><br><span class="line">java.lang.reflect.Constructor;<span class="comment">//代表类的构造方法</span></span><br><span class="line"></span><br><span class="line"><span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.load(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;src\\com\\xve\\reflect\\question\\re.properties&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">classfullpath</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;classfullpath&quot;</span>);</span><br><span class="line">        <span class="comment">//反射相关的四个主要的类</span></span><br><span class="line">        <span class="comment">//1.Class</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(classfullpath);</span><br><span class="line">        <span class="comment">//2.属性 公共属性直接可以获取，私有属性需添加get方法</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> cls.getField(<span class="string">&quot;name&quot;</span>);<span class="comment">//成员变量名</span></span><br><span class="line">        <span class="comment">//3.方法 </span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(<span class="string">&quot;hi&quot;</span>);<span class="comment">//方法名</span></span><br><span class="line">        <span class="comment">//4.构造方法 分为有参无参</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor1</span> <span class="operator">=</span> cls.getConstructor();</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor2</span> <span class="operator">=</span> cls.getConstructor(String.class);</span><br></pre></td></tr></table></figure><h3 id="反射调用性能优化"><a href="#反射调用性能优化" class="headerlink" title="反射调用性能优化"></a>反射调用性能优化</h3><p>反射优点：动态创建和使用对象（也是框架底层核心），使用灵活，没有反射机制，框架技术就失去底层支持</p><p>反射缺点：使用反射基本是解释执行，对执行速度有影响</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    m01();<span class="comment">//-&gt;0</span></span><br><span class="line">    m02();<span class="comment">//-&gt;15</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//传统方法调用hi</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m01</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;<span class="number">500</span>;i++)&#123;</span><br><span class="line">        cat.hi();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;传统方法结果运行时间:&quot;</span>+(end-start));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//反射机制调用方法hi</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m02</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">aClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.xve.reflect.question.Cat&quot;</span>);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> aClass.newInstance();</span><br><span class="line">    <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> aClass.getMethod(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;<span class="number">500</span>;i++)&#123;</span><br><span class="line">        method.invoke(o);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;反射方法结果运行时间:&quot;</span>+(end-start));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="关闭访问检查提高性能"><a href="#关闭访问检查提高性能" class="headerlink" title="关闭访问检查提高性能"></a>关闭访问检查提高性能</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.setAccessible(<span class="literal">true</span>);<span class="comment">//true 关闭访问检查 适用于成员变量，方法，构造方法</span></span><br></pre></td></tr></table></figure><h3 id="Class类常用方法"><a href="#Class类常用方法" class="headerlink" title="Class类常用方法"></a>Class类常用方法</h3><p><img src="D:\Data\Typora\资料库\图纸\Class.png"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">classAllPath</span> <span class="operator">=</span> <span class="string">&quot;com.xve.reflect.clas.Car&quot;</span>;</span><br><span class="line">    <span class="comment">//1.获取到Car类 对应的Class对象  &lt;?&gt;表示不确定的Java类型</span></span><br><span class="line">    Class&lt;?&gt; aClass = Class.forName(classAllPath);</span><br><span class="line">    <span class="comment">//2.输出aClass</span></span><br><span class="line">    System.out.println(aClass);<span class="comment">//显示aClass对象，是哪一个类的对象 class com.xve.reflect.clas.Car</span></span><br><span class="line">    System.out.println(aClass.getClass());<span class="comment">//显示cls运行类型 class java.lang.Class</span></span><br><span class="line">    <span class="comment">//3.得到包名</span></span><br><span class="line">    System.out.println(aClass.getPackage());<span class="comment">//显示对象所在包 package com.xve.reflect.clas</span></span><br><span class="line">    <span class="comment">//4.类名</span></span><br><span class="line">    System.out.println(aClass.getName());<span class="comment">//得到全限定类名 com.xve.reflect.clas.Car</span></span><br><span class="line">    <span class="comment">//5.通过aClass创建对象实例</span></span><br><span class="line">    <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> (Car) aClass.newInstance();</span><br><span class="line">    System.out.println(car);<span class="comment">//输出对象的toString方法 Car&#123;brand=&#x27;路虎&#x27;, price=1000, color=&#x27;灰色&#x27;&#125;</span></span><br><span class="line">    <span class="comment">//6.通过反射获取属性</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> aClass.getField(<span class="string">&quot;brand&quot;</span>);</span><br><span class="line">    System.out.println(field.get(car));<span class="comment">//输出 路虎</span></span><br><span class="line">    <span class="comment">//7.通过反射给属性赋值</span></span><br><span class="line">    field.set(car,<span class="string">&quot;宝马&quot;</span>);</span><br><span class="line">    System.out.println(field.get(car));<span class="comment">//输出 宝马</span></span><br><span class="line">    <span class="comment">//8.遍历得到所有属性</span></span><br><span class="line">    Field[] fields = aClass.getFields();</span><br><span class="line">    <span class="keyword">for</span> (Field f : fields)&#123;</span><br><span class="line">        System.out.print(f.get(car)+<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取Class对象的六种方式"><a href="#获取Class对象的六种方式" class="headerlink" title="获取Class对象的六种方式"></a>获取Class对象的六种方式</h4><ol><li>代码阶段&#x2F;编译阶段 Class.forName()</li><li>类加载器</li><li>Class类阶段（加载阶段） 类.class</li><li>Runtime运行阶段 对象.getClass()</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. Class.forName</span></span><br><span class="line"><span class="type">String</span> <span class="variable">classPath</span> <span class="operator">=</span> <span class="string">&quot;com.xve.reflect.clas.Car&quot;</span>;<span class="comment">//通过读取配置文件获取</span></span><br><span class="line">Class&lt;?&gt; cls1 = Class.forName(classPath);</span><br><span class="line">System.out.println(cls1);</span><br><span class="line"><span class="comment">//2. 通过类名.class 多用于参数的传递</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">cls2</span> <span class="operator">=</span> Car.class;</span><br><span class="line">System.out.println(cls2);</span><br><span class="line"><span class="comment">//3. 已知对象实例，通过对象实例.getClass()</span></span><br><span class="line"><span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line"><span class="type">Class</span> <span class="variable">cls3</span> <span class="operator">=</span> car.getClass();</span><br><span class="line">System.out.println(cls3);</span><br><span class="line"><span class="comment">//4.通过类加载器【4种】来获取到类的Class对象</span></span><br><span class="line"><span class="comment">//(1)先得到类加载器 car</span></span><br><span class="line"><span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> car.getClass().getClassLoader();</span><br><span class="line"><span class="comment">//(2)通过类加载器得到Class对象</span></span><br><span class="line">Class&lt;?&gt; cls4 = classLoader.loadClass(classPath);</span><br><span class="line">System.out.println(cls4);</span><br><span class="line"></span><br><span class="line"><span class="comment">//以上四种是同一个Class hashCode地址一样</span></span><br><span class="line">System.out.println(cls1.hashCode());</span><br><span class="line">System.out.println(cls2.hashCode());</span><br><span class="line">System.out.println(cls3.hashCode());</span><br><span class="line">System.out.println(cls4.hashCode());</span><br><span class="line"></span><br><span class="line"><span class="comment">//5. 基本数据(int,boolean,float,double,byte,long,short)按如下方式得到Class类对象</span></span><br><span class="line">Class&lt;Integer&gt; integerClass = <span class="type">int</span>.class;</span><br><span class="line">System.out.println(integerClass);</span><br><span class="line"><span class="comment">//6.基本数据包装类型，可以通过.type得到Class对象</span></span><br><span class="line">Class&lt;Integer&gt; type = Integer.TYPE;</span><br><span class="line">System.out.println(type);</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以根据以下hashCode值推测出，Integer和int底层是一致的</span></span><br><span class="line">System.out.println(integerClass.hashCode());</span><br><span class="line">System.out.println(type.hashCode());</span><br></pre></td></tr></table></figure><h4 id="拥有Class对象的类型"><a href="#拥有Class对象的类型" class="headerlink" title="拥有Class对象的类型"></a>拥有Class对象的类型</h4><ol><li>外部类，成员内部类，静态内部类，局部内部类，匿名内部类</li><li>interface：接口</li><li>数组</li><li>enum：枚举</li><li>annotation：注解</li><li>基本数据类型</li><li>void</li></ol><h3 id="反射爆破"><a href="#反射爆破" class="headerlink" title="反射爆破"></a>反射爆破</h3><ol><li>调用类中的无参构造器</li><li>调用类中的指定构造器</li><li>Class类相关方法：<ul><li>newInstance：调用类中的无参构造器，获取对应类的对象</li><li>getConstructor(Class…clazz)：根据参数列表，调用对应的public构造器</li><li>getDecalaredConstructor(Class…clazz)：根据参数列表，获取对应的所有构造器对象</li></ul></li><li>Constructor类相关方法<ul><li>setAccessible：暴破</li><li>newInstance(Object…obj)：调用构造器</li></ul></li></ol><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><p>略</p><h2 id="JDBC和连接池"><a href="#JDBC和连接池" class="headerlink" title="JDBC和连接池"></a>JDBC和连接池</h2><h3 id="JDBC概述"><a href="#JDBC概述" class="headerlink" title="JDBC概述"></a>JDBC概述</h3><p>JDBC是为了访问不同的数据库，提供了一个统一接口</p><p><img src="D:\Data\Typora\资料库\图纸\JDBC原理.jpg"></p><h3 id="JDBC快速入门"><a href="#JDBC快速入门" class="headerlink" title="JDBC快速入门"></a>JDBC快速入门</h3><ol><li>注册驱动-加载Driver类</li><li>获取连接-得到Connection</li><li>执行增删改查-发送SQL</li><li>释放资源-关闭相关连接</li></ol><h3 id="JDBC-API"><a href="#JDBC-API" class="headerlink" title="JDBC API"></a>JDBC API</h3><p>JDBC API是一系列的接口，它统一和规范了应用程序与数据库的连接、执行SQL语句，并得到返回结果等各类操作，相关类和接口在java.sql与javax.sql包中</p><h3 id="JDBCUtils"><a href="#JDBCUtils" class="headerlink" title="JDBCUtils"></a>JDBCUtils</h3><p>封装建立连接和关闭连接的代码的工具类，减少代码的冗余</p><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>connection.setAutoCommit(false)&#x2F;&#x2F;关闭自动提交事务，之后可以写事务内容</p><p>connection.commit() &#x2F;&#x2F;提交事务</p><p>connection.rollback()&#x2F;&#x2F;事务回滚</p><h3 id="批处理"><a href="#批处理" class="headerlink" title="批处理"></a>批处理</h3><p>当需要成批插入或者更新记录时，采用java的批量更新机制，允许一次性提交多条sql语句</p><ol><li>addBatch()：添加需要批量处理的SQL语句或参数</li><li>execute Batch()：执行批量处理语句</li><li>clearBatch()：清空批处理包的语句</li></ol><p>JDBC连接MySQL时，如果需要使用批处理功能，请在url中加入参数&#x3D;&#x3D;?rewriteBatchedStatement&#x3D;true&#x3D;&#x3D;</p><p>批处理通常和PreparedStatement一起搭配使用，预处理可以减少编译次数，减少运行次数，效率提高</p><h3 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h3><h3 id="Apache-DBUtils"><a href="#Apache-DBUtils" class="headerlink" title="Apache-DBUtils"></a>Apache-DBUtils</h3><h3 id="DAO增删改查-BasicDao"><a href="#DAO增删改查-BasicDao" class="headerlink" title="DAO增删改查-BasicDao"></a>DAO增删改查-BasicDao</h3><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>快速入门</p><p>正则表达式基本语法</p><p>三个常用类</p><p>分组、捕获、反向引用</p><p>元字符</p><p>应用实例</p><table><thead><tr><th>元字符</th><th>描述</th></tr></thead><tbody><tr><td>\</td><td>将下一个字符标记符、或一个向后引用、或一个八进制转义符。例如，“\n”匹配\n。“\n”匹配换行符。序列“\”匹配“\”而“(”则匹配“(”。即相当于多种编程语言中都有的“转义字符”的概念。</td></tr><tr><td>^</td><td>匹配输入字符串的开始位置。如果设置了RegExp对象的Multiline属性，^也匹配“\n”或“\r”之后的位置。</td></tr><tr><td>$</td><td>匹配输入字符串的结束位置。如果设置了RegExp对象的Multiline属性，$也匹配“\n”或“\r”之前的位置。</td></tr><tr><td>*</td><td>匹配前面的子表达式任意次。例如，zo<em>能匹配“z”，也能匹配“zo”以及“zoo”。</em>等价于o{0,}</td></tr><tr><td>+</td><td>匹配前面的子表达式一次或多次(大于等于1次）。例如，“zo+”能匹配“zo”以及“zoo”，但不能匹配“z”。+等价于{1,}。</td></tr><tr><td>?</td><td>匹配前面的子表达式零次或一次。例如，“do(es)?”可以匹配“do”或“does”中的“do”。?等价于{0,1}。</td></tr><tr><td>{n}</td><td>n是一个非负整数。匹配确定的n次。例如，“o{2}”不能匹配“Bob”中的“o”，但是能匹配“food”中的两个o。</td></tr><tr><td>{n,}</td><td>n是一个非负整数。至少匹配n次。例如，“o{2,}”不能匹配“Bob”中的“o”，但能匹配“foooood”中的所有o。“o{1,}”等价于“o+”。“o{0,}”则等价于“o*”。</td></tr><tr><td>{n,m}</td><td>m和n均为非负整数，其中n&lt;&#x3D;m。最少匹配n次且最多匹配m次。例如，“o{1,3}”将匹配“fooooood”中的前三个o为一组，后三个o为一组。“o{0,1}”等价于“o?”。请注意在逗号和两个数之间不能有空格。</td></tr><tr><td>?</td><td>当该字符紧跟在任何一个其他限制符（*,+,?，{n}，{n,}，{n,m}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“oooo”，“o+”将尽可能多的匹配“o”，得到结果[“oooo”]，而“o+?”将尽可能少的匹配“o”，得到结果 [‘o’, ‘o’, ‘o’, ‘o’]</td></tr><tr><td>.点</td><td>匹配除“\r\n”之外的任何单个字符。要匹配包括“\r\n”在内的任何字符，请使用像“[\s\S]”的模式。</td></tr><tr><td>(pattern)</td><td>匹配pattern并获取这一匹配。所获取的匹配可以从产生的Matches集合得到，在VBScript中使用SubMatches集合，在JScript中则使用$0…$9属性。要匹配圆括号字符，请使用“(”或“)”。</td></tr><tr><td>(?:pattern)</td><td>非获取匹配，匹配pattern但不获取匹配结果，不进行存储供以后使用。这在使用或字符“(|)”来组合一个模式的各个部分时很有用。例如“industr(?:y|ies)”就是一个比“industry|industries”更简略的表达式。</td></tr><tr><td>(?&#x3D;pattern)</td><td>非获取匹配，正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串，该匹配不需要获取供以后使用。例如，“Windows(?&#x3D;95|98|NT|2000)”能匹配“Windows2000”中的“Windows”，但不能匹配“Windows3.1”中的“Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td></tr><tr><td>(?!pattern)</td><td>非获取匹配，正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串，该匹配不需要获取供以后使用。例如“Windows(?!95|98|NT|2000)”能匹配“Windows3.1”中的“Windows”，但不能匹配“Windows2000”中的“Windows”。</td></tr><tr><td>(?&lt;&#x3D;pattern)</td><td>非获取匹配，反向肯定预查，与正向肯定预查类似，只是方向相反。例如，“(?&lt;&#x3D;95|98|NT|2000)Windows”能匹配“2000Windows”中的“Windows”，但不能匹配“3.1Windows”中的“Windows”。</td></tr><tr><td>(?&lt;!pattern)</td><td>非获取匹配，反向否定预查，与正向否定预查类似，只是方向相反。例如“(?&lt;!95|98|NT|2000)Windows”能匹配“3.1Windows”中的“Windows”，但不能匹配“2000Windows”中的“Windows”。这个地方不正确，有问题此处用或任意一项都不能超过2位，如“(?&lt;!95|98|NT|20)Windows正确，“(?&lt;!95|980|NT|20)Windows 报错，若是单独使用则无限制，如(?&lt;!2000)Windows 正确匹配</td></tr><tr><td>x|y</td><td>匹配x或y。例如，“z|food”能匹配“z”或“food”(此处请谨慎)。“[zf]ood”则匹配“zood”或“food”。</td></tr><tr><td>[xyz]</td><td>字符集合。匹配所包含的任意一个字符。例如，“[abc]”可以匹配“plain”中的“a”。</td></tr><tr><td>[^xyz]</td><td>负值字符集合。匹配未包含的任意字符。例如，“[^abc]”可以匹配“plain”中的“plin”。</td></tr><tr><td>[a-z]</td><td>字符范围。匹配指定范围内的任意字符。例如，“[a-z]”可以匹配“a”到“z”范围内的任意小写字母字符。注意:只有连字符在字符组内部时,并且出现在两个字符之间时,才能表示字符的范围; 如果出字符组的开头,则只能表示连字符本身.</td></tr><tr><td>[^a-z]</td><td>负值字符范围。匹配任何不在指定范围内的任意字符。例如，“[^a-z]”可以匹配任何不在“a”到“z”范围内的任意字符。</td></tr><tr><td>\b</td><td>匹配一个单词边界，也就是指单词和空格间的位置（即正则表达式的“匹配”有两种概念，一种是匹配字符，一种是匹配位置，这里的\b就是匹配位置的）。例如，“er\b”可以匹配“never”中的“er”，但不能匹配“verb”中的“er”。</td></tr><tr><td>\B</td><td>匹配非单词边界。“er\B”能匹配“verb”中的“er”，但不能匹配“never”中的“er”。</td></tr><tr><td>\cx</td><td>匹配由x指明的控制字符。例如，\cM匹配一个Control-M或回车符。x的值必须为A-Z或a-z之一。否则，将c视为一个原义的“c”字符。</td></tr><tr><td>\d</td><td>匹配一个数字字符。等价于[0-9]。grep 要加上-P，perl正则支持</td></tr><tr><td>\D</td><td>匹配一个非数字字符。等价于[^0-9]。grep要加上-P，perl正则支持</td></tr><tr><td>\f</td><td>匹配一个换页符。等价于\x0c和\cL。</td></tr><tr><td>\n</td><td>匹配一个换行符。等价于\x0a和\cJ。</td></tr><tr><td>\r</td><td>匹配一个回车符。等价于\x0d和\cM。</td></tr><tr><td>\s</td><td>匹配任何不可见字符，包括空格、制表符、换页符等等。等价于[ \f\n\r\t\v]。</td></tr><tr><td>\S</td><td>匹配任何可见字符。等价于[^ \f\n\r\t\v]。</td></tr><tr><td>\t</td><td>匹配一个制表符。等价于\x09和\cI。</td></tr><tr><td>\v</td><td>匹配一个垂直制表符。等价于\x0b和\cK。</td></tr><tr><td>\w</td><td>匹配包括下划线的任何单词字符。类似但不等价于“[A-Za-z0-9_]”，这里的”单词”字符使用Unicode字符集。</td></tr><tr><td>\W</td><td>匹配任何非单词字符。等价于“[^A-Za-z0-9_]”。</td></tr></tbody></table><h2 id="项目开发流程"><a href="#项目开发流程" class="headerlink" title="项目开发流程"></a>项目开发流程</h2><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><h3 id="设计阶段"><a href="#设计阶段" class="headerlink" title="设计阶段"></a>设计阶段</h3><h3 id="实现阶段"><a href="#实现阶段" class="headerlink" title="实现阶段"></a>实现阶段</h3><h3 id="测试阶段"><a href="#测试阶段" class="headerlink" title="测试阶段"></a>测试阶段</h3><h3 id="实施阶段"><a href="#实施阶段" class="headerlink" title="实施阶段"></a>实施阶段</h3><h3 id="维护阶段"><a href="#维护阶段" class="headerlink" title="维护阶段"></a>维护阶段</h3>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 语言 </tag>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JQuery</title>
      <link href="/2022/10/06/frame/JQuery/"/>
      <url>/2022/10/06/frame/JQuery/</url>
      
        <content type="html"><![CDATA[<h1 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a>JQuery</h1><p>是一个JavaScript(后简称js)库，极大的简化了js编程,容易学习</p><p>包含以下特性：</p><ul><li>HTML元素选取</li><li>HTML元素操作</li><li>CSS操作</li><li>HTML事件函数</li><li>JavaScript特效和动画</li><li>HTML DOM遍历和修改</li><li>AJAX</li><li>Utilities</li></ul><h2 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//当前文件夹引入</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//Google浏览器引入</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.4.0/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//Microsoft浏览器引入</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://ajax.microsoft.com/ajax/jquery/jquery-1.4.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure> <p style="color:red">注：script标签应该位于页面的head标签部分</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><code>$(this)</code>:当前的HTML元素</p><p><code>$(&quot;#test&quot;)</code>:id&#x3D;”test”的元素</p><p><code>$(&quot;p&quot;)</code>:所有p标签元素</p><p><code>$(&quot;.test&quot;)</code>:所有class&#x3D;’test‘的元素</p><p><strong>基础语法：</strong><code>$(selector).action()</code></p><ul><li>美元符号定义JQuery</li><li>选择符（selector）”查询”和”查找”HTML元素</li><li>JQuery的action()执行对元素的操作</li></ul><p>为避免在文档完全加载之前运行JQuery代码，需要将代码放入以下框架内</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//文档就绪函数</span></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">--- jQuery functions go here ----</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><h3 id="jQuery-元素选择器"><a href="#jQuery-元素选择器" class="headerlink" title="jQuery 元素选择器"></a>jQuery 元素选择器</h3><p><code>$(&quot;p.intro&quot;)</code>:所有类名为intro的p标签</p><p><code>$(&quot;p#demo&quot;)</code>:id为demo的p标签</p><h3 id="jQuery-属性选择器"><a href="#jQuery-属性选择器" class="headerlink" title="jQuery 属性选择器"></a>jQuery 属性选择器</h3><p>jQuery 使用 XPath 表达式来选择带有给定属性的元素。</p><p>$(“[href]”) 选取所有带有 href 属性的元素。</p><p>$(“[href&#x3D;’#’]”) 选取所有带有 href 值等于 “#” 的元素。</p><p>$(“[href!&#x3D;’#’]”) 选取所有带有 href 值不等于 “#” 的元素。</p><p>$(“[href$&#x3D;’.jpg’]”) 选取所有 href 值以 “.jpg” 结尾的元素。</p><h3 id="jQuery-CSS-选择器"><a href="#jQuery-CSS-选择器" class="headerlink" title="jQuery CSS 选择器"></a>jQuery CSS 选择器</h3><p>jQuery CSS 选择器可用于改变 HTML 元素的 CSS 属性。</p><p>下面的例子把所有 p 元素的背景颜色更改为红色：</p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;p&quot;).css(&quot;background-color&quot;,&quot;red&quot;);</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">语法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">$(this)</td><td align="left">当前 HTML 元素</td></tr><tr><td align="left">$(“p”)</td><td align="left">所有 <p> 元素</td></tr><tr><td align="left">$(“p.intro”)</td><td align="left">所有 class&#x3D;”intro” 的 <p> 元素</td></tr><tr><td align="left">$(“.intro”)</td><td align="left">所有 class&#x3D;”intro” 的元素</td></tr><tr><td align="left">$(“#intro”)</td><td align="left">id&#x3D;”intro” 的元素</td></tr><tr><td align="left">$(“ul li:first”)</td><td align="left">每个 <ul> 的第一个 <li> 元素</td></tr><tr><td align="left">$(“[href$&#x3D;’.jpg’]”)</td><td align="left">所有带有以 “.jpg” 结尾的属性值的 href 属性</td></tr><tr><td align="left">$(“div#intro .head”)</td><td align="left">id&#x3D;”intro” 的 <div> 元素中的所有 class&#x3D;”head” 的元素</td></tr></tbody></table><h2 id="名称冲突"><a href="#名称冲突" class="headerlink" title="名称冲突"></a>名称冲突</h2><p>jQuery 使用 $ 符号作为 jQuery 的简介方式。</p><p>某些其他 JavaScript 库中的函数（比如 Prototype）同样使用 $ 符号。</p><p>jQuery 使用名为 noConflict() 的方法来解决该问题。</p><p>*var jq&#x3D;jQuery.noConflict()*，帮助您使用自己的名称（比如 jq）来代替 $ 符号。</p><h1 id="JQuery效果"><a href="#JQuery效果" class="headerlink" title="JQuery效果"></a>JQuery效果</h1><h2 id="隐藏显示"><a href="#隐藏显示" class="headerlink" title="隐藏显示"></a>隐藏显示</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../JQuery/jquery-3.6.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> flag = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;.action&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span>(flag)&#123;</span></span><br><span class="line"><span class="language-javascript">                    $(<span class="string">&quot;#demo&quot;</span>).<span class="title function_">show</span>();</span></span><br><span class="line"><span class="language-javascript">                    flag = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                    $(<span class="string">&quot;#demo&quot;</span>).<span class="title function_">hide</span>();</span></span><br><span class="line"><span class="language-javascript">                    flag = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                </span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 20px; width: 400px;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;action&quot;</span>&gt;</span>点击此处，隐藏/显示面板内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height: 100px; width: 400px;line-height: 100px;text-align: center;&quot;</span>&gt;</span></span><br><span class="line">        一寸光阴一寸金，寸金难买寸光阴。</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="淡入淡出"><a href="#淡入淡出" class="headerlink" title="淡入淡出"></a>淡入淡出</h2><ul><li>fadeIn(speed,callback) ：淡入</li><li>fadeOut(speed,callback)：淡出</li><li>fadeToggle(speed,callback)：淡出时淡入，淡入时淡出</li><li>fadeTo(speed,opacity,callback)：淡出 可调淡出的透明度</li></ul><blockquote><p>注:</p><p>​speed：淡入淡出动画时间</p><p>​callback：为动画结束执行方法</p><p>​opacity：渐变为给定的不透明度</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            $(<span class="string">&quot;#btn1&quot;</span>).<span class="title function_">click</span>(</span><br><span class="line">                <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    $(<span class="string">&quot;#d1&quot;</span>).<span class="title function_">fadeIn</span>(<span class="number">2000</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br><span class="line">            $(<span class="string">&quot;#btn2&quot;</span>).<span class="title function_">click</span>(</span><br><span class="line">                <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    $(<span class="string">&quot;#d2&quot;</span>).<span class="title function_">fadeOut</span>(<span class="number">2000</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br><span class="line">            $(<span class="string">&quot;#btn3&quot;</span>).<span class="title function_">click</span>(</span><br><span class="line">                <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    $(<span class="string">&quot;#d3&quot;</span>).<span class="title function_">fadeToggle</span>(<span class="number">2000</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br><span class="line">            $(<span class="string">&quot;#btn4&quot;</span>).<span class="title function_">click</span>(</span><br><span class="line">                <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    $(<span class="string">&quot;#d4&quot;</span>).<span class="title function_">fadeTo</span>(<span class="number">2000</span>,<span class="number">0.5</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                        $(<span class="string">&quot;p&quot;</span>).<span class="title function_">fadeIn</span>(<span class="number">1000</span>)</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#bebdbd</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-id">#d1</span>&#123;</span><br><span class="line">            <span class="attribute">background-color</span>: brown;</span><br><span class="line">            <span class="attribute">display</span>: none;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-id">#d2</span>&#123;</span><br><span class="line">            <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">227</span>, <span class="number">238</span>, <span class="number">69</span>);</span><br><span class="line">            <span class="attribute">display</span>: block;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-id">#d3</span>&#123;</span><br><span class="line">            <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">97</span>, <span class="number">202</span>, <span class="number">65</span>);</span><br><span class="line">            <span class="attribute">display</span>: block;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-id">#d4</span>&#123;</span><br><span class="line">            <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">49</span>, <span class="number">145</span>, <span class="number">201</span>);</span><br><span class="line">            <span class="attribute">display</span>: block;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 淡入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>点击淡入<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 淡出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn2&quot;</span>&gt;</span>点击淡出<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 淡入淡出 无透明度 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn3&quot;</span>&gt;</span>点击淡入/淡出<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 淡出 有透明度 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d4&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;display: none;&quot;</span>&gt;</span>nice<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn4&quot;</span>&gt;</span>点击淡出（透明度0.5）<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="滑动"><a href="#滑动" class="headerlink" title="滑动"></a>滑动</h2><p>jQuery 拥有以下滑动方法：</p><ul><li>slideDown() ：向下滑动元素</li><li>slideUp()：向上滑动元素</li><li>slideToggle()：向上向下滑动</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            $(<span class="string">&quot;#btn1&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                $(<span class="string">&quot;#d1&quot;</span>).<span class="title function_">slideDown</span>(<span class="number">1000</span>);</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">            $(<span class="string">&quot;#btn2&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                $(<span class="string">&quot;#d2&quot;</span>).<span class="title function_">slideUp</span>(<span class="number">1000</span>);</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">            $(<span class="string">&quot;#btn3&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                $(<span class="string">&quot;#d3&quot;</span>).<span class="title function_">slideToggle</span>(<span class="number">1000</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#d1</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: blueviolet;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#eeeeee</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#d2</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">122</span>, <span class="number">236</span>, <span class="number">240</span>);</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#eeeeee</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">display</span>:block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#d3</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">207</span>, <span class="number">241</span>, <span class="number">161</span>);</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#eeeeee</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">display</span>:block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>点击向下滑动<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn2&quot;</span>&gt;</span>点击向上滑动<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn3&quot;</span>&gt;</span>点击向上/向下滑动<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">animate</span>(&#123;</span><br><span class="line">    <span class="attr">left</span>:<span class="string">&#x27;250px&#x27;</span>,</span><br><span class="line">    <span class="attr">height</span>:<span class="string">&#x27;+=150px&#x27;</span>,</span><br><span class="line">    <span class="attr">width</span>:<span class="string">&#x27;+=150px&#x27;</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>注：使用 marginRight 而不是 margin-right这样的格式</p><h3 id="停止动画"><a href="#停止动画" class="headerlink" title="停止动画"></a>停止动画</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//参数 stopAll 清除动画队列，仅停止活动的动画，默认false</span></span><br><span class="line">$(selector).<span class="title function_">stop</span>(stopAll,goToEnd);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#stop&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;#panel&quot;</span>).<span class="title function_">stop</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="参数（Callback）"><a href="#参数（Callback）" class="headerlink" title="参数（Callback）"></a>参数（Callback）</h3><p><strong>Callback 函数在当前动画 100% 完成之后执行</strong></p><h3 id="链式结构"><a href="#链式结构" class="headerlink" title="链式结构"></a>链式结构</h3><p>通过 jQuery，您可以把动作&#x2F;方法链接起来。</p><p>Chaining 允许我们在一条语句中允许多个 jQuery 方法（在相同的元素上）。</p><h1 id="JQuery-HTML"><a href="#JQuery-HTML" class="headerlink" title="JQuery HTML"></a>JQuery HTML</h1><h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../JQuery/jquery-3.6.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 语言 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript</title>
      <link href="/2022/10/06/language/JavaScript/"/>
      <url>/2022/10/06/language/JavaScript/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript教程"><a href="#JavaScript教程" class="headerlink" title="JavaScript教程"></a>JavaScript教程</h1><p><strong>JavaScript</strong>是属于HTML和WEB的编程语言</p><p>JavaScript 是 web 开发者必学的三种语言之一：</p><ul><li><em>HTML</em> 定义网页的内容</li><li><em>CSS</em> 规定网页的布局</li><li><em>JavaScript</em> 对网页行为进行编程</li></ul><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>getElementById() </code>是多个 JavaScript HTML 方法之一。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--改变标签内文本内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>欢迎来到英魂之刃<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&#x27;demo&#x27;</span>&gt;</span>请选择英雄<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;document.getElementById(&#x27;demo&#x27;).innerHTML=&#x27;蛇发美杜莎&#x27;&quot;</span>&gt;</span>点击我确定<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--可以改变的内容--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">HTML属性 例： class</span></span><br><span class="line"><span class="comment">HTML样式 例： color(颜色)</span></span><br><span class="line"><span class="comment">隐藏HTML元素 例：display(显示)</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在HTML中，JavaScript 代码必须位于<code> &lt;script&gt;</code> 与<code> &lt;/script&gt;</code> 标签之间。</p><p><strong>注释：</strong>旧的 JavaScript 也许会使用 <strong>type</strong> 属性：<code>&lt;script type=&quot;text/javascript&quot;&gt;</code></p><p><strong>注释：</strong>type 属性不是必需的。JavaScript 是 HTML 中的默认脚本语言。</p><h3 id="JS-函数和事件"><a href="#JS-函数和事件" class="headerlink" title="JS 函数和事件"></a>JS 函数和事件</h3><p>JavaScript<strong>函数</strong>是一种 JavaScript 代码块，它可以在调用时被执行。</p><p>例如，当发生<strong>事件</strong>时调用函数，比如当用户点击按钮时。</p><h3 id="JS-所在位置"><a href="#JS-所在位置" class="headerlink" title="JS 所在位置"></a>JS 所在位置</h3><p>可以是<code>&lt;head&gt;</code>头部标签，可以是<code>&lt;body&gt;</code>。</p><p>也可以在<strong>外部文件</strong>，有以下一些优势</p><ul><li>分离了 HTML 和代码</li><li>使 HTML 和 JavaScript 更易于阅读和维护</li><li>已缓存的 JavaScript 文件可加速页面加载</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;myScript1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="JS-输出"><a href="#JS-输出" class="headerlink" title="JS 输出"></a>JS 输出</h2><h3 id="window-alert"><a href="#window-alert" class="headerlink" title="window.alert()"></a>window.alert()</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用 window.alert() 写入警告框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;warn&quot;</span>&gt;</span>警告框<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="document-write"><a href="#document-write" class="headerlink" title="document.write()"></a>document.write()</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用 document.write() 写入 HTML 输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;写入HTML成功&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 完全加载后使用 document.write() 将删除已有的 HTML --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;document.write(&#x27;加载完使用了write&#x27;)&quot;</span>&gt;</span>use write<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>**<span style='color:red'>注意：</span>*<em>在 HTML 文档完全加载后使用 <strong>document.write()</strong> 将</em>删除所有已有的 HTML* ：</p><p>**<span style='color:orange'>提示：</span>**document.write() 方法仅用于测试。</p><h2 id="JS-语句"><a href="#JS-语句" class="headerlink" title="JS 语句"></a>JS 语句</h2><p>在 HTML 中，JavaScript 语句是由 web 浏览器“执行”的“指令”。JavaScript语句由以下构成：</p><p>值&#x2F;运算符&#x2F;表达式&#x2F;关键词&#x2F;注释</p><p><strong>分号</strong>：结束语句</p><p><strong>空白字符</strong>：增强可读性</p><p><strong>行长度</strong>：控制在80个字符以内</p><p><strong>代码块</strong>：可以用<code>&#123;...&#125;</code>组合在代码块中定义一同执行的语句</p><p><strong>关键字</strong>：</p><table><thead><tr><th align="left">关键词</th><th align="center">描述</th></tr></thead><tbody><tr><td align="left">break</td><td align="center">终止 switch 或循环。</td></tr><tr><td align="left">continue</td><td align="center">跳出循环并在顶端开始。</td></tr><tr><td align="left">debugger</td><td align="center">停止执行 JavaScript，并调用调试函数（如果可用）。</td></tr><tr><td align="left">do … while</td><td align="center">执行语句块，并在条件为真时重复代码块。</td></tr><tr><td align="left">for</td><td align="center">标记需被执行的语句块，只要条件为真。</td></tr><tr><td align="left">function</td><td align="center">声明函数。</td></tr><tr><td align="left">if … else</td><td align="center">标记需被执行的语句块，根据某个条件。</td></tr><tr><td align="left">return</td><td align="center">退出函数。</td></tr><tr><td align="left">switch</td><td align="center">标记需被执行的语句块，根据不同的情况。</td></tr><tr><td align="left">try … catch</td><td align="center">对语句块实现错误处理。</td></tr><tr><td align="left">var</td><td align="center">声明变量。</td></tr></tbody></table><h2 id="JS-语法"><a href="#JS-语法" class="headerlink" title="JS 语法"></a>JS 语法</h2><p>JavaScript 语法是一套规则，它定义了 JavaScript 的语言结构。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//声明变量</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> x,y;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//变量赋值</span></span></span><br><span class="line"><span class="language-javascript">        x = <span class="number">7</span>, y = <span class="number">9</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//变量计算</span></span></span><br><span class="line"><span class="language-javascript">        z = x + y;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="JS-标识符"><a href="#JS-标识符" class="headerlink" title="JS 标识符"></a>JS 标识符</h3><p>标识符用于命名变量（关键词&#x2F;函数&#x2F;标签）</p><p>构造变量名称（唯一标识符）的通用规则是：</p><ul><li>名称可包含字母、数字、下划线和美元符号</li><li>名称必须以字母开头</li><li>名称也可以 $ 和 _ 开头（但是在本教程中我们不会这么做）</li><li>名称对大小写敏感（y 和 Y 是不同的变量）</li><li>保留字（比如 JavaScript 的关键词）无法用作变量名称</li></ul><p>**<span style='color:orange'>提示：</span>**数值不能作为标识符首字符，大小写区分，小驼峰命名法，使用Unicode字符集</p><h3 id="JS-注解"><a href="#JS-注解" class="headerlink" title="JS 注解"></a>JS 注解</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//我是单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 我是多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>注释：</strong>使用单行注释最为常见。</p><p>**<span style='color:orange'>提示：</span>**注释块常用于官方声明。</p><p>可以使用注释来阻止代码执行，适用于测试环节</p><h3 id="JS-变量"><a href="#JS-变量" class="headerlink" title="JS 变量"></a>JS 变量</h3><p>所有的变量必须以唯一的名称<strong>标识</strong></p><p>**<span style='color:orange'>提示：</span>**在脚本的开头声明所有变量是个好习惯！</p><p>不带有值的变量，它的值将是<code>undefined</code></p><hr><p>在ES2015 引入了两个重要的 JavaScript 新关键词：let 和 const（<strong>常量</strong>）。和<code>var</code>比较</p><table><thead><tr><th align="center">关键字</th><th align="center">函数作用域(funcation(){…})</th><th align="center">块级作用域（{…}）</th><th align="center">全局作用域(*)</th></tr></thead><tbody><tr><td align="center">var</td><td align="center">是</td><td align="center">否</td><td align="center">是</td></tr><tr><td align="center">let</td><td align="center">是</td><td align="center">是</td><td align="center">是</td></tr><tr><td align="center">const</td><td align="center">&#x2F;</td><td align="center">是</td><td align="center">&#x2F;</td></tr></tbody></table><p>在 HTML 中，全局作用域是 window 对象。</p><p>通过 var 关键词定义的全局变量属于 window 对象：</p><h3 id="JS-数据类型"><a href="#JS-数据类型" class="headerlink" title="JS 数据类型"></a>JS 数据类型</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> length = <span class="number">7</span>;                       <span class="comment">//数字</span></span><br><span class="line"><span class="keyword">var</span> lastName = <span class="string">&quot;Gates&quot;</span>                <span class="comment">//字符串</span></span><br><span class="line"><span class="keyword">var</span> cars = [<span class="string">&quot;夏天天&quot;</span>,<span class="string">&quot;夏跳跳&quot;</span>,<span class="string">&quot;夏咚咚&quot;</span>] <span class="comment">//数组</span></span><br><span class="line"><span class="keyword">var</span> x = &#123;&#125;                            <span class="comment">//对象</span></span><br><span class="line"><span class="comment">//JavaScript 拥有动态类型。这意味着相同变量可用作不同类型：</span></span><br><span class="line"><span class="keyword">var</span> x;               <span class="comment">// 现在 x 是 undefined</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">7</span>;           <span class="comment">// 现在 x 是数值</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">&quot;Bill&quot;</span>;      <span class="comment">// 现在 x 是字符串值</span></span><br><span class="line"><span class="comment">//可以在字符串内使用引号，只要这些引号与包围字符串的引号不匹配</span></span><br><span class="line"><span class="keyword">var</span> answer = <span class="string">&quot;It&#x27;s alright&quot;</span>;             <span class="comment">// 双引号内的单引号</span></span><br><span class="line"><span class="keyword">var</span> answer = <span class="string">&quot;He is called &#x27;Bill&#x27;&quot;</span>;    <span class="comment">// 双引号内的单引号</span></span><br><span class="line"><span class="keyword">var</span> answer = <span class="string">&#x27;He is called &quot;Bill&quot;&#x27;</span>;    <span class="comment">// 单引号内的双引号</span></span><br><span class="line"><span class="comment">//JavaScript 只有一种数值类型。写数值时用不用小数点均可 超大或超小的数值可以用科学计数法来写</span></span><br><span class="line"><span class="keyword">var</span> x1 = <span class="number">34.00</span>;     <span class="comment">// 带小数点</span></span><br><span class="line"><span class="keyword">var</span> x2 = <span class="number">34</span>;        <span class="comment">// 不带小数点</span></span><br><span class="line"><span class="keyword">var</span> y = <span class="number">123e5</span>;      <span class="comment">// 12300000</span></span><br><span class="line"><span class="keyword">var</span> z = <span class="number">123e-5</span>;     <span class="comment">// 0.00123</span></span><br><span class="line"><span class="comment">//布尔值 true/false</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> y = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">//JavaScript 对象用花括号来书写。对象属性是 name:value 对，由逗号分隔。</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;<span class="attr">firstName</span>:<span class="string">&quot;Bill&quot;</span>, <span class="attr">lastName</span>:<span class="string">&quot;Gates&quot;</span>, <span class="attr">age</span>:<span class="number">62</span>, <span class="attr">eyeColor</span>:<span class="string">&quot;blue&quot;</span>&#125;;</span><br><span class="line"><span class="comment">//typeof:用以返回 值的类型</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">&quot;Bill&quot;</span>              <span class="comment">// 返回 &quot;string&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="number">314</span>                 <span class="comment">// 返回 &quot;number&quot;</span></span><br><span class="line"><span class="comment">//任何变量均可通过设置值为 undefined 进行清空。其类型也将是 undefined</span></span><br><span class="line"><span class="keyword">var</span> person;                  <span class="comment">// 值是 undefined，类型是 undefined</span></span><br><span class="line"><span class="comment">//在 JavaScript 中，null 是 &quot;nothing&quot;。null 的数据类型是对象。</span></span><br><span class="line"><span class="keyword">var</span> person = <span class="literal">null</span>;           <span class="comment">// 值是 null，但是类型仍然是对象</span></span><br><span class="line"> <span class="comment">//Undefined 与 null 的值相等，但类型不相等：</span></span><br></pre></td></tr></table></figure><h4 id="JS-字符串"><a href="#JS-字符串" class="headerlink" title="JS 字符串"></a>JS 字符串</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="string">&quot;Bill Gates&quot;</span></span><br><span class="line">      <span class="comment">//字符串对应属性</span></span><br><span class="line">      <span class="keyword">var</span> y = x.<span class="property">length</span></span><br><span class="line">      <span class="keyword">var</span> z = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Bill Gates&quot;</span>)</span><br><span class="line">      <span class="comment">//当使用 == 判断时 x与z是相等的，当使用 === 判断时 x与z是不想等的</span></span><br><span class="line">      <span class="comment">//因为一个只比值，一个还比类型</span></span><br><span class="line">      <span class="comment">//indexOf() 方法返回字符串中指定文本首次出现的索引（位置）：</span></span><br><span class="line">      <span class="keyword">var</span> pos = str.<span class="title function_">indexOf</span>(<span class="string">&quot;G&quot;</span>);</span><br><span class="line">      <span class="comment">//lastIndexOf() 方法返回指定文本在字符串中最后一次出现的索引：</span></span><br><span class="line">      <span class="keyword">var</span> pos_l = str.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;l&quot;</span>);</span><br><span class="line">      <span class="comment">//slice() 提取字符串的某个部分并在新字符串中返回被提取的部分。</span></span><br><span class="line">      <span class="keyword">var</span> res = str.<span class="title function_">slice</span>(<span class="number">7</span>,<span class="number">13</span>);</span><br><span class="line">      <span class="keyword">var</span> res_1 = str.<span class="title function_">substring</span>(<span class="number">7</span>,<span class="number">13</span>);</span><br><span class="line">      <span class="comment">//replace() 方法用另一个值替换在字符串中指定的值：</span></span><br><span class="line">      <span class="keyword">var</span> n = str.<span class="title function_">replace</span>(<span class="string">&quot;XXX&quot;</span>, <span class="string">&quot;Bill&quot;</span>);</span><br><span class="line">      <span class="comment">//通过 toUpperCase() 把字符串转换为大写：</span></span><br><span class="line">      <span class="comment">//通过 toLowerCase() 把字符串转换为小写：</span></span><br><span class="line">      <span class="comment">//concat() 连接两个或多个字符串：</span></span><br><span class="line">      <span class="keyword">var</span> text = <span class="string">&quot;Hello&quot;</span>.<span class="title function_">concat</span>(<span class="string">&quot; &quot;</span>,<span class="string">&quot;World!&quot;</span>);</span><br><span class="line">      <span class="comment">//trim() 方法删除字符串两端的空白符：</span></span><br><span class="line">      <span class="comment">//charAt() 方法返回字符串中指定下标（位置）的字符串：</span></span><br><span class="line">      <span class="comment">//charCodeAt() 方法返回字符串中指定索引的字符 unicode 编码：</span></span><br></pre></td></tr></table></figure><p>模板字符串（字面量）</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">`He&#x27;s often called &quot;Johnny&quot;`</span>;</span><br><span class="line"><span class="keyword">let</span> text =</span><br><span class="line"><span class="string">`The quick</span></span><br><span class="line"><span class="string">brown fox</span></span><br><span class="line"><span class="string">jumps over</span></span><br><span class="line"><span class="string">the lazy dog`</span>;</span><br><span class="line"><span class="comment">//模板字符串插值 其中可以使用表达式</span></span><br><span class="line">$&#123;...&#125;</span><br><span class="line"><span class="keyword">let</span> text = <span class="string">`Welcome <span class="subst">$&#123;firstName&#125;</span>, <span class="subst">$&#123;lastName&#125;</span>!`</span>;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//案例</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">let</span> header = <span class="string">&quot;Templates Lite rals&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">let</span> tags  = [<span class="string">&quot;template literals&quot;</span>,<span class="string">&quot;javascript&quot;</span>,<span class="string">&quot;es6&quot;</span>,<span class="string">&quot;xiadujian&quot;</span>];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">let</span> html = <span class="string">`&lt;h2&gt;&lt;/h2&gt;&lt;ul&gt;`</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> tags) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">html += <span class="string">`&lt;li&gt;<span class="subst">$&#123;x&#125;</span>&lt;/li&gt;`</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">html += <span class="string">`&lt;/ul&gt;`</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;d&quot;</span>).<span class="property">innerHTML</span> = html;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="JS-日期"><a href="#JS-日期" class="headerlink" title="JS 日期"></a>JS 日期</h4><p>默认情况下使用浏览器的时区显示为全文本字符串</p><p><code>Tue Apr 02 2019 09:01:19 GMT+0800 (中国标准时间)</code></p><p>创建Date对象构造函数创建。</p><h5 id="4种创建"><a href="#4种创建" class="headerlink" title="4种创建"></a>4种创建</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//四种方法创建新的日期对象</span></span><br><span class="line"><span class="comment">//new Date();用当前日期和时间创建新的日期对象</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="comment">//new Date(year,month,day,hours,minutes,seconds,milliseconds);</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2022</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">8</span>,<span class="number">59</span>,<span class="number">59</span>,<span class="number">10</span>);<span class="comment">//7个数字分别指定年、月、日、小时、分钟、秒和毫秒（按此顺序）：</span></span><br><span class="line"><span class="comment">//new Date(milliseconds) 创建一个零时加毫秒的新日期对象</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">100000000000</span>);</span><br><span class="line"><span class="comment">//new Date(date string);从日期字符串创建一个新的日期对象：</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;October 13, 2014 11:13:00&quot;</span>);</span><br></pre></td></tr></table></figure><h5 id="4种输入"><a href="#4种输入" class="headerlink" title="4种输入"></a>4种输入</h5><table><thead><tr><th align="left">类型</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">ISO 日期</td><td align="left">“2018-02-19” （国际标准）</td></tr><tr><td align="left">短日期</td><td align="left">“02&#x2F;19&#x2F;2018” 或者 “2018&#x2F;02&#x2F;19”</td></tr><tr><td align="left">长日期</td><td align="left">“Feb 19 2018” 或者 “19 Feb 2019”</td></tr><tr><td align="left">完整日期</td><td align="left">“Monday February 25 2015”</td></tr></tbody></table><h5 id="设置方法"><a href="#设置方法" class="headerlink" title="设置方法"></a>设置方法</h5><p>设置方法用于设置日期的某个部分。下面是最常用的方法（按照字母顺序排序）：</p><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">setDate()</td><td align="left">以数值（1-31）设置日</td></tr><tr><td align="left">setFullYear()</td><td align="left">设置年（可选月和日）</td></tr><tr><td align="left">setHours()</td><td align="left">设置小时（0-23）</td></tr><tr><td align="left">setMilliseconds()</td><td align="left">设置毫秒（0-999）</td></tr><tr><td align="left">setMinutes()</td><td align="left">设置分（0-59）</td></tr><tr><td align="left">setMonth()</td><td align="left">设置月（0-11）</td></tr><tr><td align="left">setSeconds()</td><td align="left">设置秒（0-59）</td></tr><tr><td align="left">setTime()</td><td align="left">设置时间（从 1970 年 1 月 1 日至今的毫秒数）</td></tr></tbody></table><h3 id="JS-算术"><a href="#JS-算术" class="headerlink" title="JS 算术"></a>JS 算术</h3><p>与代数类似，您能够通过 JavaScript 变量进行算术运算，使用 “&#x3D;” 和 “*” 之类的运算符：</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">加法</td></tr><tr><td align="left">-</td><td align="left">减法</td></tr><tr><td align="left">*</td><td align="left">乘法</td></tr><tr><td align="left">**</td><td align="left">幂（ES2016）</td></tr><tr><td align="left">&#x2F;</td><td align="left">除法</td></tr><tr><td align="left">%</td><td align="left">取模（余数）</td></tr><tr><td align="left">++</td><td align="left">递加</td></tr><tr><td align="left">–</td><td align="left">递减</td></tr></tbody></table><h4 id="JavaScript-赋值运算符"><a href="#JavaScript-赋值运算符" class="headerlink" title="JavaScript 赋值运算符"></a>JavaScript 赋值运算符</h4><p>赋值运算符向 JavaScript 变量赋值。</p><table><thead><tr><th align="left">运算符</th><th align="left">例子</th><th align="left">等同于</th></tr></thead><tbody><tr><td align="left">&#x3D;</td><td align="left">x &#x3D; y</td><td align="left">x &#x3D; y</td></tr><tr><td align="left">+&#x3D;</td><td align="left">x +&#x3D; y</td><td align="left">x &#x3D; x + y</td></tr><tr><td align="left">-&#x3D;</td><td align="left">x -&#x3D; y</td><td align="left">x &#x3D; x - y</td></tr><tr><td align="left">*&#x3D;</td><td align="left">x *&#x3D; y</td><td align="left">x &#x3D; x * y</td></tr><tr><td align="left">&#x2F;&#x3D;</td><td align="left">x &#x2F;&#x3D; y</td><td align="left">x &#x3D; x &#x2F; y</td></tr><tr><td align="left">%&#x3D;</td><td align="left">x %&#x3D; y</td><td align="left">x &#x3D; x % y</td></tr></tbody></table><h4 id="JavaScript-比较运算符"><a href="#JavaScript-比较运算符" class="headerlink" title="JavaScript 比较运算符"></a>JavaScript 比较运算符</h4><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">&#x3D;&#x3D;</td><td align="left">等于</td></tr><tr><td align="left">&#x3D;&#x3D;&#x3D;</td><td align="left">等值等型</td></tr><tr><td align="left">!&#x3D;</td><td align="left">不相等</td></tr><tr><td align="left">!&#x3D;&#x3D;</td><td align="left">不等值或不等型</td></tr><tr><td align="left">&gt;</td><td align="left">大于</td></tr><tr><td align="left">&lt;</td><td align="left">小于</td></tr><tr><td align="left">&gt;&#x3D;</td><td align="left">大于或等于</td></tr><tr><td align="left">&lt;&#x3D;</td><td align="left">小于或等于</td></tr><tr><td align="left">?</td><td align="left">三元运算符</td></tr></tbody></table><h4 id="JavaScript-逻辑运算符"><a href="#JavaScript-逻辑运算符" class="headerlink" title="JavaScript 逻辑运算符"></a>JavaScript 逻辑运算符</h4><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">&amp;&amp;</td><td align="left">逻辑与</td></tr><tr><td align="left">||</td><td align="left">逻辑或</td></tr><tr><td align="left">!</td><td align="left">逻辑非</td></tr></tbody></table><h4 id="JavaScript-类型运算符"><a href="#JavaScript-类型运算符" class="headerlink" title="JavaScript 类型运算符"></a>JavaScript 类型运算符</h4><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">typeof</td><td align="left">返回变量的类型。</td></tr><tr><td align="left">instanceof</td><td align="left">返回 true，如果对象是对象类型的实例。</td></tr></tbody></table><h4 id="JavaScript-位运算符"><a href="#JavaScript-位运算符" class="headerlink" title="JavaScript 位运算符"></a>JavaScript 位运算符</h4><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">例子</th><th align="left">等同于</th><th align="left">结果</th><th align="left">十进制</th></tr></thead><tbody><tr><td align="left">&amp;</td><td align="left">与</td><td align="left">5 &amp; 1</td><td align="left">0101 &amp; 0001</td><td align="left">0001</td><td align="left">1</td></tr><tr><td align="left">|</td><td align="left">或</td><td align="left">5 | 1</td><td align="left">0101 | 0001</td><td align="left">0101</td><td align="left">5</td></tr><tr><td align="left">~</td><td align="left">非</td><td align="left">~ 5</td><td align="left">~0101</td><td align="left">1010</td><td align="left">10</td></tr><tr><td align="left">^</td><td align="left">异或</td><td align="left">5 ^ 1</td><td align="left">0101 ^ 0001</td><td align="left">0100</td><td align="left">4</td></tr><tr><td align="left">&lt;&lt;</td><td align="left">零填充左位移</td><td align="left">5 &lt;&lt; 1</td><td align="left">0101 &lt;&lt; 1</td><td align="left">1010</td><td align="left">10</td></tr><tr><td align="left">&gt;&gt;</td><td align="left">有符号右位移</td><td align="left">5 &gt;&gt; 1</td><td align="left">0101 &gt;&gt; 1</td><td align="left">0010</td><td align="left">2</td></tr><tr><td align="left">&gt;&gt;&gt;</td><td align="left">零填充右位移</td><td align="left">5 &gt;&gt;&gt; 1</td><td align="left">0101 &gt;&gt;&gt; 1</td><td align="left">0010</td><td align="left">2</td></tr></tbody></table><h3 id="JS-函数"><a href="#JS-函数" class="headerlink" title="JS 函数"></a>JS 函数</h3><p>JavaScript 函数通过 function 关键词进行定义，其后是<em>函数名</em>和括号 ()。</p><p>函数名可包含字母、数字、下划线和美元符号（规则与变量名相同）。</p><p>在函数中，参数是局部变量。</p><h4 id="函数返回"><a href="#函数返回" class="headerlink" title="函数返回"></a>函数返回</h4><p>当 JavaScript 到达 return 语句，函数将停止执行。</p><p>如果函数被某条语句调用，JavaScript 将在调用语句之后“返回”执行代码。</p><p>函数通常会计算出<em><strong>返回值</strong></em>。这个返回值会返回给调用者：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;num1&quot;</span> /&gt;</span> + <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;num2&quot;</span> /&gt;</span> = <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;results&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span> &gt;</span>计算<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;add&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> num1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;num1&#x27;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> num2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;num2&#x27;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;results&#x27;</span>).<span class="property">innerHTML</span> = </span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">parseInt</span>(num1) + <span class="built_in">parseInt</span>(num2);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="JS-数字"><a href="#JS-数字" class="headerlink" title="JS 数字"></a>JS 数字</h3><p>书写JavaScript数值既可以带着小数点，也可以不带；<code>var x = 3.14;var y = 3</code></p><p>超大或超小的数可以通过科学技术法来写：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">123e5</span> <span class="comment">//12300000</span></span><br><span class="line"><span class="keyword">var</span> y = <span class="number">123e-5</span><span class="comment">//0.00123</span></span><br></pre></td></tr></table></figure><p><strong>JavaScript 数值始终是 64 位的浮点数</strong></p><p>与许多其他编程语言不同，JavaScript 不会定义不同类型的数，比如整数、短的、长的、浮点的等等。</p><p>JavaScript 数值始终以双精度浮点数来存储，根据国际 IEEE 754 标准。</p><p>此格式用 64 位存储数值，其中 0 到 51 存储数字（片段），52 到 62 存储指数，63 位存储符号：</p><table><thead><tr><th align="left">值(aka Fraction&#x2F;Mantissa)</th><th align="left">指数</th><th align="left">符号</th></tr></thead><tbody><tr><td align="left">52 bits(0 - 51)</td><td align="left">11 bits (52 - 62)</td><td align="left">1 bit (63)</td></tr></tbody></table><h4 id="JS-数字方法"><a href="#JS-数字方法" class="headerlink" title="JS 数字方法"></a>JS 数字方法</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">123</span>;</span><br><span class="line">x.<span class="title function_">toString</span>();<span class="comment">//返回字符串 123</span></span><br><span class="line"><span class="keyword">var</span> y = <span class="number">9.656</span>;</span><br><span class="line">y.<span class="title function_">toExponential</span>(<span class="number">2</span>);<span class="comment">//返回包含两位小数的并使用指数计数法结果 9.66e+0</span></span><br><span class="line">y.<span class="title function_">toFixed</span>(<span class="number">2</span>);<span class="comment">//返回包含两位小数的数字结果 9.66</span></span><br><span class="line">x.<span class="title function_">toPrecision</span>(<span class="number">2</span>);<span class="comment">//返回指定长度的数字12e+2</span></span><br><span class="line">x.<span class="title function_">valueOf</span>();<span class="comment">//以数值返回数值</span></span><br><span class="line">z = <span class="literal">true</span>;</span><br><span class="line"><span class="title class_">Number</span>(z);<span class="comment">//可以把变量转换为数值 无法返回则饭返回NaN</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;2019-04-15&quot;</span>));    <span class="comment">// 返回 1970 年 1 月 1 日至今的毫秒数</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;20&quot;</span>) <span class="comment">//解析一段字符串并返回数值(Int型)。允许空格。只返回首个数字</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">&quot;10.33&quot;</span>) <span class="comment">//解析一段字符串并返回数值(浮点型)。允许空格。只返回首个数字：</span></span><br></pre></td></tr></table></figure><h3 id="JS-数学"><a href="#JS-数学" class="headerlink" title="JS 数学"></a>JS 数学</h3><h5 id="Math-方法"><a href="#Math-方法" class="headerlink" title="Math 方法"></a>Math 方法</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="property">PI</span>;<span class="comment">//返回 3.141592653589793</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">round</span>(x);<span class="comment">//四舍五入为最近的整数</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">pow</span>(x,y);<span class="comment">//返回x的y次幂</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">sqrt</span>(x);<span class="comment">//返回x的平方根</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">abs</span>(x);<span class="comment">//返回x的绝对值</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">ceil</span>(x)<span class="comment">//取大于x的最小整数</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>(x);<span class="comment">//取不大于x的最大整数</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">sin</span>(x);<span class="comment">//x为弧度制的角度，返回正弦值</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">cos</span>(x);<span class="comment">//x为弧度制的角度，返回余弦值</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">max</span>(...values);<span class="comment">//寻找参数列表中最大值</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">min</span>(...values);<span class="comment">//寻找参数列表中最小值</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">random</span>();<span class="comment">//返回介于[0,1)之间的随机数</span></span><br></pre></td></tr></table></figure><h5 id="Math-属性（常量）"><a href="#Math-属性（常量）" class="headerlink" title="Math 属性（常量）"></a>Math 属性（常量）</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Math.E          // 返回欧拉指数（Euler&#x27;s number）</span><br><span class="line">Math.PI         // 返回圆周率（PI）</span><br><span class="line">Math.SQRT2      // 返回 2 的平方根</span><br><span class="line">Math.SQRT1_2    // 返回 1/2 的平方根</span><br><span class="line">Math.LN2        // 返回 2 的自然对数</span><br><span class="line">Math.LN10       // 返回 10 的自然对数</span><br><span class="line">Math.LOG2E      // 返回以 2 为底的 e 的对数（约等于 1.414）</span><br><span class="line">Math.LOG10E     // 返回以 10 为底的 e 的对数（约等于 0.434）</span><br></pre></td></tr></table></figure><h5 id="Math-对象方法"><a href="#Math-对象方法" class="headerlink" title="Math 对象方法"></a>Math 对象方法</h5><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">abs(x)</td><td align="left">返回 x 的绝对值</td></tr><tr><td align="left">acos(x)</td><td align="left">返回 x 的反余弦值，以弧度计</td></tr><tr><td align="left">asin(x)</td><td align="left">返回 x 的反正弦值，以弧度计</td></tr><tr><td align="left">atan(x)</td><td align="left">以介于 -PI&#x2F;2 与 PI&#x2F;2 弧度之间的数值来返回 x 的反正切值。</td></tr><tr><td align="left">atan2(y,x)</td><td align="left">返回从 x 轴到点 (x,y) 的角度</td></tr><tr><td align="left">ceil(x)</td><td align="left">对 x 进行上舍入</td></tr><tr><td align="left">cos(x)</td><td align="left">返回 x 的余弦</td></tr><tr><td align="left">exp(x)</td><td align="left">返回 Ex 的值</td></tr><tr><td align="left">floor(x)</td><td align="left">对 x 进行下舍入</td></tr><tr><td align="left">log(x)</td><td align="left">返回 x 的自然对数（底为e）</td></tr><tr><td align="left">max(x,y,z,…,n)</td><td align="left">返回最高值</td></tr><tr><td align="left">min(x,y,z,…,n)</td><td align="left">返回最低值</td></tr><tr><td align="left">pow(x,y)</td><td align="left">返回 x 的 y 次幂</td></tr><tr><td align="left">random()</td><td align="left">返回 0 ~ 1 之间的随机数</td></tr><tr><td align="left">round(x)</td><td align="left">把 x 四舍五入为最接近的整数</td></tr><tr><td align="left">sin(x)</td><td align="left">返回 x（x 以角度计）的正弦</td></tr><tr><td align="left">sqrt(x)</td><td align="left">返回 x 的平方根</td></tr><tr><td align="left">tan(x)</td><td align="left">返回角的正切</td></tr></tbody></table><h3 id="JS数组"><a href="#JS数组" class="headerlink" title="JS数组"></a>JS数组</h3><p>数组是一种特殊的变量。它能够一次存放一个以上的值。数组是一种特殊类型的对象</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> baos = [<span class="string">&quot;宝宝&quot;</span>,<span class="string">&quot;小宝&quot;</span>,<span class="string">&quot;大宝&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> baoos = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&quot;宝宝&quot;</span>,<span class="string">&quot;小宝&quot;</span>,<span class="string">&quot;大宝&quot;</span>);</span><br><span class="line"><span class="comment">//将所有数组结合为一个字符串</span></span><br><span class="line">baoos.<span class="title function_">toString</span>();</span><br><span class="line">baoos.<span class="title function_">join</span>(<span class="string">&quot;|&quot;</span>);<span class="comment">//在转换的同时规定分隔符</span></span><br><span class="line">baoos.<span class="title function_">pop</span>();<span class="comment">//弹出数组末尾值</span></span><br><span class="line">baoos.<span class="title function_">push</span>(<span class="string">&quot;new&quot;</span>);<span class="comment">//向末尾添加一个新元素</span></span><br><span class="line">baoos.<span class="title function_">shift</span>();<span class="comment">// 从数组删除第一个元素，返回被删除元素，其他元素顺移</span></span><br><span class="line">baoos.<span class="title function_">unshift</span>(<span class="string">&quot;new&quot;</span>);<span class="comment">//向数组添加新元素，返回新数组长度</span></span><br><span class="line">baoos[baoos.<span class="property">length</span>] = <span class="string">&quot;new&quot;</span>;<span class="comment">//向数组末尾追加新元素</span></span><br><span class="line"><span class="keyword">delete</span> baoos[<span class="number">0</span>];<span class="comment">//将下标&#x27;0&#x27;位置上的内容改为 undefined</span></span><br><span class="line">baoos.<span class="title function_">splice</span>(f,l,<span class="string">&quot;&quot;</span>);<span class="comment">//可用于数组添加和删除</span></span><br><span class="line">baoos.<span class="title function_">concat</span>(baos);<span class="comment">//拼接数组</span></span><br><span class="line"></span><br><span class="line">baoos.<span class="title function_">sort</span>();            <span class="comment">// 对数组中的元素进行排序</span></span><br><span class="line">baoos.<span class="title function_">reverse</span>();         <span class="comment">// 反转元素顺序</span></span><br></pre></td></tr></table></figure><p>声明数组使用<code>const</code>:不能重新赋值 ，必须初始化赋值，具有块级作用域</p><h2 id="JS-对象"><a href="#JS-对象" class="headerlink" title="JS 对象"></a>JS 对象</h2><h3 id="对象的定义"><a href="#对象的定义" class="headerlink" title="对象的定义"></a>对象的定义</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> girl = &#123;</span><br><span class="line">name : <span class="string">&#x27;Lucy&#x27;</span>,</span><br><span class="line">age : <span class="number">18</span>,</span><br><span class="line">character : <span class="string">&#x27;optimistic&#x27;</span>,</span><br><span class="line">appearance : <span class="string">&#x27;beautiful&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象的访问"><a href="#对象的访问" class="headerlink" title="对象的访问"></a>对象的访问</h3><p>以两种方式访问属性：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">objectName.<span class="property">propertyName</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">objectName[<span class="string">&quot;propertyName&quot;</span>]</span><br></pre></td></tr></table></figure><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>是作为属性来存储的函数。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> boy = &#123;</span><br><span class="line">name : <span class="string">&#x27;Le Tang&#x27;</span>,</span><br><span class="line">age : <span class="number">23</span>,</span><br><span class="line">eat : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;吃烤鸭&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>Map 对象存有键值对，其中的键可以是任何数据类型。</p><p>Map 对象记得键的原始插入顺序。</p><p>Map 对象具有表示映射大小的属性。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建对象</span></span><br><span class="line"><span class="keyword">const</span> apples = &#123;<span class="attr">name</span>: <span class="string">&#x27;Apples&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> bananas = &#123;<span class="attr">name</span>: <span class="string">&#x27;Bananas&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> oranges = &#123;<span class="attr">name</span>: <span class="string">&#x27;Oranges&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建新的 Map</span></span><br><span class="line"><span class="keyword">const</span> fruits = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add new Elements to the Map</span></span><br><span class="line">fruits.<span class="title function_">set</span>(apples, <span class="number">500</span>);</span><br><span class="line">fruits.<span class="title function_">set</span>(bananas, <span class="number">300</span>);</span><br><span class="line">fruits.<span class="title function_">set</span>(oranges, <span class="number">200</span>);</span><br></pre></td></tr></table></figure><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>Set 是唯一值的集合。</p><p>每个值在 Set 中只能出现一次。</p><p>一个 Set 可以容纳任何数据类型的任何值。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建新的变量</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="string">&quot;b&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> c = <span class="string">&quot;c&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 Set</span></span><br><span class="line"><span class="keyword">const</span> letters = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add the values to the Set</span></span><br><span class="line">letters.<span class="title function_">add</span>(a);</span><br><span class="line">letters.<span class="title function_">add</span>(b);</span><br><span class="line">letters.<span class="title function_">add</span>(c);</span><br></pre></td></tr></table></figure><h2 id="JS-事件"><a href="#JS-事件" class="headerlink" title="JS 事件"></a>JS 事件</h2><h3 id="常见HTML事件"><a href="#常见HTML事件" class="headerlink" title="常见HTML事件"></a>常见HTML事件</h3><table><thead><tr><th align="left">事件</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">onchange</td><td align="left">HTML 元素已被改变</td></tr><tr><td align="left">onclick</td><td align="left">用户点击了 HTML 元素</td></tr><tr><td align="left">onmouseover</td><td align="left">用户把鼠标移动到 HTML 元素上</td></tr><tr><td align="left">onmouseout</td><td align="left">用户把鼠标移开 HTML 元素</td></tr><tr><td align="left">onkeydown</td><td align="left">用户按下键盘按键</td></tr><tr><td align="left">onload</td><td align="left">浏览器已经完成页面加载</td></tr></tbody></table><h2 id="JS-Async"><a href="#JS-Async" class="headerlink" title="JS Async"></a>JS Async</h2><h3 id="JS-回调"><a href="#JS-回调" class="headerlink" title="JS 回调"></a>JS 回调</h3><p>有时需要更好的控制何时执行函数，需要创建两个函数，一个用于具体处理，一个用于输出结果。</p><h3 id="JS-异步"><a href="#JS-异步" class="headerlink" title="JS 异步"></a>JS 异步</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Boolean([表达式]) //用以确定表达式的正确与否</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(</span><br><span class="line">            <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span>=<span class="string">&quot;I Love You&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="number">5000</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//回调函数</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">myDisplayer</span>(<span class="params">some</span>)&#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;demo&#x27;</span>).<span class="property">innerHTML</span> = some;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//业务处理</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params">myCallback</span>)&#123;</span><br><span class="line">            <span class="keyword">let</span> name = <span class="string">&#x27;夏衍&#x27;</span>;</span><br><span class="line">            <span class="keyword">let</span> three = [<span class="string">&#x27;春&#x27;</span>,<span class="string">&#x27;夏&#x27;</span>,<span class="string">&#x27;秋&#x27;</span>,<span class="string">&#x27;冬&#x27;</span>];</span><br><span class="line">            <span class="keyword">let</span> n = <span class="title class_">Math</span>.<span class="title function_">floor</span>((<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">4</span>));</span><br><span class="line">            </span><br><span class="line">            name = name + three[n];</span><br><span class="line">            <span class="title function_">myCallback</span>(name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用</span></span><br><span class="line">        <span class="title function_">getName</span>(myDisplayer);</span><br></pre></td></tr></table></figure><h3 id="JS-Promise"><a href="#JS-Promise" class="headerlink" title="JS Promise"></a>JS Promise</h3><p>Promise对象是包含生产代码和对消费代码的调用</p><p>语法规则如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myPromise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">myResolve,myReject</span>)&#123;</span><br><span class="line"><span class="title function_">myResolve</span>();<span class="comment">//成功时调用</span></span><br><span class="line">myReject;<span class="comment">//失败时调用</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">myPromise.<span class="title function_">then</span>(</span><br><span class="line"><span class="keyword">function</span>(<span class="params">value</span>)&#123;<span class="comment">/* 成功时的代码 */</span>&#125;,</span><br><span class="line"><span class="keyword">function</span>(<span class="params">error</span>)&#123;<span class="comment">/* 出错时的代码 */</span>&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="JS-Async-1"><a href="#JS-Async-1" class="headerlink" title="JS Async*"></a>JS Async*</h3><p>函数前的关键字<code>async</code>使函数返回promise</p><h1 id="JS-DOM"><a href="#JS-DOM" class="headerlink" title="JS DOM"></a>JS DOM</h1><p><img src="C:\Users\admin\Desktop\学习笔记\资源\HTML-DOM.gif" alt="HTML-DOM"></p><p>通过这个对象模型，JavaScript 获得创建动态 HTML 的所有力量：</p><ul><li>JavaScript 能改变页面中的所有 HTML 元素</li><li>JavaScript 能改变页面中的所有 HTML 属性</li><li>JavaScript 能改变页面中的所有 CSS 样式</li><li>JavaScript 能删除已有的 HTML 元素和属性</li><li>JavaScript 能添加新的 HTML 元素和属性</li><li>JavaScript 能对页面中所有已有的 HTML 事件作出反应</li><li>JavaScript 能在页面中创建新的 HTML 事件</li></ul><p><strong>HTML DOM 方法是您能够（在 HTML 元素上）执行的动作。</strong></p><p><strong>HTML DOM 属性是您能够设置或改变的 HTML 元素的值。</strong></p><h2 id="JS-DOM文档"><a href="#JS-DOM文档" class="headerlink" title="JS DOM文档"></a>JS DOM文档</h2><h3 id="查找-HTML-元素"><a href="#查找-HTML-元素" class="headerlink" title="查找 HTML 元素"></a>查找 HTML 元素</h3><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">document.getElementById(<em>id</em>)</td><td align="left">通过元素 id 来查找元素</td></tr><tr><td align="left">document.getElementsByTagName(<em>name</em>)</td><td align="left">通过标签名来查找元素</td></tr><tr><td align="left">document.getElementsByClassName(<em>name</em>)</td><td align="left">通过类名来查找元素</td></tr></tbody></table><h3 id="改变-HTML-元素"><a href="#改变-HTML-元素" class="headerlink" title="改变 HTML 元素"></a>改变 HTML 元素</h3><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">element.innerHTML &#x3D; <em>new html content</em></td><td align="left">改变元素的 inner HTML</td></tr><tr><td align="left">element.attribute &#x3D; <em>new value</em></td><td align="left">改变 HTML 元素的属性值</td></tr><tr><td align="left">element.setAttribute(<em>attribute</em>, <em>value</em>)</td><td align="left">改变 HTML 元素的属性值</td></tr><tr><td align="left">element.style.property &#x3D; <em>new style</em></td><td align="left">改变 HTML 元素的样式</td></tr></tbody></table><h3 id="添加和删除元素"><a href="#添加和删除元素" class="headerlink" title="添加和删除元素"></a>添加和删除元素</h3><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">document.createElement(<em>element</em>)</td><td align="left">创建 HTML 元素</td></tr><tr><td align="left">document.removeChild(<em>element</em>)</td><td align="left">删除 HTML 元素</td></tr><tr><td align="left">document.appendChild(<em>element</em>)</td><td align="left">添加 HTML 元素</td></tr><tr><td align="left">document.replaceChild(<em>element</em>)</td><td align="left">替换 HTML 元素</td></tr><tr><td align="left">document.write(<em>text</em>)</td><td align="left">写入 HTML 输出流</td></tr></tbody></table><h3 id="添加事件处理程序"><a href="#添加事件处理程序" class="headerlink" title="添加事件处理程序"></a>添加事件处理程序</h3><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">document.getElementById(id).onclick &#x3D; function(){<em>code</em>}</td><td align="left">向 onclick 事件添加事件处理程序</td></tr></tbody></table><h3 id="查找-HTML-对象"><a href="#查找-HTML-对象" class="headerlink" title="查找 HTML 对象"></a>查找 HTML 对象</h3><table><thead><tr><th align="left">属性</th><th align="left">描述</th><th align="left">DOM</th></tr></thead><tbody><tr><td align="left">document.anchors</td><td align="left">返回拥有 name 属性的所有 <a> 元素。</td><td align="left">1</td></tr><tr><td align="left">document.applets</td><td align="left">返回所有 <applet> 元素（HTML5 不建议使用）</td><td align="left">1</td></tr><tr><td align="left">document.baseURI</td><td align="left">返回文档的绝对基准 URI</td><td align="left">3</td></tr><tr><td align="left">document.body</td><td align="left">返回 <body> 元素</td><td align="left">1</td></tr><tr><td align="left">document.cookie</td><td align="left">返回文档的 cookie</td><td align="left">1</td></tr><tr><td align="left">document.doctype</td><td align="left">返回文档的 doctype</td><td align="left">3</td></tr><tr><td align="left">document.documentElement</td><td align="left">返回 <html> 元素</td><td align="left">3</td></tr><tr><td align="left">document.documentMode</td><td align="left">返回浏览器使用的模式</td><td align="left">3</td></tr><tr><td align="left">document.documentURI</td><td align="left">返回文档的 URI</td><td align="left">3</td></tr><tr><td align="left">document.domain</td><td align="left">返回文档服务器的域名</td><td align="left">1</td></tr><tr><td align="left">document.domConfig</td><td align="left">废弃。返回 DOM 配置</td><td align="left">3</td></tr><tr><td align="left">document.embeds</td><td align="left">返回所有 <embed> 元素</td><td align="left">3</td></tr><tr><td align="left">document.forms</td><td align="left">返回所有 <form> 元素</td><td align="left">1</td></tr><tr><td align="left">document.head</td><td align="left">返回 <head> 元素</td><td align="left">3</td></tr><tr><td align="left">document.images</td><td align="left">返回所有 <img> 元素</td><td align="left">1</td></tr><tr><td align="left">document.implementation</td><td align="left">返回 DOM 实现</td><td align="left">3</td></tr><tr><td align="left">document.inputEncoding</td><td align="left">返回文档的编码（字符集）</td><td align="left">3</td></tr><tr><td align="left">document.lastModified</td><td align="left">返回文档更新的日期和时间</td><td align="left">3</td></tr><tr><td align="left">document.links</td><td align="left">返回拥有 href 属性的所有 <area> 和 <a> 元素</td><td align="left">1</td></tr><tr><td align="left">document.readyState</td><td align="left">返回文档的（加载）状态</td><td align="left">3</td></tr><tr><td align="left">document.referrer</td><td align="left">返回引用的 URI（链接文档）</td><td align="left">1</td></tr><tr><td align="left">document.scripts</td><td align="left">返回所有 <script> 元素</td><td align="left">3</td></tr><tr><td align="left">document.strictErrorChecking</td><td align="left">返回是否强制执行错误检查</td><td align="left">3</td></tr><tr><td align="left">document.title</td><td align="left">返回 <title> 元素</td><td align="left">1</td></tr><tr><td align="left">document.URL</td><td align="left">返回文档的完整 URL</td><td align="left">1</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> demo = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;demo&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> demo2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;demo2&#x27;</span>);</span><br><span class="line">demo.<span class="property">innerHTML</span> = <span class="string">&#x27;今天天气特好&#x27;</span>;</span><br><span class="line">demo.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line">demo2.<span class="property">innerHTML</span> = demo.<span class="title function_">getAttributeNames</span>();</span><br></pre></td></tr></table></figure><h2 id="JS-DOM元素"><a href="#JS-DOM元素" class="headerlink" title="JS DOM元素"></a>JS DOM元素</h2><p>DOM 中查找 HTML 元素最简单的方法是，使用元素的 id。</p><p><code>var demo = document.getElementById(&#39;demo&#39;);</code></p><p>通过标签名查找 HTML 元素</p><p><code>var x = document.getElementsByTagName(&quot;p&quot;);</code></p><p>通过类名查找 HTML 元素</p><p><code>var x = document.getElementsByClassName(&quot;intro&quot;);</code></p><p>通过 CSS 选择器查找 HTML 元素</p><p><code>var x = document.querySelectorAll(&quot;p.intro&quot;);</code></p><p>获取表单信息</p><p><code>let x = document.forms[&quot;myForm&quot;][&quot;fname&quot;].value;</code></p><p>改变HTML样式</p><p><code>document.getElementById(id).style.property = new style</code></p><h2 id="HTML-事件"><a href="#HTML-事件" class="headerlink" title="HTML 事件"></a>HTML 事件</h2><p>onclick 点击事件</p><p>onload 事件：可用于检测访问者的浏览器类型和浏览器版本，然后基于该信息加载网页的恰当版本。可用于处理 cookie</p><p>onunload事件：可用于处理 cookie</p><p>onchange事件：一般用于验证输入字段</p><p>onmouseover 和 onmouseout 事件：鼠标移至或移出事件</p><h2 id="HTML-事件监听"><a href="#HTML-事件监听" class="headerlink" title="HTML 事件监听"></a>HTML 事件监听</h2><p><code>document.getElementById(&quot;myBtn&quot;).addEventListener(&quot;click&quot;, displayDate);</code></p><p>addEventListener() 方法为指定元素指定事件处理程序。</p><p>addEventListener() 方法为元素附加事件处理程序而不会覆盖已有的事件处理程序。</p><p>您能够向一个元素添加多个事件处理程序。</p><p>您能够向一个元素添加多个相同类型的事件处理程序，例如两个 "click" 事件。</p><p>您能够向任何 DOM 对象添加事件处理程序而非仅仅 HTML 元素，例如 window 对象。</p><p>addEventListener() 方法使我们更容易控制事件如何对冒泡作出反应。</p><p>当使用 addEventListener() 方法时，JavaScript 与 HTML 标记是分隔的，已达到更佳的可读性；即使在不控制 HTML 标记时也允许您添加事件监听器。</p><h1 id="JS-Browser-BOM"><a href="#JS-Browser-BOM" class="headerlink" title="JS Browser BOM"></a>JS Browser BOM</h1><p>浏览器对象模型（Browser Object Model(BOM)）允许JavaScript 与浏览器对话。</p><h2 id="JS-弹出框"><a href="#JS-弹出框" class="headerlink" title="JS 弹出框"></a>JS 弹出框</h2><h3 id="警告框"><a href="#警告框" class="headerlink" title="警告框"></a>警告框</h3><p><code>window.alert(&quot;sometext&quot;)</code></p><h3 id="确认框"><a href="#确认框" class="headerlink" title="确认框"></a>确认框</h3><p><code>window.confirm(&quot;sometext&quot;)</code></p><h3 id="提示框"><a href="#提示框" class="headerlink" title="提示框"></a>提示框</h3><p><code>window.prompt(&quot;sometext&quot;,&quot;defaultText&quot;)</code></p><h2 id="JS-定时"><a href="#JS-定时" class="headerlink" title="JS 定时"></a>JS 定时</h2><p>window 对象允许以指定的时间间隔执行代码。</p><p>这些时间间隔称为定时事件。</p><p>通过 JavaScript 使用的有两个关键的方法：</p><ul><li><p>setTimeout(<em>function</em>, <em>milliseconds</em>)</p><p>在等待指定的毫秒数后执行函数。</p></li><li><p>setInterval(<em>function</em>, <em>milliseconds</em>)</p></li></ul><p><code>window.setTimeout(function, milliseconds);</code></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 20px; height: 20px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> d = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;d&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> r = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">256</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> g = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">256</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> b = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">256</span>);</span></span><br><span class="line"><span class="language-javascript">            d.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;rgb(&#x27;</span>+r+<span class="string">&#x27;,&#x27;</span>+g+<span class="string">&#x27;,&#x27;</span>+b+<span class="string">&#x27;)&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">setInterval</span>(b,<span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>通过 JavaScript 创建 cookie<br>JavaScript 可以用 document.cookie 属性创建、读取、删除 cookie。</p><p>通过 JavaScript，可以这样创建 cookie：</p><p>document.cookie = "username=Bill Gates";<br>您还可以添加有效日期（UTC 时间）。默认情况下，在浏览器关闭时会删除 cookie：</p><p>document.cookie = "username=John Doe; expires=Sun, 31 Dec 2017 12:00:00 UTC";<br>通过 path 参数，您可以告诉浏览器 cookie 属于什么路径。默认情况下，cookie 属于当前页。</p><p>document.cookie = "username=Bill Gates; expires=Sun, 31 Dec 2017 12:00:00 UTC; path=/";<br>通过 JavaScript 读取 cookie<br>通过 JavaScript，可以这样读取 cookie：</p><p>var x = document.cookie;<br>document.cookie 会在一条字符串中返回所有 cookie，比如：cookie1=value; cookie2=value; cookie3=value;</p><p>通过 JavaScript 改变 cookie<br>通过使用 JavaScript，你可以像你创建 cookie 一样改变它：</p><p>document.cookie = "username=Steve Jobs; expires=Sun, 31 Dec 2017 12:00:00 UTC; path=/";<br>旧 cookie 被覆盖。</p><p>通过 JavaScript 删除 cookie<br>删除 cookie 非常简单。</p><p>删除 cookie 时不必指定 cookie 值：</p><p>直接把 expires 参数设置为过去的日期即可：</p><p>document.cookie = "username=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";<br>您应该定义 cookie 路径以确保删除正确的 cookie。</p><p>如果你不指定路径，一些浏览器不会让你删除 cookie。</p><h1 id="JS-AJAX"><a href="#JS-AJAX" class="headerlink" title="JS AJAX*"></a>JS AJAX*</h1><ul><li>不刷新页面更新网页</li><li>在页面加载后从服务器请求数据</li><li>在页面加载后从服务器接收数据</li><li>在后台向服务器发送数据</li></ul><p><strong>Ajax 的核心是 XMLHttpRequest 对象。</strong></p><h2 id="创建XMLHttpRequest对象"><a href="#创建XMLHttpRequest对象" class="headerlink" title="创建XMLHttpRequest对象"></a>创建XMLHttpRequest对象</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhttp;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>) &#123;</span><br><span class="line">    xhttp = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// code for IE6, IE5</span></span><br><span class="line">     xhttp = <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JS-JSON"><a href="#JS-JSON" class="headerlink" title="JS JSON"></a>JS JSON</h1><p><strong>JavaScript Object Notation（JavaScript 对象标记法）</strong></p><p><strong>JSON 是一种存储和交换数据的语法。</strong></p><p><strong>JSON 是通过 JavaScript 对象标记法书写的文本。</strong></p><h2 id="JSON-基础"><a href="#JSON-基础" class="headerlink" title="JSON 基础"></a>JSON 基础</h2><h3 id="交换数据"><a href="#交换数据" class="headerlink" title="交换数据"></a>交换数据</h3><p>当数据在浏览器与服务器之间进行交换时，这些数据只能是文本。</p><p>JSON 属于文本，并且我们能够把任何 JavaScript 对象转换为 JSON，然后将 JSON 发送到服务器。</p><p>我们也能把从服务器接收到的任何 JSON 转换为 JavaScript 对象。</p><p>以这样的方式，我们能够把数据作为 JavaScript 对象来处理，无需复杂的解析和转译。</p><h3 id="发送数据"><a href="#发送数据" class="headerlink" title="发送数据"></a>发送数据</h3><p>如果您的数据存储在 JavaScript 对象中，您可以把该对象转换为 JSON，然后将其发送到服务器。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myObj = &#123; <span class="attr">name</span>:<span class="string">&quot;Bill Gates&quot;</span>,  <span class="attr">age</span>:<span class="number">62</span>, <span class="attr">city</span>:<span class="string">&quot;Seattle&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> myJSON =  <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(myObj);</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">location</span> = <span class="string">&quot;demo_json.php?x=&quot;</span> + myJSON;</span><br></pre></td></tr></table></figure><h3 id="接收数据"><a href="#接收数据" class="headerlink" title="接收数据"></a>接收数据</h3><p>如果您以 JSON 格式接收到数据，您能够将其转换为 JavaScript 对象：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myJSON = <span class="string">&#x27;&#123; &quot;name&quot;:&quot;Bill Gates&quot;,  &quot;age&quot;:62, &quot;city&quot;:&quot;Seattle&quot; &#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> myObj =  <span class="title class_">JSON</span>.<span class="title function_">parse</span>(myJSON);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span> = myObj.<span class="property">name</span>;</span><br></pre></td></tr></table></figure><h3 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h3><p>在存储数据时，数据必须是某种具体的格式，并且无论您选择在何处存储它，文本永远是合法格式之一。</p><p>JSON 让 JavaScript 对象存储为文本成为可能。</p><p>把数据存储在本地存储中</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//存储数据：</span></span><br><span class="line">myObj = &#123; <span class="attr">name</span>:<span class="string">&quot;Bill Gates&quot;</span>,  <span class="attr">age</span>:<span class="number">62</span>, <span class="attr">city</span>:<span class="string">&quot;Seattle&quot;</span> &#125;;</span><br><span class="line">myJSON =  <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(myObj);</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;testJSON&quot;</span>, myJSON);</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收数据：</span></span><br><span class="line">text = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;testJSON&quot;</span>);</span><br><span class="line">obj =  <span class="title class_">JSON</span>.<span class="title function_">parse</span>(text);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span> = obj.<span class="property">name</span>;</span><br></pre></td></tr></table></figure><h3 id="什么是-JSON？"><a href="#什么是-JSON？" class="headerlink" title="什么是 JSON？"></a>什么是 JSON？</h3><ul><li>JSON 指的是 JavaScript 对象标记法（<em>J</em>ava<em>S</em>cript <em>O</em>bject <em>N</em>otation）</li><li>JSON 是一种轻量级的数据交换格式</li><li>JSON 具有自我描述性且易于理解</li><li>JSON 独立于语言*</li></ul><ul><li></li></ul><p>JSON 使用 JavaScript 语法，但是 JSON 格式是纯文本的。</p><p>文本可被任何编程语言作为数据来读取和使用。</p><p>JSON 格式最初由 Douglas Crockford 提出。</p><h3 id="为什么使用-JSON？"><a href="#为什么使用-JSON？" class="headerlink" title="为什么使用 JSON？"></a>为什么使用 JSON？</h3><p>因为 JSON 格式仅仅是文本，它能够轻松地在服务器浏览器之间传输，并用作任何编程语言的数据格式。</p><p>JavaScript 提供內建函数把以 JSON 格式写的字符串转换为原生 JavaScript 对象：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JSON.parse()</span><br></pre></td></tr></table></figure><p>因此，如果您以 JSON 格式从服务器接收数据，那么您可以像任何其他 JavaScript 对象那样使用它。</p><h2 id="JSON-语法"><a href="#JSON-语法" class="headerlink" title="JSON 语法"></a>JSON 语法</h2><p>JSON语法是javascript语法的子集</p><h3 id="JSON语法规则"><a href="#JSON语法规则" class="headerlink" title="JSON语法规则"></a>JSON语法规则</h3><ul><li>数据在名称/值对中</li><li>数据由逗号分隔</li><li>花括号容纳对象</li><li>方括号容纳数组</li></ul><h2 id="JSOM-vs-XML"><a href="#JSOM-vs-XML" class="headerlink" title="JSOM vs XML"></a>JSOM vs XML</h2><p>二者均可以从web服务器接收数据</p><h3 id="为什么-JSON-比-XML-更好？"><a href="#为什么-JSON-比-XML-更好？" class="headerlink" title="为什么 JSON 比 XML 更好？"></a>为什么 JSON 比 XML 更好？</h3><ul><li>XML 比 JSON 更难解析。</li><li>JSON 被解析为可供使用的 JavaScript 对象。</li></ul><p>对于 AJAX 应用程序，JSON 比 XML 更快更易用：</p><p>使用 XML</p><ul><li>读取 XML 文档</li><li>使用 XML DOM 遍历文档</li><li>提取变量中存储的值</li></ul><p>使用 JSON</p><ul><li>读取 JSON 字符串</li><li>JSON.Parse JSON 字符串</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 语言 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习清单</title>
      <link href="/2022/10/06/note/LearningChecklist/"/>
      <url>/2022/10/06/note/LearningChecklist/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机基础"><a href="#计算机基础" class="headerlink" title="计算机基础"></a>计算机基础</h1><ul><li><input disabled="" type="checkbox"> 数据结构（**JAVA数据结构 + 王道）</li><li><input disabled="" type="checkbox"> 计算机组成（王道）</li><li><input disabled="" type="checkbox"> 计算机操作系统（王道）</li><li><input disabled="" type="checkbox"> 计算机网络（王道 + 图解HTTP）</li><li><input disabled="" type="checkbox"> 设计模式 （大话设计模式+《设计模式 可复用面向对象软件的基础》）</li></ul><h1 id="JAVA技术"><a href="#JAVA技术" class="headerlink" title="JAVA技术"></a>JAVA技术</h1><ul><li><input disabled="" type="checkbox"> 反射机制</li><li><input disabled="" type="checkbox"> IO</li><li><input disabled="" type="checkbox"> 多线程</li><li><input disabled="" type="checkbox"> 高并发</li></ul><h1 id="系统架构师（优先）"><a href="#系统架构师（优先）" class="headerlink" title="系统架构师（优先）"></a>系统架构师（优先）</h1><ul><li><input disabled="" type="checkbox"> Docker</li><li><input disabled="" type="checkbox"> VMware</li></ul><h1 id="微服务技术"><a href="#微服务技术" class="headerlink" title="微服务技术"></a>微服务技术</h1><ul><li><input disabled="" type="checkbox"> 1、服务注册发现： Nacos</li><li><input disabled="" type="checkbox"> 2、服务配置中心： Nacos</li><li><input disabled="" type="checkbox"> 3、服务网关：Spring Cloud Gateway</li><li><input disabled="" type="checkbox"> 4、熔断限流： Sentinel</li><li><input disabled="" type="checkbox"> 5、服务监控： Spring Boot Admin</li><li><input disabled="" type="checkbox"> 6、分布式数据库：RDS</li><li><input disabled="" type="checkbox"> 7、分布式缓存：Redis</li><li><input disabled="" type="checkbox"> 8、分布式文件： Minio</li><li><input disabled="" type="checkbox"> 9、分布式事务： Seata</li><li><input disabled="" type="checkbox"> 10、链路跟踪：SkyWarking</li><li><input disabled="" type="checkbox"> 11、分布式日志：ELK（Elasticsearch , Logstash, Kibana）</li><li><input disabled="" type="checkbox"> 12、容器云：kubernetes、Rancher</li><li><input disabled="" type="checkbox"> 13、CI&#x2F;CD持续集成&#x2F;部署：Jenkins</li><li><input disabled="" type="checkbox"> 14、代码仓库：GitLab</li><li><input disabled="" type="checkbox"> 15、镜像仓库：Harbor</li><li><input disabled="" type="checkbox"> <span style="color:red">16、XHP摄影网站</span></li></ul>]]></content>
      
      
      <categories>
          
          <category> 个人清单 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 清单 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
